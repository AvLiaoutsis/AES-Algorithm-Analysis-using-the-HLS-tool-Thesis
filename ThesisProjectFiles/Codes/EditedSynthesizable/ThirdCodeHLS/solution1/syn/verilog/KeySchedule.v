// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module KeySchedule (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        key_address0,
        key_ce0,
        key_q0,
        worda_address0,
        worda_ce0,
        worda_we0,
        worda_d0,
        worda_q0,
        worda_address1,
        worda_ce1,
        worda_q1
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] key_address0;
output   key_ce0;
input  [31:0] key_q0;
output  [8:0] worda_address0;
output   worda_ce0;
output   worda_we0;
output  [31:0] worda_d0;
input  [31:0] worda_q0;
output  [8:0] worda_address1;
output   worda_ce1;
input  [31:0] worda_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg key_ce0;
reg[8:0] worda_address0;
reg worda_ce0;
reg worda_we0;
reg[31:0] worda_d0;
reg[8:0] worda_address1;
reg worda_ce1;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [7:0] Sbox_address0;
reg    Sbox_ce0;
wire   [7:0] Sbox_q0;
reg   [7:0] Sbox_address1;
reg    Sbox_ce1;
wire   [7:0] Sbox_q1;
wire   [4:0] Rcon0_address0;
reg    Rcon0_ce0;
wire   [7:0] Rcon0_q0;
wire   [2:0] j_4_fu_361_p2;
reg   [2:0] j_4_reg_986;
wire    ap_CS_fsm_state2;
wire   [3:0] tmp_fu_371_p3;
reg   [3:0] tmp_reg_991;
wire   [0:0] exitcond3_fu_355_p2;
reg   [8:0] worda_addr_reg_996;
wire    ap_CS_fsm_state3;
wire   [2:0] i_1_fu_452_p2;
reg   [2:0] i_1_reg_1004;
wire   [0:0] exitcond2_fu_446_p2;
wire   [9:0] j_1_cast2_cast_fu_468_p1;
reg   [9:0] j_1_cast2_cast_reg_1014;
wire    ap_CS_fsm_state5;
wire   [0:0] tmp_s_fu_482_p2;
reg   [0:0] tmp_s_reg_1022;
wire   [0:0] exitcond1_fu_472_p2;
reg   [8:0] worda_addr_5_reg_1032;
reg   [8:0] worda_addr_6_reg_1037;
reg   [8:0] worda_addr_7_reg_1043;
reg   [31:0] temp_0_1_reg_1048;
wire    ap_CS_fsm_state6;
reg   [31:0] temp_1_1_reg_1053;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
reg   [7:0] Sbox_load_reg_1078;
wire    ap_CS_fsm_state9;
reg   [7:0] temp_1_reg_1088;
wire   [9:0] tmp_52_cast_cast_fu_891_p1;
reg   [9:0] tmp_52_cast_cast_reg_1103;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
reg   [8:0] worda_addr_9_reg_1113;
wire   [2:0] i_3_fu_947_p2;
reg   [2:0] i_3_reg_1121;
wire   [31:0] tmp_13_fu_957_p6;
reg   [31:0] tmp_13_reg_1126;
wire   [0:0] exitcond_fu_941_p2;
wire   [5:0] j_5_fu_971_p2;
reg   [2:0] j_reg_209;
reg   [2:0] i_reg_221;
wire    ap_CS_fsm_state4;
reg   [5:0] j_1_reg_232;
wire   [31:0] temp_2_cast_fu_875_p1;
reg   [31:0] temp_22_reg_244;
wire   [31:0] temp_1_cast_fu_871_p1;
reg   [31:0] temp_12_reg_254;
wire   [31:0] temp_0_1_cast_fu_866_p1;
reg   [31:0] temp_02_reg_264;
wire   [31:0] Sbox_load_3_cast_fu_880_p1;
reg   [31:0] temp_3_reg_274;
reg   [2:0] i_2_reg_284;
wire    ap_CS_fsm_state12;
wire  signed [31:0] tmp_53_fu_437_p1;
wire   [31:0] sum_cast_fu_463_p1;
wire   [31:0] tmp_58_cast_fu_513_p1;
wire   [31:0] tmp_59_cast_fu_524_p1;
wire   [31:0] tmp_60_cast_fu_535_p1;
wire   [31:0] tmp_50_cast_fu_494_p1;
wire   [31:0] tmp_68_cast_fu_610_p1;
wire   [31:0] tmp_76_cast_fu_685_p1;
wire   [31:0] tmp_34_fu_706_p1;
wire   [31:0] tmp_84_cast_fu_781_p1;
wire   [31:0] tmp_92_cast_fu_856_p1;
wire  signed [31:0] tmp_96_cast_fu_926_p1;
wire  signed [31:0] tmp_97_cast_fu_936_p1;
wire   [31:0] tmp_36_fu_977_p2;
wire   [31:0] grp_fu_303_p2;
wire   [5:0] grp_fu_309_p4;
wire   [31:0] grp_fu_333_p2;
wire   [5:0] grp_fu_339_p4;
wire   [1:0] tmp_46_fu_367_p1;
wire   [9:0] tmp_45_fu_379_p3;
wire   [5:0] tmp_47_fu_391_p3;
wire   [10:0] p_shl_cast_fu_387_p1;
wire   [10:0] p_shl5_cast_fu_399_p1;
wire   [10:0] tmp_48_fu_403_p2;
wire   [2:0] tmp_49_fu_409_p1;
wire   [7:0] tmp_51_fu_419_p4;
wire   [2:0] tmp_50_fu_413_p2;
wire   [10:0] tmp_52_fu_429_p3;
wire   [3:0] i_cast_fu_442_p1;
wire   [3:0] sum_fu_458_p2;
wire   [1:0] tmp_54_fu_478_p1;
wire   [5:0] tmp_33_fu_488_p2;
wire   [7:0] tmp_50_cast_cast_fu_503_p1;
wire   [7:0] tmp_55_fu_507_p2;
wire   [8:0] tmp_50_cast_cast1_fu_499_p1;
wire   [8:0] tmp_56_fu_518_p2;
wire   [8:0] tmp_57_fu_529_p2;
wire   [3:0] tmp_60_fu_544_p1;
wire   [9:0] tmp_61_fu_548_p3;
wire   [3:0] tmp_59_fu_540_p1;
wire   [0:0] grp_fu_295_p3;
wire   [9:0] tmp_62_fu_556_p2;
wire   [9:0] tmp_63_fu_562_p3;
wire   [5:0] grp_fu_319_p2;
wire   [5:0] tmp_65_fu_578_p4;
wire   [5:0] tmp_66_fu_588_p3;
wire   [9:0] tmp_67_cast_fu_596_p3;
wire   [9:0] tmp_64_fu_570_p3;
wire   [9:0] tmp_67_fu_604_p2;
wire   [3:0] tmp_70_fu_619_p1;
wire   [9:0] tmp_71_fu_623_p3;
wire   [3:0] tmp_69_fu_615_p1;
wire   [0:0] grp_fu_325_p3;
wire   [9:0] tmp_72_fu_631_p2;
wire   [9:0] tmp_73_fu_637_p3;
wire   [5:0] grp_fu_349_p2;
wire   [5:0] tmp_75_fu_653_p4;
wire   [5:0] tmp_77_fu_663_p3;
wire   [9:0] tmp_75_cast_fu_671_p3;
wire   [9:0] tmp_74_fu_645_p3;
wire   [9:0] tmp_76_fu_679_p2;
wire   [3:0] p_lshr_f_cast_fu_690_p4;
wire   [3:0] addconv_fu_700_p2;
wire   [3:0] tmp_80_fu_715_p1;
wire   [9:0] tmp_81_fu_719_p3;
wire   [3:0] tmp_79_fu_711_p1;
wire   [9:0] tmp_82_fu_727_p2;
wire   [9:0] tmp_83_fu_733_p3;
wire   [5:0] tmp_86_fu_749_p4;
wire   [5:0] tmp_87_fu_759_p3;
wire   [9:0] tmp_83_cast_fu_767_p3;
wire   [9:0] tmp_85_fu_741_p3;
wire   [9:0] tmp_84_fu_775_p2;
wire   [3:0] tmp_90_fu_790_p1;
wire   [9:0] tmp_91_fu_794_p3;
wire   [3:0] tmp_89_fu_786_p1;
wire   [9:0] tmp_98_fu_802_p2;
wire   [9:0] tmp_99_fu_808_p3;
wire   [5:0] tmp_101_fu_824_p4;
wire   [5:0] tmp_102_fu_834_p3;
wire   [9:0] tmp_91_cast_fu_842_p3;
wire   [9:0] tmp_100_fu_816_p3;
wire   [9:0] tmp_92_fu_850_p2;
wire   [7:0] temp_0_fu_861_p2;
wire   [5:0] tmp_35_fu_885_p2;
wire   [5:0] tmp_94_fu_903_p3;
wire   [9:0] tmp_93_fu_895_p3;
wire   [9:0] p_shl2_cast_fu_911_p1;
wire   [9:0] tmp_95_fu_915_p2;
wire   [9:0] tmp_96_fu_921_p2;
wire   [9:0] tmp_97_fu_931_p2;
wire   [1:0] tmp_13_fu_957_p5;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

KeySchedule_Sbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
Sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Sbox_address0),
    .ce0(Sbox_ce0),
    .q0(Sbox_q0),
    .address1(Sbox_address1),
    .ce1(Sbox_ce1),
    .q1(Sbox_q1)
);

KeySchedule_Rcon0 #(
    .DataWidth( 8 ),
    .AddressRange( 30 ),
    .AddressWidth( 5 ))
Rcon0_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon0_address0),
    .ce0(Rcon0_ce0),
    .q0(Rcon0_q0)
);

aes_main_mux_42_3bkb #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 32 ),
    .din5_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
aes_main_mux_42_3bkb_U0(
    .din1(temp_02_reg_264),
    .din2(temp_12_reg_254),
    .din3(temp_22_reg_244),
    .din4(temp_3_reg_274),
    .din5(tmp_13_fu_957_p5),
    .dout(tmp_13_fu_957_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        i_2_reg_284 <= i_3_reg_1121;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_2_reg_284 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_355_p2 == 1'd0))) begin
        i_reg_221 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_221 <= i_1_reg_1004;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_355_p2 == 1'd1))) begin
        j_1_reg_232 <= 6'd4;
    end else if (((1'b1 == ap_CS_fsm_state11) & (exitcond_fu_941_p2 == 1'd1))) begin
        j_1_reg_232 <= j_5_fu_971_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_446_p2 == 1'd1))) begin
        j_reg_209 <= j_4_reg_986;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_209 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_02_reg_264 <= temp_0_1_reg_1048;
    end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_s_reg_1022 == 1'd1))) begin
        temp_02_reg_264 <= temp_0_1_cast_fu_866_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_12_reg_254 <= temp_1_1_reg_1053;
    end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_s_reg_1022 == 1'd1))) begin
        temp_12_reg_254 <= temp_1_cast_fu_871_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_22_reg_244 <= worda_q1;
    end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_s_reg_1022 == 1'd1))) begin
        temp_22_reg_244 <= temp_2_cast_fu_875_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_3_reg_274 <= worda_q0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (tmp_s_reg_1022 == 1'd1))) begin
        temp_3_reg_274 <= Sbox_load_3_cast_fu_880_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Sbox_load_reg_1078 <= Sbox_q0;
        temp_1_reg_1088 <= Sbox_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_1004 <= i_1_fu_452_p2;
        worda_addr_reg_996 <= tmp_53_fu_437_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        i_3_reg_1121 <= i_3_fu_947_p2;
        worda_addr_9_reg_1113 <= tmp_97_cast_fu_936_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_1_cast2_cast_reg_1014[5 : 0] <= j_1_cast2_cast_fu_468_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_4_reg_986 <= j_4_fu_361_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        temp_0_1_reg_1048 <= worda_q0;
        temp_1_1_reg_1053 <= worda_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & (1'd0 == exitcond_fu_941_p2))) begin
        tmp_13_reg_1126 <= tmp_13_fu_957_p6;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        tmp_52_cast_cast_reg_1103[5 : 0] <= tmp_52_cast_cast_fu_891_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_355_p2 == 1'd0))) begin
        tmp_reg_991[3 : 2] <= tmp_fu_371_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_472_p2))) begin
        tmp_s_reg_1022 <= tmp_s_fu_482_p2;
        worda_addr_5_reg_1032 <= tmp_59_cast_fu_524_p1;
        worda_addr_6_reg_1037 <= tmp_60_cast_fu_535_p1;
        worda_addr_7_reg_1043[5 : 0] <= tmp_50_cast_fu_494_p1[5 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Rcon0_ce0 = 1'b1;
    end else begin
        Rcon0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Sbox_address0 = tmp_84_cast_fu_781_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        Sbox_address0 = tmp_68_cast_fu_610_p1;
    end else begin
        Sbox_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        Sbox_address1 = tmp_92_cast_fu_856_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        Sbox_address1 = tmp_76_cast_fu_685_p1;
    end else begin
        Sbox_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        Sbox_ce0 = 1'b1;
    end else begin
        Sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9))) begin
        Sbox_ce1 = 1'b1;
    end else begin
        Sbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_472_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_472_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        key_ce0 = 1'b1;
    end else begin
        key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        worda_address0 = worda_addr_9_reg_1113;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        worda_address0 = worda_addr_7_reg_1043;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        worda_address0 = worda_addr_6_reg_1037;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_472_p2) & (tmp_s_fu_482_p2 == 1'd1))) begin
        worda_address0 = tmp_58_cast_fu_513_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_472_p2) & (1'd0 == tmp_s_fu_482_p2))) begin
        worda_address0 = tmp_50_cast_fu_494_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        worda_address0 = worda_addr_reg_996;
    end else begin
        worda_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        worda_address1 = tmp_96_cast_fu_926_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        worda_address1 = worda_addr_6_reg_1037;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        worda_address1 = worda_addr_5_reg_1032;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_472_p2) & (tmp_s_fu_482_p2 == 1'd1))) begin
        worda_address1 = tmp_59_cast_fu_524_p1;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_472_p2) & (1'd0 == tmp_s_fu_482_p2))) begin
        worda_address1 = tmp_58_cast_fu_513_p1;
    end else begin
        worda_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_472_p2) & (1'd0 == tmp_s_fu_482_p2)) | ((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_472_p2) & (tmp_s_fu_482_p2 == 1'd1)))) begin
        worda_ce0 = 1'b1;
    end else begin
        worda_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | ((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_472_p2) & (1'd0 == tmp_s_fu_482_p2)) | ((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_472_p2) & (tmp_s_fu_482_p2 == 1'd1)))) begin
        worda_ce1 = 1'b1;
    end else begin
        worda_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        worda_d0 = tmp_36_fu_977_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        worda_d0 = key_q0;
    end else begin
        worda_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state12))) begin
        worda_we0 = 1'b1;
    end else begin
        worda_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond3_fu_355_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond2_fu_446_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_472_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_472_p2) & (tmp_s_fu_482_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (exitcond_fu_941_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Rcon0_address0 = tmp_34_fu_706_p1;

assign Sbox_load_3_cast_fu_880_p1 = Sbox_q1;

assign addconv_fu_700_p2 = ($signed(4'd15) + $signed(p_lshr_f_cast_fu_690_p4));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_472_p2 = ((j_1_reg_232 == 6'd44) ? 1'b1 : 1'b0);

assign exitcond2_fu_446_p2 = ((i_reg_221 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond3_fu_355_p2 = ((j_reg_209 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_941_p2 = ((i_2_reg_284 == 3'd4) ? 1'b1 : 1'b0);

assign grp_fu_295_p3 = worda_q0[32'd31];

assign grp_fu_303_p2 = (32'd0 - worda_q0);

assign grp_fu_309_p4 = {{grp_fu_303_p2[9:4]}};

assign grp_fu_319_p2 = (6'd0 - grp_fu_309_p4);

assign grp_fu_325_p3 = worda_q1[32'd31];

assign grp_fu_333_p2 = (32'd0 - worda_q1);

assign grp_fu_339_p4 = {{grp_fu_333_p2[9:4]}};

assign grp_fu_349_p2 = (6'd0 - grp_fu_339_p4);

assign i_1_fu_452_p2 = (3'd1 + i_reg_221);

assign i_3_fu_947_p2 = (i_2_reg_284 + 3'd1);

assign i_cast_fu_442_p1 = i_reg_221;

assign j_1_cast2_cast_fu_468_p1 = j_1_reg_232;

assign j_4_fu_361_p2 = (j_reg_209 + 3'd1);

assign j_5_fu_971_p2 = (j_1_reg_232 + 6'd1);

assign key_address0 = sum_cast_fu_463_p1;

assign p_lshr_f_cast_fu_690_p4 = {{j_1_reg_232[5:2]}};

assign p_shl2_cast_fu_911_p1 = tmp_94_fu_903_p3;

assign p_shl5_cast_fu_399_p1 = tmp_47_fu_391_p3;

assign p_shl_cast_fu_387_p1 = tmp_45_fu_379_p3;

assign sum_cast_fu_463_p1 = sum_fu_458_p2;

assign sum_fu_458_p2 = (i_cast_fu_442_p1 + tmp_reg_991);

assign temp_0_1_cast_fu_866_p1 = temp_0_fu_861_p2;

assign temp_0_fu_861_p2 = (Rcon0_q0 ^ Sbox_load_reg_1078);

assign temp_1_cast_fu_871_p1 = temp_1_reg_1088;

assign temp_2_cast_fu_875_p1 = Sbox_q0;

assign tmp_100_fu_816_p3 = ((grp_fu_295_p3[0:0] === 1'b1) ? tmp_98_fu_802_p2 : tmp_99_fu_808_p3);

assign tmp_101_fu_824_p4 = {{worda_q0[9:4]}};

assign tmp_102_fu_834_p3 = ((grp_fu_295_p3[0:0] === 1'b1) ? grp_fu_319_p2 : tmp_101_fu_824_p4);

assign tmp_13_fu_957_p5 = i_2_reg_284[1:0];

assign tmp_33_fu_488_p2 = ($signed(6'd63) + $signed(j_1_reg_232));

assign tmp_34_fu_706_p1 = addconv_fu_700_p2;

assign tmp_35_fu_885_p2 = ($signed(j_1_reg_232) + $signed(6'd60));

assign tmp_36_fu_977_p2 = (worda_q1 ^ tmp_13_reg_1126);

assign tmp_45_fu_379_p3 = {{i_reg_221}, {7'd0}};

assign tmp_46_fu_367_p1 = j_reg_209[1:0];

assign tmp_47_fu_391_p3 = {{i_reg_221}, {3'd0}};

assign tmp_48_fu_403_p2 = (p_shl_cast_fu_387_p1 - p_shl5_cast_fu_399_p1);

assign tmp_49_fu_409_p1 = tmp_48_fu_403_p2[2:0];

assign tmp_50_cast_cast1_fu_499_p1 = tmp_33_fu_488_p2;

assign tmp_50_cast_cast_fu_503_p1 = tmp_33_fu_488_p2;

assign tmp_50_cast_fu_494_p1 = tmp_33_fu_488_p2;

assign tmp_50_fu_413_p2 = (tmp_49_fu_409_p1 | j_reg_209);

assign tmp_51_fu_419_p4 = {{tmp_48_fu_403_p2[10:3]}};

assign tmp_52_cast_cast_fu_891_p1 = tmp_35_fu_885_p2;

assign tmp_52_fu_429_p3 = {{tmp_51_fu_419_p4}, {tmp_50_fu_413_p2}};

assign tmp_53_fu_437_p1 = $signed(tmp_52_fu_429_p3);

assign tmp_54_fu_478_p1 = j_1_reg_232[1:0];

assign tmp_55_fu_507_p2 = (8'd120 + tmp_50_cast_cast_fu_503_p1);

assign tmp_56_fu_518_p2 = (9'd240 + tmp_50_cast_cast1_fu_499_p1);

assign tmp_57_fu_529_p2 = ($signed(9'd360) + $signed(tmp_50_cast_cast1_fu_499_p1));

assign tmp_58_cast_fu_513_p1 = tmp_55_fu_507_p2;

assign tmp_59_cast_fu_524_p1 = tmp_56_fu_518_p2;

assign tmp_59_fu_540_p1 = worda_q0[3:0];

assign tmp_60_cast_fu_535_p1 = tmp_57_fu_529_p2;

assign tmp_60_fu_544_p1 = grp_fu_303_p2[3:0];

assign tmp_61_fu_548_p3 = {{6'd0}, {tmp_60_fu_544_p1}};

assign tmp_62_fu_556_p2 = (10'd0 - tmp_61_fu_548_p3);

assign tmp_63_fu_562_p3 = {{6'd0}, {tmp_59_fu_540_p1}};

assign tmp_64_fu_570_p3 = ((grp_fu_295_p3[0:0] === 1'b1) ? tmp_62_fu_556_p2 : tmp_63_fu_562_p3);

assign tmp_65_fu_578_p4 = {{worda_q0[9:4]}};

assign tmp_66_fu_588_p3 = ((grp_fu_295_p3[0:0] === 1'b1) ? grp_fu_319_p2 : tmp_65_fu_578_p4);

assign tmp_67_cast_fu_596_p3 = {{tmp_66_fu_588_p3}, {4'd0}};

assign tmp_67_fu_604_p2 = (tmp_67_cast_fu_596_p3 + tmp_64_fu_570_p3);

assign tmp_68_cast_fu_610_p1 = tmp_67_fu_604_p2;

assign tmp_69_fu_615_p1 = worda_q1[3:0];

assign tmp_70_fu_619_p1 = grp_fu_333_p2[3:0];

assign tmp_71_fu_623_p3 = {{6'd0}, {tmp_70_fu_619_p1}};

assign tmp_72_fu_631_p2 = (10'd0 - tmp_71_fu_623_p3);

assign tmp_73_fu_637_p3 = {{6'd0}, {tmp_69_fu_615_p1}};

assign tmp_74_fu_645_p3 = ((grp_fu_325_p3[0:0] === 1'b1) ? tmp_72_fu_631_p2 : tmp_73_fu_637_p3);

assign tmp_75_cast_fu_671_p3 = {{tmp_77_fu_663_p3}, {4'd0}};

assign tmp_75_fu_653_p4 = {{worda_q1[9:4]}};

assign tmp_76_cast_fu_685_p1 = tmp_76_fu_679_p2;

assign tmp_76_fu_679_p2 = (tmp_75_cast_fu_671_p3 + tmp_74_fu_645_p3);

assign tmp_77_fu_663_p3 = ((grp_fu_325_p3[0:0] === 1'b1) ? grp_fu_349_p2 : tmp_75_fu_653_p4);

assign tmp_79_fu_711_p1 = worda_q1[3:0];

assign tmp_80_fu_715_p1 = grp_fu_333_p2[3:0];

assign tmp_81_fu_719_p3 = {{6'd0}, {tmp_80_fu_715_p1}};

assign tmp_82_fu_727_p2 = (10'd0 - tmp_81_fu_719_p3);

assign tmp_83_cast_fu_767_p3 = {{tmp_87_fu_759_p3}, {4'd0}};

assign tmp_83_fu_733_p3 = {{6'd0}, {tmp_79_fu_711_p1}};

assign tmp_84_cast_fu_781_p1 = tmp_84_fu_775_p2;

assign tmp_84_fu_775_p2 = (tmp_83_cast_fu_767_p3 + tmp_85_fu_741_p3);

assign tmp_85_fu_741_p3 = ((grp_fu_325_p3[0:0] === 1'b1) ? tmp_82_fu_727_p2 : tmp_83_fu_733_p3);

assign tmp_86_fu_749_p4 = {{worda_q1[9:4]}};

assign tmp_87_fu_759_p3 = ((grp_fu_325_p3[0:0] === 1'b1) ? grp_fu_349_p2 : tmp_86_fu_749_p4);

assign tmp_89_fu_786_p1 = worda_q0[3:0];

assign tmp_90_fu_790_p1 = grp_fu_303_p2[3:0];

assign tmp_91_cast_fu_842_p3 = {{tmp_102_fu_834_p3}, {4'd0}};

assign tmp_91_fu_794_p3 = {{6'd0}, {tmp_90_fu_790_p1}};

assign tmp_92_cast_fu_856_p1 = tmp_92_fu_850_p2;

assign tmp_92_fu_850_p2 = (tmp_91_cast_fu_842_p3 + tmp_100_fu_816_p3);

assign tmp_93_fu_895_p3 = {{i_2_reg_284}, {7'd0}};

assign tmp_94_fu_903_p3 = {{i_2_reg_284}, {3'd0}};

assign tmp_95_fu_915_p2 = (tmp_93_fu_895_p3 - p_shl2_cast_fu_911_p1);

assign tmp_96_cast_fu_926_p1 = $signed(tmp_96_fu_921_p2);

assign tmp_96_fu_921_p2 = (tmp_95_fu_915_p2 + tmp_52_cast_cast_reg_1103);

assign tmp_97_cast_fu_936_p1 = $signed(tmp_97_fu_931_p2);

assign tmp_97_fu_931_p2 = (tmp_95_fu_915_p2 + j_1_cast2_cast_reg_1014);

assign tmp_98_fu_802_p2 = (10'd0 - tmp_91_fu_794_p3);

assign tmp_99_fu_808_p3 = {{6'd0}, {tmp_89_fu_786_p1}};

assign tmp_fu_371_p3 = {{tmp_46_fu_367_p1}, {2'd0}};

assign tmp_s_fu_482_p2 = ((tmp_54_fu_478_p1 == 2'd0) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_reg_991[1:0] <= 2'b00;
    j_1_cast2_cast_reg_1014[9:6] <= 4'b0000;
    worda_addr_7_reg_1043[8:6] <= 3'b000;
    tmp_52_cast_cast_reg_1103[9:6] <= 4'b0000;
end

endmodule //KeySchedule
