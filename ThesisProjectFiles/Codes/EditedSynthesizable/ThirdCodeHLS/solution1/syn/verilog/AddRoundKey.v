// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module AddRoundKey (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        statemt_address0,
        statemt_ce0,
        statemt_we0,
        statemt_d0,
        statemt_q0,
        statemt_address1,
        statemt_ce1,
        statemt_we1,
        statemt_d1,
        statemt_q1,
        n,
        worda_address0,
        worda_ce0,
        worda_q0,
        worda_address1,
        worda_ce1,
        worda_q1
);

parameter    ap_ST_fsm_state1 = 5'd1;
parameter    ap_ST_fsm_state2 = 5'd2;
parameter    ap_ST_fsm_state3 = 5'd4;
parameter    ap_ST_fsm_state4 = 5'd8;
parameter    ap_ST_fsm_state5 = 5'd16;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] statemt_address0;
output   statemt_ce0;
output   statemt_we0;
output  [31:0] statemt_d0;
input  [31:0] statemt_q0;
output  [4:0] statemt_address1;
output   statemt_ce1;
output   statemt_we1;
output  [31:0] statemt_d1;
input  [31:0] statemt_q1;
input  [5:0] n;
output  [8:0] worda_address0;
output   worda_ce0;
input  [31:0] worda_q0;
output  [8:0] worda_address1;
output   worda_ce1;
input  [31:0] worda_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] statemt_address0;
reg statemt_ce0;
reg statemt_we0;
reg[4:0] statemt_address1;
reg statemt_ce1;
reg statemt_we1;
reg[8:0] worda_address0;
reg worda_ce0;
reg[8:0] worda_address1;
reg worda_ce1;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_fu_133_p2;
reg   [31:0] reg_145;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire   [31:0] grp_fu_139_p2;
reg   [31:0] reg_150;
wire   [5:0] tmp_fu_155_p2;
reg   [5:0] tmp_reg_275;
wire   [2:0] j_6_fu_171_p2;
reg   [2:0] j_6_reg_283;
wire    ap_CS_fsm_state2;
wire   [5:0] tmp_s_fu_177_p2;
reg   [5:0] tmp_s_reg_288;
wire   [0:0] exitcond_fu_165_p2;
wire   [3:0] tmp_37_fu_206_p3;
reg   [3:0] tmp_37_reg_303;
reg   [4:0] statemt_addr_reg_309;
reg   [4:0] statemt_addr_23_reg_314;
reg   [4:0] statemt_addr_24_reg_329;
reg   [4:0] statemt_addr_25_reg_334;
reg   [2:0] j_reg_122;
wire    ap_CS_fsm_state5;
wire   [31:0] tmp_cast_fu_182_p1;
wire   [31:0] tmp_99_cast_fu_197_p1;
wire   [31:0] tmp_84_cast_fu_214_p1;
wire   [31:0] tmp_86_cast_fu_225_p1;
wire   [31:0] tmp_100_cast_fu_239_p1;
wire   [31:0] tmp_101_cast_fu_250_p1;
wire   [31:0] tmp_88_cast_fu_260_p1;
wire   [31:0] tmp_90_cast_fu_270_p1;
wire   [5:0] j_cast1_fu_161_p1;
wire   [7:0] tmp_cast_cast_fu_187_p1;
wire   [7:0] tmp_98_fu_191_p2;
wire   [1:0] tmp_104_fu_202_p1;
wire   [3:0] tmp_39_fu_219_p2;
wire   [8:0] tmp_cast_cast1_fu_230_p1;
wire   [8:0] tmp_99_fu_233_p2;
wire   [8:0] tmp_100_fu_244_p2;
wire   [3:0] tmp_41_fu_255_p2;
wire   [3:0] tmp_43_fu_265_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_122 <= j_6_reg_283;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_122 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_6_reg_283 <= j_6_fu_171_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        reg_145 <= grp_fu_133_p2;
        reg_150 <= grp_fu_139_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_165_p2 == 1'd0))) begin
        statemt_addr_23_reg_314[3 : 2] <= tmp_86_cast_fu_225_p1[3 : 2];
        statemt_addr_reg_309[3 : 2] <= tmp_84_cast_fu_214_p1[3 : 2];
        tmp_37_reg_303[3 : 2] <= tmp_37_fu_206_p3[3 : 2];
        tmp_s_reg_288 <= tmp_s_fu_177_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_addr_24_reg_329[3 : 2] <= tmp_88_cast_fu_260_p1[3 : 2];
        statemt_addr_25_reg_334[3 : 2] <= tmp_90_cast_fu_270_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_reg_275[5 : 2] <= tmp_fu_155_p2[5 : 2];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_165_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_165_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_address0 = statemt_addr_24_reg_329;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address0 = statemt_addr_reg_309;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address0 = tmp_88_cast_fu_260_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_address0 = tmp_84_cast_fu_214_p1;
    end else begin
        statemt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        statemt_address1 = statemt_addr_25_reg_334;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        statemt_address1 = statemt_addr_23_reg_314;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address1 = tmp_90_cast_fu_270_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_address1 = tmp_86_cast_fu_225_p1;
    end else begin
        statemt_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_ce0 = 1'b1;
    end else begin
        statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_ce1 = 1'b1;
    end else begin
        statemt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_we0 = 1'b1;
    end else begin
        statemt_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        statemt_we1 = 1'b1;
    end else begin
        statemt_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        worda_address0 = tmp_100_cast_fu_239_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        worda_address0 = tmp_cast_fu_182_p1;
    end else begin
        worda_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        worda_address1 = tmp_101_cast_fu_250_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        worda_address1 = tmp_99_cast_fu_197_p1;
    end else begin
        worda_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        worda_ce0 = 1'b1;
    end else begin
        worda_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        worda_ce1 = 1'b1;
    end else begin
        worda_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_165_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign exitcond_fu_165_p2 = ((j_reg_122 == 3'd4) ? 1'b1 : 1'b0);

assign grp_fu_133_p2 = (statemt_q0 ^ worda_q0);

assign grp_fu_139_p2 = (statemt_q1 ^ worda_q1);

assign j_6_fu_171_p2 = (j_reg_122 + 3'd1);

assign j_cast1_fu_161_p1 = j_reg_122;

assign statemt_d0 = reg_145;

assign statemt_d1 = reg_150;

assign tmp_100_cast_fu_239_p1 = tmp_99_fu_233_p2;

assign tmp_100_fu_244_p2 = ($signed(9'd360) + $signed(tmp_cast_cast1_fu_230_p1));

assign tmp_101_cast_fu_250_p1 = tmp_100_fu_244_p2;

assign tmp_104_fu_202_p1 = j_reg_122[1:0];

assign tmp_37_fu_206_p3 = {{tmp_104_fu_202_p1}, {2'd0}};

assign tmp_39_fu_219_p2 = (tmp_37_fu_206_p3 | 4'd1);

assign tmp_41_fu_255_p2 = (tmp_37_reg_303 | 4'd2);

assign tmp_43_fu_265_p2 = (tmp_37_reg_303 | 4'd3);

assign tmp_84_cast_fu_214_p1 = tmp_37_fu_206_p3;

assign tmp_86_cast_fu_225_p1 = tmp_39_fu_219_p2;

assign tmp_88_cast_fu_260_p1 = tmp_41_fu_255_p2;

assign tmp_90_cast_fu_270_p1 = tmp_43_fu_265_p2;

assign tmp_98_fu_191_p2 = (8'd120 + tmp_cast_cast_fu_187_p1);

assign tmp_99_cast_fu_197_p1 = tmp_98_fu_191_p2;

assign tmp_99_fu_233_p2 = (9'd240 + tmp_cast_cast1_fu_230_p1);

assign tmp_cast_cast1_fu_230_p1 = tmp_s_reg_288;

assign tmp_cast_cast_fu_187_p1 = tmp_s_fu_177_p2;

assign tmp_cast_fu_182_p1 = tmp_s_fu_177_p2;

assign tmp_fu_155_p2 = n << 6'd2;

assign tmp_s_fu_177_p2 = (j_cast1_fu_161_p1 + tmp_reg_275);

always @ (posedge ap_clk) begin
    tmp_reg_275[1:0] <= 2'b00;
    tmp_37_reg_303[1:0] <= 2'b00;
    statemt_addr_reg_309[1:0] <= 2'b00;
    statemt_addr_reg_309[4] <= 1'b0;
    statemt_addr_23_reg_314[1:0] <= 2'b01;
    statemt_addr_23_reg_314[4] <= 1'b0;
    statemt_addr_24_reg_329[1:0] <= 2'b10;
    statemt_addr_24_reg_329[4] <= 1'b0;
    statemt_addr_25_reg_334[1:0] <= 2'b11;
    statemt_addr_25_reg_334[4] <= 1'b0;
end

endmodule //AddRoundKey
