-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AddRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    statemt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    statemt_ce0 : OUT STD_LOGIC;
    statemt_we0 : OUT STD_LOGIC;
    statemt_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    statemt_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    statemt_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    statemt_ce1 : OUT STD_LOGIC;
    statemt_we1 : OUT STD_LOGIC;
    statemt_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    statemt_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    n : IN STD_LOGIC_VECTOR (5 downto 0);
    worda_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    worda_ce0 : OUT STD_LOGIC;
    worda_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    worda_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    worda_ce1 : OUT STD_LOGIC;
    worda_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of AddRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv6_2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv9_F0 : STD_LOGIC_VECTOR (8 downto 0) := "011110000";
    constant ap_const_lv9_168 : STD_LOGIC_VECTOR (8 downto 0) := "101101000";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_133_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_145 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_139_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_150 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_155_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_reg_275 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_6_fu_171_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_6_reg_283 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_s_fu_177_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_reg_288 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond_fu_165_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_37_fu_206_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_37_reg_303 : STD_LOGIC_VECTOR (3 downto 0);
    signal statemt_addr_reg_309 : STD_LOGIC_VECTOR (4 downto 0);
    signal statemt_addr_23_reg_314 : STD_LOGIC_VECTOR (4 downto 0);
    signal statemt_addr_24_reg_329 : STD_LOGIC_VECTOR (4 downto 0);
    signal statemt_addr_25_reg_334 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_122 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_cast_fu_182_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_99_cast_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_cast_fu_214_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_86_cast_fu_225_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_100_cast_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_101_cast_fu_250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_cast_fu_260_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_90_cast_fu_270_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_cast1_fu_161_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_cast_fu_187_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_98_fu_191_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_104_fu_202_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_39_fu_219_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_cast1_fu_230_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_99_fu_233_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_100_fu_244_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_41_fu_255_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_43_fu_265_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    j_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_reg_122 <= j_6_reg_283;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_122 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_6_reg_283 <= j_6_fu_171_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then
                reg_145 <= grp_fu_133_p2;
                reg_150 <= grp_fu_139_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_165_p2 = ap_const_lv1_0))) then
                    statemt_addr_23_reg_314(3 downto 2) <= tmp_86_cast_fu_225_p1(5 - 1 downto 0)(3 downto 2);
                    statemt_addr_reg_309(3 downto 2) <= tmp_84_cast_fu_214_p1(5 - 1 downto 0)(3 downto 2);
                    tmp_37_reg_303(3 downto 2) <= tmp_37_fu_206_p3(3 downto 2);
                tmp_s_reg_288 <= tmp_s_fu_177_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    statemt_addr_24_reg_329(3 downto 2) <= tmp_88_cast_fu_260_p1(5 - 1 downto 0)(3 downto 2);
                    statemt_addr_25_reg_334(3 downto 2) <= tmp_90_cast_fu_270_p1(5 - 1 downto 0)(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    tmp_reg_275(5 downto 2) <= tmp_fu_155_p2(5 downto 2);
            end if;
        end if;
    end process;
    tmp_reg_275(1 downto 0) <= "00";
    tmp_37_reg_303(1 downto 0) <= "00";
    statemt_addr_reg_309(1 downto 0) <= "00";
    statemt_addr_reg_309(4) <= '0';
    statemt_addr_23_reg_314(1 downto 0) <= "01";
    statemt_addr_23_reg_314(4) <= '0';
    statemt_addr_24_reg_329(1 downto 0) <= "10";
    statemt_addr_24_reg_329(4) <= '0';
    statemt_addr_25_reg_334(1 downto 0) <= "11";
    statemt_addr_25_reg_334(4) <= '0';

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_165_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_165_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_165_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_165_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_165_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond_fu_165_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_165_p2 <= "1" when (j_reg_122 = ap_const_lv3_4) else "0";
    grp_fu_133_p2 <= (statemt_q0 xor worda_q0);
    grp_fu_139_p2 <= (statemt_q1 xor worda_q1);
    j_6_fu_171_p2 <= std_logic_vector(unsigned(j_reg_122) + unsigned(ap_const_lv3_1));
    j_cast1_fu_161_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_122),6));

    statemt_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, statemt_addr_reg_309, statemt_addr_24_reg_329, ap_CS_fsm_state5, tmp_84_cast_fu_214_p1, tmp_88_cast_fu_260_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            statemt_address0 <= statemt_addr_24_reg_329;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            statemt_address0 <= statemt_addr_reg_309;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            statemt_address0 <= tmp_88_cast_fu_260_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            statemt_address0 <= tmp_84_cast_fu_214_p1(5 - 1 downto 0);
        else 
            statemt_address0 <= "XXXXX";
        end if; 
    end process;


    statemt_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, statemt_addr_23_reg_314, statemt_addr_25_reg_334, ap_CS_fsm_state5, tmp_86_cast_fu_225_p1, tmp_90_cast_fu_270_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            statemt_address1 <= statemt_addr_25_reg_334;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            statemt_address1 <= statemt_addr_23_reg_314;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            statemt_address1 <= tmp_90_cast_fu_270_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            statemt_address1 <= tmp_86_cast_fu_225_p1(5 - 1 downto 0);
        else 
            statemt_address1 <= "XXXXX";
        end if; 
    end process;


    statemt_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_ce0 <= ap_const_logic_1;
        else 
            statemt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_ce1 <= ap_const_logic_1;
        else 
            statemt_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    statemt_d0 <= reg_145;
    statemt_d1 <= reg_150;

    statemt_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_we0 <= ap_const_logic_1;
        else 
            statemt_we0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_we1_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            statemt_we1 <= ap_const_logic_1;
        else 
            statemt_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_100_cast_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_99_fu_233_p2),32));
    tmp_100_fu_244_p2 <= std_logic_vector(signed(ap_const_lv9_168) + signed(tmp_cast_cast1_fu_230_p1));
    tmp_101_cast_fu_250_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_100_fu_244_p2),32));
    tmp_104_fu_202_p1 <= j_reg_122(2 - 1 downto 0);
    tmp_37_fu_206_p3 <= (tmp_104_fu_202_p1 & ap_const_lv2_0);
    tmp_39_fu_219_p2 <= (tmp_37_fu_206_p3 or ap_const_lv4_1);
    tmp_41_fu_255_p2 <= (tmp_37_reg_303 or ap_const_lv4_2);
    tmp_43_fu_265_p2 <= (tmp_37_reg_303 or ap_const_lv4_3);
    tmp_84_cast_fu_214_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_206_p3),32));
    tmp_86_cast_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_219_p2),32));
    tmp_88_cast_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_255_p2),32));
    tmp_90_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_fu_265_p2),32));
    tmp_98_fu_191_p2 <= std_logic_vector(unsigned(ap_const_lv8_78) + unsigned(tmp_cast_cast_fu_187_p1));
    tmp_99_cast_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_98_fu_191_p2),32));
    tmp_99_fu_233_p2 <= std_logic_vector(unsigned(ap_const_lv9_F0) + unsigned(tmp_cast_cast1_fu_230_p1));
    tmp_cast_cast1_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_288),9));
    tmp_cast_cast_fu_187_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_177_p2),8));
    tmp_cast_fu_182_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_177_p2),32));
    tmp_fu_155_p2 <= std_logic_vector(shift_left(unsigned(n),to_integer(unsigned('0' & ap_const_lv6_2(6-1 downto 0)))));
    tmp_s_fu_177_p2 <= std_logic_vector(unsigned(j_cast1_fu_161_p1) + unsigned(tmp_reg_275));

    worda_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, tmp_cast_fu_182_p1, tmp_100_cast_fu_239_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            worda_address0 <= tmp_100_cast_fu_239_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            worda_address0 <= tmp_cast_fu_182_p1(9 - 1 downto 0);
        else 
            worda_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    worda_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2, tmp_99_cast_fu_197_p1, tmp_101_cast_fu_250_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            worda_address1 <= tmp_101_cast_fu_250_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            worda_address1 <= tmp_99_cast_fu_197_p1(9 - 1 downto 0);
        else 
            worda_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    worda_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            worda_ce0 <= ap_const_logic_1;
        else 
            worda_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    worda_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            worda_ce1 <= ap_const_logic_1;
        else 
            worda_ce1 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
