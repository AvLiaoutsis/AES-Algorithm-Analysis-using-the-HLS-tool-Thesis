// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Cipher,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7eg-ffvf1517-1lv-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.297333,HLS_SYN_LAT=1976,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=1040,HLS_SYN_LUT=1789}" *)

module Cipher (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_state3 = 45'd4;
parameter    ap_ST_fsm_state4 = 45'd8;
parameter    ap_ST_fsm_state5 = 45'd16;
parameter    ap_ST_fsm_state6 = 45'd32;
parameter    ap_ST_fsm_state7 = 45'd64;
parameter    ap_ST_fsm_state8 = 45'd128;
parameter    ap_ST_fsm_state9 = 45'd256;
parameter    ap_ST_fsm_state10 = 45'd512;
parameter    ap_ST_fsm_state11 = 45'd1024;
parameter    ap_ST_fsm_state12 = 45'd2048;
parameter    ap_ST_fsm_state13 = 45'd4096;
parameter    ap_ST_fsm_state14 = 45'd8192;
parameter    ap_ST_fsm_state15 = 45'd16384;
parameter    ap_ST_fsm_state16 = 45'd32768;
parameter    ap_ST_fsm_state17 = 45'd65536;
parameter    ap_ST_fsm_state18 = 45'd131072;
parameter    ap_ST_fsm_state19 = 45'd262144;
parameter    ap_ST_fsm_state20 = 45'd524288;
parameter    ap_ST_fsm_state21 = 45'd1048576;
parameter    ap_ST_fsm_state22 = 45'd2097152;
parameter    ap_ST_fsm_state23 = 45'd4194304;
parameter    ap_ST_fsm_state24 = 45'd8388608;
parameter    ap_ST_fsm_state25 = 45'd16777216;
parameter    ap_ST_fsm_state26 = 45'd33554432;
parameter    ap_ST_fsm_state27 = 45'd67108864;
parameter    ap_ST_fsm_state28 = 45'd134217728;
parameter    ap_ST_fsm_state29 = 45'd268435456;
parameter    ap_ST_fsm_state30 = 45'd536870912;
parameter    ap_ST_fsm_state31 = 45'd1073741824;
parameter    ap_ST_fsm_state32 = 45'd2147483648;
parameter    ap_ST_fsm_state33 = 45'd4294967296;
parameter    ap_ST_fsm_state34 = 45'd8589934592;
parameter    ap_ST_fsm_state35 = 45'd17179869184;
parameter    ap_ST_fsm_state36 = 45'd34359738368;
parameter    ap_ST_fsm_state37 = 45'd68719476736;
parameter    ap_ST_fsm_state38 = 45'd137438953472;
parameter    ap_ST_fsm_state39 = 45'd274877906944;
parameter    ap_ST_fsm_state40 = 45'd549755813888;
parameter    ap_ST_fsm_state41 = 45'd1099511627776;
parameter    ap_ST_fsm_state42 = 45'd2199023255552;
parameter    ap_ST_fsm_state43 = 45'd4398046511104;
parameter    ap_ST_fsm_state44 = 45'd8796093022208;
parameter    ap_ST_fsm_state45 = 45'd17592186044416;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [7:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] temp1_address0;
reg    temp1_ce0;
wire   [3:0] temp1_q0;
wire   [3:0] in_r_address0;
reg    in_r_ce0;
wire   [7:0] in_r_q0;
wire   [7:0] state_q0;
reg   [7:0] reg_408;
wire    ap_CS_fsm_state12;
wire   [7:0] state_q1;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state30;
reg   [7:0] reg_414;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state35;
reg   [7:0] reg_421;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state31;
reg   [7:0] reg_428;
reg   [7:0] reg_433;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state32;
reg   [7:0] reg_438;
reg   [7:0] reg_443;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state33;
reg   [7:0] reg_448;
reg   [7:0] reg_453;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state34;
reg   [7:0] reg_458;
wire   [31:0] i_cast_fu_463_p1;
reg   [31:0] i_cast_reg_958;
wire    ap_CS_fsm_state2;
wire   [4:0] i_3_fu_474_p2;
reg   [4:0] i_3_reg_966;
wire   [0:0] exitcond5_fu_468_p2;
wire   [5:0] i_1_cast2_cast_fu_480_p1;
reg   [5:0] i_1_cast2_cast_reg_976;
wire    ap_CS_fsm_state5;
wire   [2:0] i_4_fu_490_p2;
reg   [2:0] i_4_reg_984;
wire   [3:0] tmp_fu_500_p3;
reg   [3:0] tmp_reg_989;
wire   [0:0] exitcond4_fu_484_p2;
reg   [3:0] state_addr_12_reg_994;
wire    ap_CS_fsm_state6;
wire   [2:0] j_3_fu_540_p2;
reg   [2:0] j_3_reg_1002;
wire   [0:0] exitcond3_fu_534_p2;
reg   [3:0] state_addr_13_reg_1015;
wire    ap_CS_fsm_state23;
reg   [3:0] state_addr_14_reg_1020;
reg   [3:0] state_addr_15_reg_1025;
reg   [3:0] state_addr_16_reg_1030;
wire   [2:0] i_5_fu_612_p2;
reg   [2:0] i_5_reg_1038;
wire   [5:0] round_cast11_cast_fu_618_p1;
reg   [5:0] round_cast11_cast_reg_1043;
wire   [0:0] exitcond_i_fu_606_p2;
wire   [3:0] round_1_fu_623_p2;
reg   [3:0] round_1_reg_1048;
wire   [7:0] tmp_13_i_fu_775_p2;
reg   [7:0] tmp_13_i_reg_1053;
wire    ap_CS_fsm_state25;
wire   [7:0] tmp_18_i_fu_815_p2;
reg   [7:0] tmp_18_i_reg_1058;
wire   [5:0] i_2_cast9_cast_fu_821_p1;
reg   [5:0] i_2_cast9_cast_reg_1063;
wire    ap_CS_fsm_state43;
wire   [2:0] i_6_fu_831_p2;
reg   [2:0] i_6_reg_1071;
wire   [3:0] tmp_14_fu_841_p3;
reg   [3:0] tmp_14_reg_1076;
wire   [0:0] exitcond1_fu_825_p2;
wire    ap_CS_fsm_state44;
wire   [2:0] j_4_fu_881_p2;
reg   [2:0] j_4_reg_1089;
wire   [3:0] sum_fu_887_p2;
reg   [3:0] sum_reg_1094;
wire   [0:0] exitcond_fu_875_p2;
reg   [7:0] RoundKey_address0;
reg    RoundKey_ce0;
reg    RoundKey_we0;
wire   [7:0] RoundKey_q0;
reg    RoundKey_ce1;
reg    RoundKey_we1;
wire   [7:0] RoundKey_q1;
reg   [4:0] Key_address0;
reg    Key_ce0;
reg    Key_we0;
wire   [3:0] Key_q0;
reg    Key_ce1;
wire   [3:0] Key_q1;
reg   [3:0] state_address0;
reg    state_ce0;
reg    state_we0;
reg   [7:0] state_d0;
reg   [3:0] state_address1;
reg    state_ce1;
reg    state_we1;
reg   [7:0] state_d1;
wire    grp_KeyExpansion_fu_382_ap_start;
wire    grp_KeyExpansion_fu_382_ap_done;
wire    grp_KeyExpansion_fu_382_ap_idle;
wire    grp_KeyExpansion_fu_382_ap_ready;
wire   [7:0] grp_KeyExpansion_fu_382_RoundKey_address0;
wire    grp_KeyExpansion_fu_382_RoundKey_ce0;
wire    grp_KeyExpansion_fu_382_RoundKey_we0;
wire   [7:0] grp_KeyExpansion_fu_382_RoundKey_d0;
wire   [7:0] grp_KeyExpansion_fu_382_RoundKey_address1;
wire    grp_KeyExpansion_fu_382_RoundKey_ce1;
wire    grp_KeyExpansion_fu_382_RoundKey_we1;
wire   [7:0] grp_KeyExpansion_fu_382_RoundKey_d1;
wire   [4:0] grp_KeyExpansion_fu_382_Key_address0;
wire    grp_KeyExpansion_fu_382_Key_ce0;
wire   [4:0] grp_KeyExpansion_fu_382_Key_address1;
wire    grp_KeyExpansion_fu_382_Key_ce1;
wire    grp_AddRoundKey_fu_392_ap_start;
wire    grp_AddRoundKey_fu_392_ap_done;
wire    grp_AddRoundKey_fu_392_ap_idle;
wire    grp_AddRoundKey_fu_392_ap_ready;
reg   [5:0] grp_AddRoundKey_fu_392_round;
wire   [3:0] grp_AddRoundKey_fu_392_state_address0;
wire    grp_AddRoundKey_fu_392_state_ce0;
wire    grp_AddRoundKey_fu_392_state_we0;
wire   [7:0] grp_AddRoundKey_fu_392_state_d0;
wire   [7:0] grp_AddRoundKey_fu_392_RoundKey_address0;
wire    grp_AddRoundKey_fu_392_RoundKey_ce0;
wire    grp_SubBytes_fu_401_ap_start;
wire    grp_SubBytes_fu_401_ap_done;
wire    grp_SubBytes_fu_401_ap_idle;
wire    grp_SubBytes_fu_401_ap_ready;
wire   [3:0] grp_SubBytes_fu_401_state_address0;
wire    grp_SubBytes_fu_401_state_ce0;
wire    grp_SubBytes_fu_401_state_we0;
wire   [7:0] grp_SubBytes_fu_401_state_d0;
reg   [4:0] i_reg_304;
wire    ap_CS_fsm_state3;
reg   [2:0] i_1_reg_315;
wire    ap_CS_fsm_state4;
reg   [2:0] j_reg_326;
wire    ap_CS_fsm_state7;
reg   [3:0] round_reg_337;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state27;
reg   [2:0] i_i_reg_349;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state26;
reg   [2:0] i_2_reg_360;
wire    ap_CS_fsm_state42;
reg   [2:0] j_1_reg_371;
wire    ap_CS_fsm_state45;
reg    ap_reg_grp_KeyExpansion_fu_382_ap_start;
reg    ap_reg_grp_AddRoundKey_fu_392_ap_start;
wire    ap_CS_fsm_state41;
reg    ap_reg_grp_SubBytes_fu_401_ap_start;
wire    ap_CS_fsm_state9;
wire   [0:0] exitcond2_fu_556_p2;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state28;
wire   [31:0] tmp_18_cast_fu_525_p1;
wire   [31:0] tmp_cast_fu_551_p1;
wire   [31:0] i_i_cast_fu_562_p1;
wire   [31:0] tmp_19_cast_fu_581_p1;
wire   [31:0] tmp_19_fu_586_p3;
wire   [31:0] tmp_21_cast_fu_601_p1;
wire   [31:0] tmp_29_cast_fu_866_p1;
wire   [31:0] sum_cast_fu_892_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire   [7:0] tmp_9_i_fu_681_p2;
wire   [7:0] tmp_4_i_fu_728_p2;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire   [1:0] tmp_17_fu_496_p1;
wire   [4:0] tmp_15_fu_508_p3;
wire   [5:0] tmp_17_cast_fu_516_p1;
wire   [5:0] tmp_16_fu_520_p2;
wire   [3:0] j_cast_fu_530_p1;
wire   [3:0] tmp_s_fu_546_p2;
wire   [3:0] i_i_cast_cast_fu_571_p1;
wire   [3:0] tmp_18_fu_575_p2;
wire   [4:0] i_i_cast_cast1_fu_567_p1;
wire   [4:0] tmp_20_fu_595_p2;
wire   [7:0] Tm_fu_629_p2;
wire   [7:0] Tm_4_fu_635_p2;
wire   [0:0] tmp_23_fu_653_p3;
wire   [7:0] tmp_22_fu_647_p2;
wire   [7:0] tmp_7_i_cast_cast_fu_661_p3;
wire   [7:0] Tmp_fu_641_p2;
wire   [7:0] tmp2_fu_675_p2;
wire   [7:0] tmp1_fu_669_p2;
wire   [7:0] Tm_1_fu_688_p2;
wire   [0:0] tmp_25_fu_700_p3;
wire   [7:0] tmp_24_fu_694_p2;
wire   [7:0] tmp_2_i_cast_cast_fu_708_p3;
wire   [7:0] tmp4_fu_722_p2;
wire   [7:0] tmp3_fu_716_p2;
wire   [7:0] Tm_2_fu_735_p2;
wire   [0:0] tmp_28_fu_747_p3;
wire   [7:0] tmp_26_fu_741_p2;
wire   [7:0] tmp_11_i_cast_cast_fu_755_p3;
wire   [7:0] tmp6_fu_769_p2;
wire   [7:0] tmp5_fu_763_p2;
wire   [7:0] Tm_3_fu_781_p2;
wire   [0:0] tmp_31_fu_793_p3;
wire   [7:0] tmp_16_i_cast_cast_fu_801_p3;
wire   [7:0] tmp7_fu_809_p2;
wire   [7:0] tmp_30_fu_787_p2;
wire   [1:0] tmp_21_fu_837_p1;
wire   [4:0] tmp_27_fu_849_p3;
wire   [5:0] tmp_28_cast_fu_857_p1;
wire   [5:0] tmp_29_fu_861_p2;
wire   [3:0] j_1_cast_fu_871_p1;
reg   [44:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 45'd1;
#0 ap_reg_grp_KeyExpansion_fu_382_ap_start = 1'b0;
#0 ap_reg_grp_AddRoundKey_fu_392_ap_start = 1'b0;
#0 ap_reg_grp_SubBytes_fu_401_ap_start = 1'b0;
end

Cipher_temp1 #(
    .DataWidth( 4 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
temp1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp1_address0),
    .ce0(temp1_ce0),
    .q0(temp1_q0)
);

Cipher_in_r #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
in_r_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(in_r_address0),
    .ce0(in_r_ce0),
    .q0(in_r_q0)
);

Cipher_RoundKey #(
    .DataWidth( 8 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
RoundKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RoundKey_address0),
    .ce0(RoundKey_ce0),
    .we0(RoundKey_we0),
    .d0(grp_KeyExpansion_fu_382_RoundKey_d0),
    .q0(RoundKey_q0),
    .address1(grp_KeyExpansion_fu_382_RoundKey_address1),
    .ce1(RoundKey_ce1),
    .we1(RoundKey_we1),
    .d1(grp_KeyExpansion_fu_382_RoundKey_d1),
    .q1(RoundKey_q1)
);

Cipher_Key #(
    .DataWidth( 4 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
Key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Key_address0),
    .ce0(Key_ce0),
    .we0(Key_we0),
    .d0(temp1_q0),
    .q0(Key_q0),
    .address1(grp_KeyExpansion_fu_382_Key_address1),
    .ce1(Key_ce1),
    .q1(Key_q1)
);

Cipher_state #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
state_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(state_address0),
    .ce0(state_ce0),
    .we0(state_we0),
    .d0(state_d0),
    .q0(state_q0),
    .address1(state_address1),
    .ce1(state_ce1),
    .we1(state_we1),
    .d1(state_d1),
    .q1(state_q1)
);

KeyExpansion grp_KeyExpansion_fu_382(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeyExpansion_fu_382_ap_start),
    .ap_done(grp_KeyExpansion_fu_382_ap_done),
    .ap_idle(grp_KeyExpansion_fu_382_ap_idle),
    .ap_ready(grp_KeyExpansion_fu_382_ap_ready),
    .RoundKey_address0(grp_KeyExpansion_fu_382_RoundKey_address0),
    .RoundKey_ce0(grp_KeyExpansion_fu_382_RoundKey_ce0),
    .RoundKey_we0(grp_KeyExpansion_fu_382_RoundKey_we0),
    .RoundKey_d0(grp_KeyExpansion_fu_382_RoundKey_d0),
    .RoundKey_q0(RoundKey_q0),
    .RoundKey_address1(grp_KeyExpansion_fu_382_RoundKey_address1),
    .RoundKey_ce1(grp_KeyExpansion_fu_382_RoundKey_ce1),
    .RoundKey_we1(grp_KeyExpansion_fu_382_RoundKey_we1),
    .RoundKey_d1(grp_KeyExpansion_fu_382_RoundKey_d1),
    .RoundKey_q1(RoundKey_q1),
    .Key_address0(grp_KeyExpansion_fu_382_Key_address0),
    .Key_ce0(grp_KeyExpansion_fu_382_Key_ce0),
    .Key_q0(Key_q0),
    .Key_address1(grp_KeyExpansion_fu_382_Key_address1),
    .Key_ce1(grp_KeyExpansion_fu_382_Key_ce1),
    .Key_q1(Key_q1)
);

AddRoundKey grp_AddRoundKey_fu_392(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AddRoundKey_fu_392_ap_start),
    .ap_done(grp_AddRoundKey_fu_392_ap_done),
    .ap_idle(grp_AddRoundKey_fu_392_ap_idle),
    .ap_ready(grp_AddRoundKey_fu_392_ap_ready),
    .round(grp_AddRoundKey_fu_392_round),
    .state_address0(grp_AddRoundKey_fu_392_state_address0),
    .state_ce0(grp_AddRoundKey_fu_392_state_ce0),
    .state_we0(grp_AddRoundKey_fu_392_state_we0),
    .state_d0(grp_AddRoundKey_fu_392_state_d0),
    .state_q0(state_q0),
    .RoundKey_address0(grp_AddRoundKey_fu_392_RoundKey_address0),
    .RoundKey_ce0(grp_AddRoundKey_fu_392_RoundKey_ce0),
    .RoundKey_q0(RoundKey_q0)
);

SubBytes grp_SubBytes_fu_401(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_SubBytes_fu_401_ap_start),
    .ap_done(grp_SubBytes_fu_401_ap_done),
    .ap_idle(grp_SubBytes_fu_401_ap_idle),
    .ap_ready(grp_SubBytes_fu_401_ap_ready),
    .state_address0(grp_SubBytes_fu_401_state_address0),
    .state_ce0(grp_SubBytes_fu_401_state_ce0),
    .state_we0(grp_SubBytes_fu_401_state_we0),
    .state_d0(grp_SubBytes_fu_401_state_d0),
    .state_q0(state_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_AddRoundKey_fu_392_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state23) & (exitcond_i_fu_606_p2 == 1'd1)) | ((1'b1 == ap_CS_fsm_state5) & (exitcond4_fu_484_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state41))) begin
            ap_reg_grp_AddRoundKey_fu_392_ap_start <= 1'b1;
        end else if ((1'b1 == grp_AddRoundKey_fu_392_ap_ready)) begin
            ap_reg_grp_AddRoundKey_fu_392_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_KeyExpansion_fu_382_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_468_p2 == 1'd1))) begin
            ap_reg_grp_KeyExpansion_fu_382_ap_start <= 1'b1;
        end else if ((1'b1 == grp_KeyExpansion_fu_382_ap_ready)) begin
            ap_reg_grp_KeyExpansion_fu_382_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_SubBytes_fu_401_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond2_fu_556_p2)) | ((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond2_fu_556_p2)))) begin
            ap_reg_grp_SubBytes_fu_401_ap_start <= 1'b1;
        end else if ((1'b1 == grp_SubBytes_fu_401_ap_ready)) begin
            ap_reg_grp_SubBytes_fu_401_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_534_p2 == 1'd1))) begin
        i_1_reg_315 <= i_4_reg_984;
    end else if (((1'b1 == ap_CS_fsm_state4) & (grp_KeyExpansion_fu_382_ap_done == 1'b1))) begin
        i_1_reg_315 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (1'd1 == exitcond_fu_875_p2))) begin
        i_2_reg_360 <= i_6_reg_1071;
    end else if (((grp_AddRoundKey_fu_392_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        i_2_reg_360 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i_i_reg_349 <= i_5_reg_1038;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        i_i_reg_349 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_304 <= 5'd0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_304 <= i_3_reg_966;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (1'd0 == exitcond1_fu_825_p2))) begin
        j_1_reg_371 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        j_1_reg_371 <= j_4_reg_1089;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_484_p2))) begin
        j_reg_326 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_326 <= j_3_reg_1002;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_408 <= state_q1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        reg_408 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_414 <= state_q0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35))) begin
        reg_414 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35))) begin
        reg_421 <= state_q0;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_421 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_AddRoundKey_fu_392_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state27)) begin
            round_reg_337 <= round_1_reg_1048;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            round_reg_337 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_cast2_cast_reg_976[2 : 0] <= i_1_cast2_cast_fu_480_p1[2 : 0];
        i_4_reg_984 <= i_4_fu_490_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        i_2_cast9_cast_reg_1063[2 : 0] <= i_2_cast9_cast_fu_821_p1[2 : 0];
        i_6_reg_1071 <= i_6_fu_831_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_966 <= i_3_fu_474_p2;
        i_cast_reg_958[4 : 0] <= i_cast_fu_463_p1[4 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_5_reg_1038 <= i_5_fu_612_p2;
        state_addr_13_reg_1015[2 : 0] <= i_i_cast_fu_562_p1[2 : 0];
        state_addr_14_reg_1020 <= tmp_19_cast_fu_581_p1;
        state_addr_15_reg_1025[2 : 0] <= tmp_19_fu_586_p3[2 : 0];
        state_addr_16_reg_1030 <= tmp_21_cast_fu_601_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_3_reg_1002 <= j_3_fu_540_p2;
        state_addr_12_reg_994 <= tmp_18_cast_fu_525_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        j_4_reg_1089 <= j_4_fu_881_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_428 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state32))) begin
        reg_433 <= state_q1;
        reg_438 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state33))) begin
        reg_443 <= state_q1;
        reg_448 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34))) begin
        reg_453 <= state_q1;
        reg_458 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (exitcond_i_fu_606_p2 == 1'd1))) begin
        round_1_reg_1048 <= round_1_fu_623_p2;
        round_cast11_cast_reg_1043[3 : 0] <= round_cast11_cast_fu_618_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (1'd0 == exitcond_fu_875_p2))) begin
        sum_reg_1094 <= sum_fu_887_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_13_i_reg_1053 <= tmp_13_i_fu_775_p2;
        tmp_18_i_reg_1058 <= tmp_18_i_fu_815_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (1'd0 == exitcond1_fu_825_p2))) begin
        tmp_14_reg_1076[3 : 2] <= tmp_14_fu_841_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_484_p2))) begin
        tmp_reg_989[3 : 2] <= tmp_fu_500_p3[3 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Key_address0 = i_cast_reg_958;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Key_address0 = grp_KeyExpansion_fu_382_Key_address0;
    end else begin
        Key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Key_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Key_ce0 = grp_KeyExpansion_fu_382_Key_ce0;
    end else begin
        Key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Key_ce1 = grp_KeyExpansion_fu_382_Key_ce1;
    end else begin
        Key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Key_we0 = 1'b1;
    end else begin
        Key_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state42))) begin
        RoundKey_address0 = grp_AddRoundKey_fu_392_RoundKey_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address0 = grp_KeyExpansion_fu_382_RoundKey_address0;
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state42))) begin
        RoundKey_ce0 = grp_AddRoundKey_fu_392_RoundKey_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_ce0 = grp_KeyExpansion_fu_382_RoundKey_ce0;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_ce1 = grp_KeyExpansion_fu_382_RoundKey_ce1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_we0 = grp_KeyExpansion_fu_382_RoundKey_we0;
    end else begin
        RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_we1 = grp_KeyExpansion_fu_382_RoundKey_we1;
    end else begin
        RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) & (1'd1 == exitcond1_fu_825_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) & (1'd1 == exitcond1_fu_825_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_AddRoundKey_fu_392_round = 6'd10;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_392_round = round_cast11_cast_reg_1043;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_AddRoundKey_fu_392_round = 6'd0;
    end else begin
        grp_AddRoundKey_fu_392_round = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_r_ce0 = 1'b1;
    end else begin
        in_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        state_address0 = state_addr_14_reg_1020;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state26))) begin
        state_address0 = state_addr_16_reg_1030;
    end else if (((1'b1 == ap_CS_fsm_state23) & (1'd0 == exitcond_i_fu_606_p2))) begin
        state_address0 = tmp_19_cast_fu_581_p1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state29))) begin
        state_address0 = 32'd5;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state40))) begin
        state_address0 = 32'd13;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state39))) begin
        state_address0 = 32'd15;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state38))) begin
        state_address0 = 32'd11;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state37))) begin
        state_address0 = 32'd10;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state36))) begin
        state_address0 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address0 = 32'd4;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = state_addr_12_reg_994;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state28))) begin
        state_address0 = grp_SubBytes_fu_401_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state42))) begin
        state_address0 = grp_AddRoundKey_fu_392_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        state_address1 = tmp_29_cast_fu_866_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        state_address1 = state_addr_13_reg_1015;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state26))) begin
        state_address1 = state_addr_15_reg_1025;
    end else if (((1'b1 == ap_CS_fsm_state23) & (1'd0 == exitcond_i_fu_606_p2))) begin
        state_address1 = i_i_cast_fu_562_p1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state29))) begin
        state_address1 = 32'd4;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state40))) begin
        state_address1 = 32'd14;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state39))) begin
        state_address1 = 32'd12;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state38))) begin
        state_address1 = 32'd9;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state37))) begin
        state_address1 = 32'd8;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state36))) begin
        state_address1 = 32'd6;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address1 = 32'd5;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | ((1'b1 == ap_CS_fsm_state23) & (1'd0 == exitcond_i_fu_606_p2)) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40))) begin
        state_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state28))) begin
        state_ce0 = grp_SubBytes_fu_401_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state42))) begin
        state_ce0 = grp_AddRoundKey_fu_392_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | ((1'b1 == ap_CS_fsm_state23) & (1'd0 == exitcond_i_fu_606_p2)) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        state_d0 = tmp_18_i_reg_1058;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        state_d0 = tmp_4_i_fu_728_p2;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state40))) begin
        state_d0 = reg_453;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state39))) begin
        state_d0 = reg_414;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state38))) begin
        state_d0 = reg_443;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state37))) begin
        state_d0 = reg_433;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state36))) begin
        state_d0 = reg_408;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35))) begin
        state_d0 = reg_421;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_d0 = in_r_q0;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state28))) begin
        state_d0 = grp_SubBytes_fu_401_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state42))) begin
        state_d0 = grp_AddRoundKey_fu_392_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        state_d1 = tmp_13_i_reg_1053;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        state_d1 = tmp_9_i_fu_681_p2;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state40))) begin
        state_d1 = reg_421;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state39))) begin
        state_d1 = reg_458;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state38))) begin
        state_d1 = reg_448;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state37))) begin
        state_d1 = reg_438;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state36))) begin
        state_d1 = reg_428;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35))) begin
        state_d1 = reg_414;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40))) begin
        state_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state28))) begin
        state_we0 = grp_SubBytes_fu_401_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state42))) begin
        state_we0 = grp_AddRoundKey_fu_392_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        temp1_ce0 = 1'b1;
    end else begin
        temp1_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond5_fu_468_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_KeyExpansion_fu_382_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond4_fu_484_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond3_fu_534_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_AddRoundKey_fu_392_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond2_fu_556_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_SubBytes_fu_401_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (exitcond_i_fu_606_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state27 : begin
            if (((grp_AddRoundKey_fu_392_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (grp_SubBytes_fu_401_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((grp_AddRoundKey_fu_392_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (1'd1 == exitcond1_fu_825_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (1'd1 == exitcond_fu_875_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Tm_1_fu_688_p2 = (state_q1 ^ reg_414);

assign Tm_2_fu_735_p2 = (state_q0 ^ state_q1);

assign Tm_3_fu_781_p2 = (state_q0 ^ reg_408);

assign Tm_4_fu_635_p2 = (state_q1 ^ Tm_fu_629_p2);

assign Tm_fu_629_p2 = (reg_414 ^ reg_408);

assign Tmp_fu_641_p2 = (state_q0 ^ Tm_4_fu_635_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_825_p2 = ((i_2_reg_360 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_fu_556_p2 = ((round_reg_337 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond3_fu_534_p2 = ((j_reg_326 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond4_fu_484_p2 = ((i_1_reg_315 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond5_fu_468_p2 = ((i_reg_304 == 5'd16) ? 1'b1 : 1'b0);

assign exitcond_fu_875_p2 = ((j_1_reg_371 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_i_fu_606_p2 = ((i_i_reg_349 == 3'd4) ? 1'b1 : 1'b0);

assign grp_AddRoundKey_fu_392_ap_start = ap_reg_grp_AddRoundKey_fu_392_ap_start;

assign grp_KeyExpansion_fu_382_ap_start = ap_reg_grp_KeyExpansion_fu_382_ap_start;

assign grp_SubBytes_fu_401_ap_start = ap_reg_grp_SubBytes_fu_401_ap_start;

assign i_1_cast2_cast_fu_480_p1 = i_1_reg_315;

assign i_2_cast9_cast_fu_821_p1 = i_2_reg_360;

assign i_3_fu_474_p2 = (i_reg_304 + 5'd1);

assign i_4_fu_490_p2 = (i_1_reg_315 + 3'd1);

assign i_5_fu_612_p2 = (i_i_reg_349 + 3'd1);

assign i_6_fu_831_p2 = (i_2_reg_360 + 3'd1);

assign i_cast_fu_463_p1 = i_reg_304;

assign i_i_cast_cast1_fu_567_p1 = i_i_reg_349;

assign i_i_cast_cast_fu_571_p1 = i_i_reg_349;

assign i_i_cast_fu_562_p1 = i_i_reg_349;

assign in_r_address0 = tmp_cast_fu_551_p1;

assign j_1_cast_fu_871_p1 = j_1_reg_371;

assign j_3_fu_540_p2 = (j_reg_326 + 3'd1);

assign j_4_fu_881_p2 = (j_1_reg_371 + 3'd1);

assign j_cast_fu_530_p1 = j_reg_326;

assign out_r_address0 = sum_cast_fu_892_p1;

assign out_r_d0 = state_q1;

assign round_1_fu_623_p2 = (round_reg_337 + 4'd1);

assign round_cast11_cast_fu_618_p1 = round_reg_337;

assign sum_cast_fu_892_p1 = sum_reg_1094;

assign sum_fu_887_p2 = (j_1_cast_fu_871_p1 + tmp_14_reg_1076);

assign temp1_address0 = i_cast_fu_463_p1;

assign tmp1_fu_669_p2 = (reg_408 ^ tmp_22_fu_647_p2);

assign tmp2_fu_675_p2 = (tmp_7_i_cast_cast_fu_661_p3 ^ Tmp_fu_641_p2);

assign tmp3_fu_716_p2 = (reg_414 ^ tmp_24_fu_694_p2);

assign tmp4_fu_722_p2 = (tmp_2_i_cast_cast_fu_708_p3 ^ Tmp_fu_641_p2);

assign tmp5_fu_763_p2 = (state_q0 ^ Tm_fu_629_p2);

assign tmp6_fu_769_p2 = (tmp_26_fu_741_p2 ^ tmp_11_i_cast_cast_fu_755_p3);

assign tmp7_fu_809_p2 = (Tm_4_fu_635_p2 ^ tmp_16_i_cast_cast_fu_801_p3);

assign tmp_11_i_cast_cast_fu_755_p3 = ((tmp_28_fu_747_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_13_i_fu_775_p2 = (tmp6_fu_769_p2 ^ tmp5_fu_763_p2);

assign tmp_14_fu_841_p3 = {{tmp_21_fu_837_p1}, {2'd0}};

assign tmp_15_fu_508_p3 = {{j_reg_326}, {2'd0}};

assign tmp_16_fu_520_p2 = (i_1_cast2_cast_reg_976 + tmp_17_cast_fu_516_p1);

assign tmp_16_i_cast_cast_fu_801_p3 = ((tmp_31_fu_793_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_17_cast_fu_516_p1 = tmp_15_fu_508_p3;

assign tmp_17_fu_496_p1 = i_1_reg_315[1:0];

assign tmp_18_cast_fu_525_p1 = tmp_16_fu_520_p2;

assign tmp_18_fu_575_p2 = (i_i_cast_cast_fu_571_p1 + 4'd4);

assign tmp_18_i_fu_815_p2 = (tmp7_fu_809_p2 ^ tmp_30_fu_787_p2);

assign tmp_19_cast_fu_581_p1 = tmp_18_fu_575_p2;

assign tmp_19_fu_586_p3 = {{29'd1}, {i_i_reg_349}};

assign tmp_20_fu_595_p2 = (i_i_cast_cast1_fu_567_p1 + 5'd12);

assign tmp_21_cast_fu_601_p1 = tmp_20_fu_595_p2;

assign tmp_21_fu_837_p1 = i_2_reg_360[1:0];

assign tmp_22_fu_647_p2 = Tm_fu_629_p2 << 8'd1;

assign tmp_23_fu_653_p3 = Tm_fu_629_p2[32'd7];

assign tmp_24_fu_694_p2 = Tm_1_fu_688_p2 << 8'd1;

assign tmp_25_fu_700_p3 = Tm_1_fu_688_p2[32'd7];

assign tmp_26_fu_741_p2 = Tm_2_fu_735_p2 << 8'd1;

assign tmp_27_fu_849_p3 = {{j_1_reg_371}, {2'd0}};

assign tmp_28_cast_fu_857_p1 = tmp_27_fu_849_p3;

assign tmp_28_fu_747_p3 = Tm_2_fu_735_p2[32'd7];

assign tmp_29_cast_fu_866_p1 = tmp_29_fu_861_p2;

assign tmp_29_fu_861_p2 = (i_2_cast9_cast_reg_1063 + tmp_28_cast_fu_857_p1);

assign tmp_2_i_cast_cast_fu_708_p3 = ((tmp_25_fu_700_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_30_fu_787_p2 = Tm_3_fu_781_p2 << 8'd1;

assign tmp_31_fu_793_p3 = Tm_3_fu_781_p2[32'd7];

assign tmp_4_i_fu_728_p2 = (tmp4_fu_722_p2 ^ tmp3_fu_716_p2);

assign tmp_7_i_cast_cast_fu_661_p3 = ((tmp_23_fu_653_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_9_i_fu_681_p2 = (tmp2_fu_675_p2 ^ tmp1_fu_669_p2);

assign tmp_cast_fu_551_p1 = tmp_s_fu_546_p2;

assign tmp_fu_500_p3 = {{tmp_17_fu_496_p1}, {2'd0}};

assign tmp_s_fu_546_p2 = (j_cast_fu_530_p1 + tmp_reg_989);

always @ (posedge ap_clk) begin
    i_cast_reg_958[31:5] <= 27'b000000000000000000000000000;
    i_1_cast2_cast_reg_976[5:3] <= 3'b000;
    tmp_reg_989[1:0] <= 2'b00;
    state_addr_13_reg_1015[3] <= 1'b0;
    state_addr_15_reg_1025[3] <= 1'b1;
    round_cast11_cast_reg_1043[5:4] <= 2'b00;
    i_2_cast9_cast_reg_1063[5:3] <= 3'b000;
    tmp_14_reg_1076[1:0] <= 2'b00;
end

endmodule //Cipher
