// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module KeyExpansion (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        RoundKey_address0,
        RoundKey_ce0,
        RoundKey_we0,
        RoundKey_d0,
        RoundKey_q0,
        RoundKey_address1,
        RoundKey_ce1,
        RoundKey_we1,
        RoundKey_d1,
        RoundKey_q1,
        Key_address0,
        Key_ce0,
        Key_q0,
        Key_address1,
        Key_ce1,
        Key_q1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] RoundKey_address0;
output   RoundKey_ce0;
output   RoundKey_we0;
output  [7:0] RoundKey_d0;
input  [7:0] RoundKey_q0;
output  [7:0] RoundKey_address1;
output   RoundKey_ce1;
output   RoundKey_we1;
output  [7:0] RoundKey_d1;
input  [7:0] RoundKey_q1;
output  [4:0] Key_address0;
output   Key_ce0;
input  [3:0] Key_q0;
output  [4:0] Key_address1;
output   Key_ce1;
input  [3:0] Key_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] RoundKey_address0;
reg RoundKey_ce0;
reg RoundKey_we0;
reg[7:0] RoundKey_d0;
reg[7:0] RoundKey_address1;
reg RoundKey_ce1;
reg RoundKey_we1;
reg[7:0] RoundKey_d1;
reg[4:0] Key_address0;
reg Key_ce0;
reg[4:0] Key_address1;
reg Key_ce1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
wire   [7:0] sbox_address1;
reg    sbox_ce1;
wire   [7:0] sbox_q1;
wire   [7:0] sbox_address2;
reg    sbox_ce2;
wire   [7:0] sbox_q2;
wire   [7:0] sbox_address3;
reg    sbox_ce3;
wire   [7:0] sbox_q3;
wire   [7:0] Rcon_address0;
reg    Rcon_ce0;
wire   [7:0] Rcon_q0;
wire   [2:0] tmp_3_fu_405_p2;
reg   [2:0] tmp_3_reg_790;
wire    ap_CS_fsm_state2;
wire   [3:0] tmp_fu_415_p3;
reg   [3:0] tmp_reg_795;
wire   [0:0] exitcond2_fu_399_p2;
wire   [31:0] tmp_cast_fu_423_p1;
reg   [31:0] tmp_cast_reg_801;
wire   [31:0] tmp_cast_29_fu_434_p1;
reg   [31:0] tmp_cast_29_reg_811;
wire   [31:0] tmp_1_cast_fu_454_p1;
reg   [31:0] tmp_1_cast_reg_821;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_2_cast_fu_464_p1;
reg   [31:0] tmp_2_cast_reg_831;
wire   [7:0] tmp_4_fu_485_p3;
reg   [7:0] tmp_4_reg_844;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond1_fu_479_p2;
wire   [31:0] tmp_4_cast_fu_493_p1;
reg   [31:0] tmp_4_cast_reg_856;
wire   [2:0] j_2_fu_503_p2;
reg   [2:0] j_2_reg_864;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_497_p2;
wire   [1:0] tmp_16_fu_529_p1;
reg   [1:0] tmp_16_reg_874;
wire   [0:0] tmp_7_fu_537_p2;
reg   [0:0] tmp_7_reg_881;
wire   [5:0] i_2_fu_598_p2;
reg   [5:0] i_2_reg_924;
wire   [7:0] temp_3_3_fu_633_p3;
wire    ap_CS_fsm_state7;
wire   [7:0] temp_3_4_fu_649_p3;
wire   [7:0] temp_3_7_fu_665_p3;
wire   [7:0] temp_3_9_fu_673_p3;
wire   [7:0] temp_3_1_35_fu_687_p3;
reg   [7:0] temp_3_1_35_reg_949;
wire    ap_CS_fsm_state8;
wire   [7:0] temp_2_1_36_fu_694_p3;
reg   [7:0] temp_2_1_36_reg_955;
wire   [7:0] temp_1_1_fu_701_p3;
reg   [7:0] temp_1_1_reg_961;
wire   [7:0] temp_0_2_fu_708_p3;
reg   [7:0] temp_0_2_reg_966;
wire   [7:0] tmp_6_fu_715_p2;
reg   [7:0] tmp_6_reg_971;
wire   [7:0] tmp_8_fu_721_p2;
reg   [7:0] tmp_8_reg_976;
wire   [7:0] tmp_10_fu_757_p2;
reg   [7:0] tmp_10_reg_991;
wire    ap_CS_fsm_state9;
wire   [7:0] tmp_12_fu_762_p2;
reg   [7:0] tmp_12_reg_996;
reg   [2:0] i_reg_273;
wire    ap_CS_fsm_state4;
reg   [7:0] temp_3_reg_284;
wire    ap_CS_fsm_state10;
reg   [7:0] temp_2_reg_296;
reg   [7:0] temp_1_reg_308;
reg   [7:0] temp_reg_320;
reg   [5:0] i_1_reg_332;
reg   [7:0] temp_3_1_reg_344;
reg   [7:0] temp_2_1_reg_355;
reg   [7:0] temp_3_5_reg_366;
reg   [7:0] temp_3_8_reg_377;
reg   [2:0] j_reg_388;
wire   [31:0] sum8_cast_fu_524_p1;
wire   [31:0] num_assign_fu_543_p1;
wire   [31:0] num_assign_1_fu_548_p1;
wire   [31:0] num_assign_2_fu_553_p1;
wire   [31:0] num_assign_3_fu_558_p1;
wire   [31:0] tmp_5_fu_573_p1;
wire   [31:0] sum_cast_fu_583_p1;
wire   [31:0] sum1_cast_fu_593_p1;
wire   [31:0] sum2_cast_fu_732_p1;
wire   [31:0] sum3_cast_fu_742_p1;
wire   [31:0] tmp_18_cast_fu_752_p1;
wire   [31:0] tmp_20_cast_fu_772_p1;
wire   [31:0] tmp_22_cast_fu_782_p1;
wire   [7:0] extLd1_fu_439_p1;
wire   [7:0] extLd2_fu_444_p1;
wire   [7:0] extLd3_fu_469_p1;
wire   [7:0] extLd_fu_474_p1;
wire   [1:0] tmp_14_fu_411_p1;
wire   [3:0] tmp_s_fu_428_p2;
wire   [3:0] tmp_1_fu_449_p2;
wire   [3:0] tmp_2_fu_459_p2;
wire   [2:0] tmp1_fu_509_p2;
wire  signed [7:0] tmp29_cast_fu_515_p1;
wire   [7:0] sum8_fu_519_p2;
wire   [1:0] tmp_15_fu_533_p1;
wire   [3:0] p_lshr_f_cast_fu_563_p4;
wire   [7:0] sum_fu_578_p2;
wire   [7:0] sum1_fu_588_p2;
wire   [0:0] sel_tmp4_fu_614_p2;
wire   [0:0] sel_tmp2_fu_609_p2;
wire   [0:0] sel_tmp_fu_604_p2;
wire   [0:0] or_cond_fu_619_p2;
wire   [7:0] newSel_fu_625_p3;
wire   [7:0] newSel2_fu_641_p3;
wire   [7:0] temp_3_6_fu_657_p3;
wire   [7:0] temp_0_1_fu_681_p2;
wire   [7:0] sum2_fu_727_p2;
wire   [7:0] sum3_fu_737_p2;
wire   [7:0] tmp_9_fu_747_p2;
wire   [7:0] tmp_11_fu_767_p2;
wire   [7:0] tmp_13_fu_777_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

KeyExpansion_sbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0),
    .address1(sbox_address1),
    .ce1(sbox_ce1),
    .q1(sbox_q1),
    .address2(sbox_address2),
    .ce2(sbox_ce2),
    .q2(sbox_q2),
    .address3(sbox_address3),
    .ce3(sbox_ce3),
    .q3(sbox_q3)
);

KeyExpansion_Rcon #(
    .DataWidth( 8 ),
    .AddressRange( 255 ),
    .AddressWidth( 8 ))
Rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon_address0),
    .ce0(Rcon_ce0),
    .q0(Rcon_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_399_p2 == 1'd1))) begin
        i_1_reg_332 <= 6'd4;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_1_reg_332 <= i_2_reg_924;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_273 <= tmp_3_reg_790;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_273 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_388 <= j_2_reg_864;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_479_p2))) begin
        j_reg_388 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_2_1_reg_355 <= temp_3_4_fu_649_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_479_p2))) begin
        temp_2_1_reg_355 <= temp_2_reg_296;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_3_1_reg_344 <= temp_3_3_fu_633_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_479_p2))) begin
        temp_3_1_reg_344 <= temp_3_reg_284;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_3_5_reg_366 <= temp_3_7_fu_665_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_479_p2))) begin
        temp_3_5_reg_366 <= temp_1_reg_308;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_3_8_reg_377 <= temp_3_9_fu_673_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_479_p2))) begin
        temp_3_8_reg_377 <= temp_reg_320;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_497_p2 == 1'd1))) begin
        i_2_reg_924 <= i_2_fu_598_p2;
        tmp_7_reg_881 <= tmp_7_fu_537_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_2_reg_864 <= j_2_fu_503_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_0_2_reg_966 <= temp_0_2_fu_708_p3;
        temp_1_1_reg_961 <= temp_1_1_fu_701_p3;
        temp_2_1_36_reg_955 <= temp_2_1_36_fu_694_p3;
        temp_3_1_35_reg_949 <= temp_3_1_35_fu_687_p3;
        tmp_6_reg_971 <= tmp_6_fu_715_p2;
        tmp_8_reg_976 <= tmp_8_fu_721_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_1_reg_308 <= temp_1_1_reg_961;
        temp_2_reg_296 <= temp_2_1_36_reg_955;
        temp_3_reg_284 <= temp_3_1_35_reg_949;
        temp_reg_320 <= temp_0_2_reg_966;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_10_reg_991 <= tmp_10_fu_757_p2;
        tmp_12_reg_996 <= tmp_12_fu_762_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_497_p2))) begin
        tmp_16_reg_874 <= tmp_16_fu_529_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_1_cast_reg_821[3 : 2] <= tmp_1_cast_fu_454_p1[3 : 2];
        tmp_2_cast_reg_831[3 : 2] <= tmp_2_cast_fu_464_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_3_reg_790 <= tmp_3_fu_405_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_479_p2))) begin
        tmp_4_cast_reg_856[7 : 2] <= tmp_4_cast_fu_493_p1[7 : 2];
        tmp_4_reg_844[7 : 2] <= tmp_4_fu_485_p3[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_399_p2 == 1'd0))) begin
        tmp_cast_29_reg_811[3 : 2] <= tmp_cast_29_fu_434_p1[3 : 2];
        tmp_cast_reg_801[3 : 2] <= tmp_cast_fu_423_p1[3 : 2];
        tmp_reg_795[3 : 2] <= tmp_fu_415_p3[3 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Key_address0 = tmp_1_cast_fu_454_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Key_address0 = tmp_cast_fu_423_p1;
    end else begin
        Key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Key_address1 = tmp_2_cast_fu_464_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Key_address1 = tmp_cast_29_fu_434_p1;
    end else begin
        Key_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        Key_ce0 = 1'b1;
    end else begin
        Key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        Key_ce1 = 1'b1;
    end else begin
        Key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Rcon_ce0 = 1'b1;
    end else begin
        Rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_address0 = tmp_22_cast_fu_782_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_address0 = tmp_18_cast_fu_752_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_address0 = sum3_cast_fu_742_p1;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_497_p2 == 1'd1))) begin
        RoundKey_address0 = sum_cast_fu_583_p1;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_497_p2))) begin
        RoundKey_address0 = sum8_cast_fu_524_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address0 = tmp_1_cast_reg_821;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_address0 = tmp_cast_reg_801;
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_address1 = tmp_20_cast_fu_772_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_address1 = tmp_4_cast_reg_856;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_address1 = sum2_cast_fu_732_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_address1 = sum1_cast_fu_593_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address1 = tmp_2_cast_reg_831;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_address1 = tmp_cast_29_reg_811;
    end else begin
        RoundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_497_p2)) | ((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_497_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        RoundKey_ce0 = 1'b1;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        RoundKey_ce1 = 1'b1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_d0 = tmp_12_reg_996;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_d0 = tmp_8_reg_976;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_d0 = extLd3_fu_469_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_d0 = extLd1_fu_439_p1;
    end else begin
        RoundKey_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_d1 = tmp_10_reg_991;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_d1 = tmp_6_reg_971;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_d1 = extLd_fu_474_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_d1 = extLd2_fu_444_p1;
    end else begin
        RoundKey_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        RoundKey_we0 = 1'b1;
    end else begin
        RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        RoundKey_we1 = 1'b1;
    end else begin
        RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_479_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_479_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_ce1 = 1'b1;
    end else begin
        sbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_ce2 = 1'b1;
    end else begin
        sbox_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_ce3 = 1'b1;
    end else begin
        sbox_ce3 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_399_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_479_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_497_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Rcon_address0 = tmp_5_fu_573_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_479_p2 = ((i_1_reg_332 == 6'd44) ? 1'b1 : 1'b0);

assign exitcond2_fu_399_p2 = ((i_reg_273 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_497_p2 = ((j_reg_388 == 3'd4) ? 1'b1 : 1'b0);

assign extLd1_fu_439_p1 = Key_q0;

assign extLd2_fu_444_p1 = Key_q1;

assign extLd3_fu_469_p1 = Key_q0;

assign extLd_fu_474_p1 = Key_q1;

assign i_2_fu_598_p2 = (6'd1 + i_1_reg_332);

assign j_2_fu_503_p2 = (j_reg_388 + 3'd1);

assign newSel2_fu_641_p3 = ((sel_tmp_fu_604_p2[0:0] === 1'b1) ? RoundKey_q0 : temp_2_1_reg_355);

assign newSel_fu_625_p3 = ((sel_tmp_fu_604_p2[0:0] === 1'b1) ? temp_3_1_reg_344 : RoundKey_q0);

assign num_assign_1_fu_548_p1 = temp_2_1_reg_355;

assign num_assign_2_fu_553_p1 = temp_3_1_reg_344;

assign num_assign_3_fu_558_p1 = temp_3_8_reg_377;

assign num_assign_fu_543_p1 = temp_3_5_reg_366;

assign or_cond_fu_619_p2 = (sel_tmp4_fu_614_p2 | sel_tmp2_fu_609_p2);

assign p_lshr_f_cast_fu_563_p4 = {{i_1_reg_332[5:2]}};

assign sbox_address0 = num_assign_fu_543_p1;

assign sbox_address1 = num_assign_1_fu_548_p1;

assign sbox_address2 = num_assign_2_fu_553_p1;

assign sbox_address3 = num_assign_3_fu_558_p1;

assign sel_tmp2_fu_609_p2 = ((tmp_16_reg_874 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_614_p2 = ((tmp_16_reg_874 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_604_p2 = ((tmp_16_reg_874 == 2'd2) ? 1'b1 : 1'b0);

assign sum1_cast_fu_593_p1 = sum1_fu_588_p2;

assign sum1_fu_588_p2 = ($signed(8'd241) + $signed(tmp_4_reg_844));

assign sum2_cast_fu_732_p1 = sum2_fu_727_p2;

assign sum2_fu_727_p2 = ($signed(8'd242) + $signed(tmp_4_reg_844));

assign sum3_cast_fu_742_p1 = sum3_fu_737_p2;

assign sum3_fu_737_p2 = ($signed(8'd243) + $signed(tmp_4_reg_844));

assign sum8_cast_fu_524_p1 = sum8_fu_519_p2;

assign sum8_fu_519_p2 = ($signed(tmp29_cast_fu_515_p1) + $signed(tmp_4_reg_844));

assign sum_cast_fu_583_p1 = sum_fu_578_p2;

assign sum_fu_578_p2 = ($signed(8'd240) + $signed(tmp_4_reg_844));

assign temp_0_1_fu_681_p2 = (Rcon_q0 ^ sbox_q0);

assign temp_0_2_fu_708_p3 = ((tmp_7_reg_881[0:0] === 1'b1) ? temp_0_1_fu_681_p2 : temp_3_8_reg_377);

assign temp_1_1_fu_701_p3 = ((tmp_7_reg_881[0:0] === 1'b1) ? sbox_q1 : temp_3_5_reg_366);

assign temp_2_1_36_fu_694_p3 = ((tmp_7_reg_881[0:0] === 1'b1) ? sbox_q2 : temp_2_1_reg_355);

assign temp_3_1_35_fu_687_p3 = ((tmp_7_reg_881[0:0] === 1'b1) ? sbox_q3 : temp_3_1_reg_344);

assign temp_3_3_fu_633_p3 = ((or_cond_fu_619_p2[0:0] === 1'b1) ? temp_3_1_reg_344 : newSel_fu_625_p3);

assign temp_3_4_fu_649_p3 = ((or_cond_fu_619_p2[0:0] === 1'b1) ? temp_2_1_reg_355 : newSel2_fu_641_p3);

assign temp_3_6_fu_657_p3 = ((sel_tmp2_fu_609_p2[0:0] === 1'b1) ? RoundKey_q0 : temp_3_5_reg_366);

assign temp_3_7_fu_665_p3 = ((sel_tmp4_fu_614_p2[0:0] === 1'b1) ? temp_3_5_reg_366 : temp_3_6_fu_657_p3);

assign temp_3_9_fu_673_p3 = ((sel_tmp4_fu_614_p2[0:0] === 1'b1) ? RoundKey_q0 : temp_3_8_reg_377);

assign tmp1_fu_509_p2 = (j_reg_388 ^ 3'd4);

assign tmp29_cast_fu_515_p1 = $signed(tmp1_fu_509_p2);

assign tmp_10_fu_757_p2 = (RoundKey_q1 ^ temp_2_1_36_reg_955);

assign tmp_11_fu_767_p2 = (tmp_4_reg_844 | 8'd2);

assign tmp_12_fu_762_p2 = (RoundKey_q0 ^ temp_3_1_35_reg_949);

assign tmp_13_fu_777_p2 = (tmp_4_reg_844 | 8'd3);

assign tmp_14_fu_411_p1 = i_reg_273[1:0];

assign tmp_15_fu_533_p1 = i_1_reg_332[1:0];

assign tmp_16_fu_529_p1 = j_reg_388[1:0];

assign tmp_18_cast_fu_752_p1 = tmp_9_fu_747_p2;

assign tmp_1_cast_fu_454_p1 = tmp_1_fu_449_p2;

assign tmp_1_fu_449_p2 = (tmp_reg_795 | 4'd2);

assign tmp_20_cast_fu_772_p1 = tmp_11_fu_767_p2;

assign tmp_22_cast_fu_782_p1 = tmp_13_fu_777_p2;

assign tmp_2_cast_fu_464_p1 = tmp_2_fu_459_p2;

assign tmp_2_fu_459_p2 = (tmp_reg_795 | 4'd3);

assign tmp_3_fu_405_p2 = (i_reg_273 + 3'd1);

assign tmp_4_cast_fu_493_p1 = tmp_4_fu_485_p3;

assign tmp_4_fu_485_p3 = {{i_1_reg_332}, {2'd0}};

assign tmp_5_fu_573_p1 = p_lshr_f_cast_fu_563_p4;

assign tmp_6_fu_715_p2 = (RoundKey_q0 ^ temp_0_2_fu_708_p3);

assign tmp_7_fu_537_p2 = ((tmp_15_fu_533_p1 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_8_fu_721_p2 = (RoundKey_q1 ^ temp_1_1_fu_701_p3);

assign tmp_9_fu_747_p2 = (tmp_4_reg_844 | 8'd1);

assign tmp_cast_29_fu_434_p1 = tmp_s_fu_428_p2;

assign tmp_cast_fu_423_p1 = tmp_fu_415_p3;

assign tmp_fu_415_p3 = {{tmp_14_fu_411_p1}, {2'd0}};

assign tmp_s_fu_428_p2 = (tmp_fu_415_p3 | 4'd1);

always @ (posedge ap_clk) begin
    tmp_reg_795[1:0] <= 2'b00;
    tmp_cast_reg_801[1:0] <= 2'b00;
    tmp_cast_reg_801[31:4] <= 28'b0000000000000000000000000000;
    tmp_cast_29_reg_811[1:0] <= 2'b01;
    tmp_cast_29_reg_811[31:4] <= 28'b0000000000000000000000000000;
    tmp_1_cast_reg_821[1:0] <= 2'b10;
    tmp_1_cast_reg_821[31:4] <= 28'b0000000000000000000000000000;
    tmp_2_cast_reg_831[1:0] <= 2'b11;
    tmp_2_cast_reg_831[31:4] <= 28'b0000000000000000000000000000;
    tmp_4_reg_844[1:0] <= 2'b00;
    tmp_4_cast_reg_856[1:0] <= 2'b00;
    tmp_4_cast_reg_856[31:8] <= 24'b000000000000000000000000;
end

endmodule //KeyExpansion
