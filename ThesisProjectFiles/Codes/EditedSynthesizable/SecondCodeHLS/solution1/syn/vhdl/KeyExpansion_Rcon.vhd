-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity KeyExpansion_Rcon_rom is 
    generic(
             dwidth     : integer := 8; 
             awidth     : integer := 8; 
             mem_size    : integer := 255
    ); 
    port (
          addr0      : in std_logic_vector(awidth-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(dwidth-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of KeyExpansion_Rcon_rom is 

signal addr0_tmp : std_logic_vector(awidth-1 downto 0); 
type mem_array is array (0 to mem_size-1) of std_logic_vector (dwidth-1 downto 0); 
signal mem : mem_array := (
    0 => "10001101", 1 => "00000001", 2 => "00000010", 3 => "00000100", 
    4 => "00001000", 5 => "00010000", 6 => "00100000", 7 => "01000000", 
    8 => "10000000", 9 => "00011011", 10 => "00110110", 11 => "01101100", 
    12 => "11011000", 13 => "10101011", 14 => "01001101", 15 => "10011010", 
    16 => "00101111", 17 => "01011110", 18 => "10111100", 19 => "01100011", 
    20 => "11000110", 21 => "10010111", 22 => "00110101", 23 => "01101010", 
    24 => "11010100", 25 => "10110011", 26 => "01111101", 27 => "11111010", 
    28 => "11101111", 29 => "11000101", 30 => "10010001", 31 => "00111001", 
    32 => "01110010", 33 => "11100100", 34 => "11010011", 35 => "10111101", 
    36 => "01100001", 37 => "11000010", 38 => "10011111", 39 => "00100101", 
    40 => "01001010", 41 => "10010100", 42 => "00110011", 43 => "01100110", 
    44 => "11001100", 45 => "10000011", 46 => "00011101", 47 => "00111010", 
    48 => "01110100", 49 => "11101000", 50 => "11001011", 51 => "10001101", 
    52 => "00000001", 53 => "00000010", 54 => "00000100", 55 => "00001000", 
    56 => "00010000", 57 => "00100000", 58 => "01000000", 59 => "10000000", 
    60 => "00011011", 61 => "00110110", 62 => "01101100", 63 => "11011000", 
    64 => "10101011", 65 => "01001101", 66 => "10011010", 67 => "00101111", 
    68 => "01011110", 69 => "10111100", 70 => "01100011", 71 => "11000110", 
    72 => "10010111", 73 => "00110101", 74 => "01101010", 75 => "11010100", 
    76 => "10110011", 77 => "01111101", 78 => "11111010", 79 => "11101111", 
    80 => "11000101", 81 => "10010001", 82 => "00111001", 83 => "01110010", 
    84 => "11100100", 85 => "11010011", 86 => "10111101", 87 => "01100001", 
    88 => "11000010", 89 => "10011111", 90 => "00100101", 91 => "01001010", 
    92 => "10010100", 93 => "00110011", 94 => "01100110", 95 => "11001100", 
    96 => "10000011", 97 => "00011101", 98 => "00111010", 99 => "01110100", 
    100 => "11101000", 101 => "11001011", 102 => "10001101", 103 => "00000001", 
    104 => "00000010", 105 => "00000100", 106 => "00001000", 107 => "00010000", 
    108 => "00100000", 109 => "01000000", 110 => "10000000", 111 => "00011011", 
    112 => "00110110", 113 => "01101100", 114 => "11011000", 115 => "10101011", 
    116 => "01001101", 117 => "10011010", 118 => "00101111", 119 => "01011110", 
    120 => "10111100", 121 => "01100011", 122 => "11000110", 123 => "10010111", 
    124 => "00110101", 125 => "01101010", 126 => "11010100", 127 => "10110011", 
    128 => "01111101", 129 => "11111010", 130 => "11101111", 131 => "11000101", 
    132 => "10010001", 133 => "00111001", 134 => "01110010", 135 => "11100100", 
    136 => "11010011", 137 => "10111101", 138 => "01100001", 139 => "11000010", 
    140 => "10011111", 141 => "00100101", 142 => "01001010", 143 => "10010100", 
    144 => "00110011", 145 => "01100110", 146 => "11001100", 147 => "10000011", 
    148 => "00011101", 149 => "00111010", 150 => "01110100", 151 => "11101000", 
    152 => "11001011", 153 => "10001101", 154 => "00000001", 155 => "00000010", 
    156 => "00000100", 157 => "00001000", 158 => "00010000", 159 => "00100000", 
    160 => "01000000", 161 => "10000000", 162 => "00011011", 163 => "00110110", 
    164 => "01101100", 165 => "11011000", 166 => "10101011", 167 => "01001101", 
    168 => "10011010", 169 => "00101111", 170 => "01011110", 171 => "10111100", 
    172 => "01100011", 173 => "11000110", 174 => "10010111", 175 => "00110101", 
    176 => "01101010", 177 => "11010100", 178 => "10110011", 179 => "01111101", 
    180 => "11111010", 181 => "11101111", 182 => "11000101", 183 => "10010001", 
    184 => "00111001", 185 => "01110010", 186 => "11100100", 187 => "11010011", 
    188 => "10111101", 189 => "01100001", 190 => "11000010", 191 => "10011111", 
    192 => "00100101", 193 => "01001010", 194 => "10010100", 195 => "00110011", 
    196 => "01100110", 197 => "11001100", 198 => "10000011", 199 => "00011101", 
    200 => "00111010", 201 => "01110100", 202 => "11101000", 203 => "11001011", 
    204 => "10001101", 205 => "00000001", 206 => "00000010", 207 => "00000100", 
    208 => "00001000", 209 => "00010000", 210 => "00100000", 211 => "01000000", 
    212 => "10000000", 213 => "00011011", 214 => "00110110", 215 => "01101100", 
    216 => "11011000", 217 => "10101011", 218 => "01001101", 219 => "10011010", 
    220 => "00101111", 221 => "01011110", 222 => "10111100", 223 => "01100011", 
    224 => "11000110", 225 => "10010111", 226 => "00110101", 227 => "01101010", 
    228 => "11010100", 229 => "10110011", 230 => "01111101", 231 => "11111010", 
    232 => "11101111", 233 => "11000101", 234 => "10010001", 235 => "00111001", 
    236 => "01110010", 237 => "11100100", 238 => "11010011", 239 => "10111101", 
    240 => "01100001", 241 => "11000010", 242 => "10011111", 243 => "00100101", 
    244 => "01001010", 245 => "10010100", 246 => "00110011", 247 => "01100110", 
    248 => "11001100", 249 => "10000011", 250 => "00011101", 251 => "00111010", 
    252 => "01110100", 253 => "11101000", 254 => "11001011" );


attribute EQUIVALENT_REGISTER_REMOVAL : string;
begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity KeyExpansion_Rcon is
    generic (
        DataWidth : INTEGER := 8;
        AddressRange : INTEGER := 255;
        AddressWidth : INTEGER := 8);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of KeyExpansion_Rcon is
    component KeyExpansion_Rcon_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    KeyExpansion_Rcon_rom_U :  component KeyExpansion_Rcon_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


