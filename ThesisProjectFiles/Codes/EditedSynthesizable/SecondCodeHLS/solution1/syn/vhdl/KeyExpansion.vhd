-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KeyExpansion is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce0 : OUT STD_LOGIC;
    RoundKey_we0 : OUT STD_LOGIC;
    RoundKey_d0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_q0 : IN STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce1 : OUT STD_LOGIC;
    RoundKey_we1 : OUT STD_LOGIC;
    RoundKey_d1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_q1 : IN STD_LOGIC_VECTOR (7 downto 0);
    Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    Key_ce0 : OUT STD_LOGIC;
    Key_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    Key_ce1 : OUT STD_LOGIC;
    Key_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of KeyExpansion is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv8_F1 : STD_LOGIC_VECTOR (7 downto 0) := "11110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv8_F2 : STD_LOGIC_VECTOR (7 downto 0) := "11110010";
    constant ap_const_lv8_F3 : STD_LOGIC_VECTOR (7 downto 0) := "11110011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce1 : STD_LOGIC;
    signal sbox_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce2 : STD_LOGIC;
    signal sbox_q2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_address3 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce3 : STD_LOGIC;
    signal sbox_q3 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rcon_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rcon_ce0 : STD_LOGIC;
    signal Rcon_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_7_fu_405_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_reg_790 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_415_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_795 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond2_fu_399_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_cast_fu_423_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_reg_801 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_cast_fu_434_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_1_cast_reg_811 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_cast_fu_454_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_cast_reg_821 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_5_cast_fu_464_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_5_cast_reg_831 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_485_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_reg_844 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond1_fu_479_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_cast_fu_493_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_cast_reg_856 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_2_fu_503_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_2_reg_864 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal exitcond_fu_497_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_529_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_21_reg_874 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_9_fu_537_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_9_reg_881 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_2_fu_598_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_2_reg_924 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_3_3_fu_633_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal temp_3_4_fu_649_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_3_7_fu_665_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_3_9_fu_673_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_3_1_34_fu_687_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_3_1_34_reg_949 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal temp_2_1_35_fu_694_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_2_1_35_reg_955 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_1_1_fu_701_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_1_1_reg_961 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_0_2_fu_708_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_0_2_reg_966 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_fu_715_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_10_reg_971 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_fu_721_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_11_reg_976 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_fu_757_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_13_reg_991 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_15_fu_762_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_15_reg_996 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_reg_273 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal temp_3_reg_284 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal temp_2_reg_296 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_1_reg_308 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_reg_320 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_1_reg_332 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_3_1_reg_344 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_2_1_reg_355 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_3_5_reg_366 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_3_8_reg_377 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_reg_388 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum8_cast_fu_524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_assign_fu_543_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_assign_1_fu_548_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_assign_2_fu_553_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_assign_3_fu_558_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_fu_573_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_cast_fu_583_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_cast_fu_593_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_cast_fu_732_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum3_cast_fu_742_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_cast_fu_752_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_cast_fu_772_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_cast_fu_782_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_4_fu_439_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_6_fu_444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_469_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_19_fu_474_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_411_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_1_fu_428_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_449_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_5_fu_459_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_fu_509_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp29_cast_fu_515_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum8_fu_519_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_533_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal p_lshr_f_cast_fu_563_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_fu_578_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum1_fu_588_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sel_tmp4_fu_614_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp2_fu_609_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_cond_fu_619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal newSel_fu_625_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal newSel2_fu_641_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_3_6_fu_657_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_0_1_fu_681_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum2_fu_727_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum3_fu_737_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_12_fu_747_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_14_fu_767_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_16_fu_777_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component KeyExpansion_sbox IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address2 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce2 : IN STD_LOGIC;
        q2 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address3 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce3 : IN STD_LOGIC;
        q3 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component KeyExpansion_Rcon IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component KeyExpansion_sbox
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0,
        address1 => sbox_address1,
        ce1 => sbox_ce1,
        q1 => sbox_q1,
        address2 => sbox_address2,
        ce2 => sbox_ce2,
        q2 => sbox_q2,
        address3 => sbox_address3,
        ce3 => sbox_ce3,
        q3 => sbox_q3);

    Rcon_U : component KeyExpansion_Rcon
    generic map (
        DataWidth => 8,
        AddressRange => 255,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Rcon_address0,
        ce0 => Rcon_ce0,
        q0 => Rcon_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_332_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_399_p2 = ap_const_lv1_1))) then 
                i_1_reg_332 <= ap_const_lv6_4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_1_reg_332 <= i_2_reg_924;
            end if; 
        end if;
    end process;

    i_reg_273_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_273 <= tmp_7_reg_790;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_273 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_388_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_reg_388 <= j_2_reg_864;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_479_p2))) then 
                j_reg_388 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    temp_2_1_reg_355_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                temp_2_1_reg_355 <= temp_3_4_fu_649_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_479_p2))) then 
                temp_2_1_reg_355 <= temp_2_reg_296;
            end if; 
        end if;
    end process;

    temp_3_1_reg_344_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                temp_3_1_reg_344 <= temp_3_3_fu_633_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_479_p2))) then 
                temp_3_1_reg_344 <= temp_3_reg_284;
            end if; 
        end if;
    end process;

    temp_3_5_reg_366_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                temp_3_5_reg_366 <= temp_3_7_fu_665_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_479_p2))) then 
                temp_3_5_reg_366 <= temp_1_reg_308;
            end if; 
        end if;
    end process;

    temp_3_8_reg_377_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                temp_3_8_reg_377 <= temp_3_9_fu_673_p3;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_479_p2))) then 
                temp_3_8_reg_377 <= temp_reg_320;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_497_p2 = ap_const_lv1_1))) then
                i_2_reg_924 <= i_2_fu_598_p2;
                tmp_9_reg_881 <= tmp_9_fu_537_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                j_2_reg_864 <= j_2_fu_503_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                temp_0_2_reg_966 <= temp_0_2_fu_708_p3;
                temp_1_1_reg_961 <= temp_1_1_fu_701_p3;
                temp_2_1_35_reg_955 <= temp_2_1_35_fu_694_p3;
                temp_3_1_34_reg_949 <= temp_3_1_34_fu_687_p3;
                tmp_10_reg_971 <= tmp_10_fu_715_p2;
                tmp_11_reg_976 <= tmp_11_fu_721_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                temp_1_reg_308 <= temp_1_1_reg_961;
                temp_2_reg_296 <= temp_2_1_35_reg_955;
                temp_3_reg_284 <= temp_3_1_34_reg_949;
                temp_reg_320 <= temp_0_2_reg_966;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_13_reg_991 <= tmp_13_fu_757_p2;
                tmp_15_reg_996 <= tmp_15_fu_762_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_399_p2 = ap_const_lv1_0))) then
                    tmp_1_cast_reg_811(3 downto 2) <= tmp_1_cast_fu_434_p1(3 downto 2);
                    tmp_cast_reg_801(3 downto 2) <= tmp_cast_fu_423_p1(3 downto 2);
                    tmp_reg_795(3 downto 2) <= tmp_fu_415_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_fu_497_p2))) then
                tmp_21_reg_874 <= tmp_21_fu_529_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                    tmp_3_cast_reg_821(3 downto 2) <= tmp_3_cast_fu_454_p1(3 downto 2);
                    tmp_5_cast_reg_831(3 downto 2) <= tmp_5_cast_fu_464_p1(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                tmp_7_reg_790 <= tmp_7_fu_405_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_479_p2))) then
                    tmp_8_cast_reg_856(7 downto 2) <= tmp_8_cast_fu_493_p1(7 downto 2);
                    tmp_8_reg_844(7 downto 2) <= tmp_8_fu_485_p3(7 downto 2);
            end if;
        end if;
    end process;
    tmp_reg_795(1 downto 0) <= "00";
    tmp_cast_reg_801(1 downto 0) <= "00";
    tmp_cast_reg_801(31 downto 4) <= "0000000000000000000000000000";
    tmp_1_cast_reg_811(1 downto 0) <= "01";
    tmp_1_cast_reg_811(31 downto 4) <= "0000000000000000000000000000";
    tmp_3_cast_reg_821(1 downto 0) <= "10";
    tmp_3_cast_reg_821(31 downto 4) <= "0000000000000000000000000000";
    tmp_5_cast_reg_831(1 downto 0) <= "11";
    tmp_5_cast_reg_831(31 downto 4) <= "0000000000000000000000000000";
    tmp_8_reg_844(1 downto 0) <= "00";
    tmp_8_cast_reg_856(1 downto 0) <= "00";
    tmp_8_cast_reg_856(31 downto 8) <= "000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond2_fu_399_p2, ap_CS_fsm_state5, exitcond1_fu_479_p2, ap_CS_fsm_state6, exitcond_fu_497_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond2_fu_399_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_479_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_497_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;

    Key_address0_assign_proc : process(ap_CS_fsm_state2, tmp_cast_fu_423_p1, tmp_3_cast_fu_454_p1, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Key_address0 <= tmp_3_cast_fu_454_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Key_address0 <= tmp_cast_fu_423_p1(5 - 1 downto 0);
        else 
            Key_address0 <= "XXXXX";
        end if; 
    end process;


    Key_address1_assign_proc : process(ap_CS_fsm_state2, tmp_1_cast_fu_434_p1, ap_CS_fsm_state3, tmp_5_cast_fu_464_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Key_address1 <= tmp_5_cast_fu_464_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Key_address1 <= tmp_1_cast_fu_434_p1(5 - 1 downto 0);
        else 
            Key_address1 <= "XXXXX";
        end if; 
    end process;


    Key_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Key_ce0 <= ap_const_logic_1;
        else 
            Key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Key_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            Key_ce1 <= ap_const_logic_1;
        else 
            Key_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Rcon_address0 <= tmp_s_fu_573_p1(8 - 1 downto 0);

    Rcon_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Rcon_ce0 <= ap_const_logic_1;
        else 
            Rcon_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_address0_assign_proc : process(tmp_cast_reg_801, tmp_3_cast_reg_821, ap_CS_fsm_state3, ap_CS_fsm_state6, exitcond_fu_497_p2, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state10, sum8_cast_fu_524_p1, sum_cast_fu_583_p1, sum3_cast_fu_742_p1, tmp_22_cast_fu_752_p1, tmp_26_cast_fu_782_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            RoundKey_address0 <= tmp_26_cast_fu_782_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            RoundKey_address0 <= tmp_22_cast_fu_752_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            RoundKey_address0 <= sum3_cast_fu_742_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_497_p2 = ap_const_lv1_1))) then 
            RoundKey_address0 <= sum_cast_fu_583_p1(8 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_fu_497_p2))) then 
            RoundKey_address0 <= sum8_cast_fu_524_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            RoundKey_address0 <= tmp_3_cast_reg_821(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_address0 <= tmp_cast_reg_801(8 - 1 downto 0);
        else 
            RoundKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_address1_assign_proc : process(tmp_1_cast_reg_811, ap_CS_fsm_state3, tmp_5_cast_reg_831, tmp_8_cast_reg_856, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state10, sum1_cast_fu_593_p1, sum2_cast_fu_732_p1, tmp_24_cast_fu_772_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            RoundKey_address1 <= tmp_24_cast_fu_772_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            RoundKey_address1 <= tmp_8_cast_reg_856(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            RoundKey_address1 <= sum2_cast_fu_732_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RoundKey_address1 <= sum1_cast_fu_593_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            RoundKey_address1 <= tmp_5_cast_reg_831(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_address1 <= tmp_1_cast_reg_811(8 - 1 downto 0);
        else 
            RoundKey_address1 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, exitcond_fu_497_p2, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond_fu_497_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (exitcond_fu_497_p2 = ap_const_lv1_1)) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            RoundKey_ce0 <= ap_const_logic_1;
        else 
            RoundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            RoundKey_ce1 <= ap_const_logic_1;
        else 
            RoundKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_d0_assign_proc : process(ap_CS_fsm_state3, tmp_11_reg_976, ap_CS_fsm_state9, tmp_15_reg_996, ap_CS_fsm_state4, ap_CS_fsm_state10, tmp_4_fu_439_p1, tmp_18_fu_469_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            RoundKey_d0 <= tmp_15_reg_996;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            RoundKey_d0 <= tmp_11_reg_976;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            RoundKey_d0 <= tmp_18_fu_469_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_d0 <= tmp_4_fu_439_p1;
        else 
            RoundKey_d0 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_d1_assign_proc : process(ap_CS_fsm_state3, tmp_10_reg_971, tmp_13_reg_991, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state10, tmp_6_fu_444_p1, tmp_19_fu_474_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            RoundKey_d1 <= tmp_13_reg_991;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            RoundKey_d1 <= tmp_10_reg_971;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            RoundKey_d1 <= tmp_19_fu_474_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_d1 <= tmp_6_fu_444_p1;
        else 
            RoundKey_d1 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_we0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            RoundKey_we0 <= ap_const_logic_1;
        else 
            RoundKey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_we1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state9, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
            RoundKey_we1 <= ap_const_logic_1;
        else 
            RoundKey_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, exitcond1_fu_479_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_479_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond1_fu_479_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_479_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_479_p2 <= "1" when (i_1_reg_332 = ap_const_lv6_2C) else "0";
    exitcond2_fu_399_p2 <= "1" when (i_reg_273 = ap_const_lv3_4) else "0";
    exitcond_fu_497_p2 <= "1" when (j_reg_388 = ap_const_lv3_4) else "0";
    i_2_fu_598_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(i_1_reg_332));
    j_2_fu_503_p2 <= std_logic_vector(unsigned(j_reg_388) + unsigned(ap_const_lv3_1));
    newSel2_fu_641_p3 <= 
        RoundKey_q0 when (sel_tmp_fu_604_p2(0) = '1') else 
        temp_2_1_reg_355;
    newSel_fu_625_p3 <= 
        temp_3_1_reg_344 when (sel_tmp_fu_604_p2(0) = '1') else 
        RoundKey_q0;
    num_assign_1_fu_548_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_2_1_reg_355),32));
    num_assign_2_fu_553_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_3_1_reg_344),32));
    num_assign_3_fu_558_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_3_8_reg_377),32));
    num_assign_fu_543_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_3_5_reg_366),32));
    or_cond_fu_619_p2 <= (sel_tmp4_fu_614_p2 or sel_tmp2_fu_609_p2);
    p_lshr_f_cast_fu_563_p4 <= i_1_reg_332(5 downto 2);
    sbox_address0 <= num_assign_fu_543_p1(8 - 1 downto 0);
    sbox_address1 <= num_assign_1_fu_548_p1(8 - 1 downto 0);
    sbox_address2 <= num_assign_2_fu_553_p1(8 - 1 downto 0);
    sbox_address3 <= num_assign_3_fu_558_p1(8 - 1 downto 0);

    sbox_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce1_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sbox_ce1 <= ap_const_logic_1;
        else 
            sbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce2_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sbox_ce2 <= ap_const_logic_1;
        else 
            sbox_ce2 <= ap_const_logic_0;
        end if; 
    end process;


    sbox_ce3_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            sbox_ce3 <= ap_const_logic_1;
        else 
            sbox_ce3 <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp2_fu_609_p2 <= "1" when (tmp_21_reg_874 = ap_const_lv2_1) else "0";
    sel_tmp4_fu_614_p2 <= "1" when (tmp_21_reg_874 = ap_const_lv2_0) else "0";
    sel_tmp_fu_604_p2 <= "1" when (tmp_21_reg_874 = ap_const_lv2_2) else "0";
    sum1_cast_fu_593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_588_p2),32));
    sum1_fu_588_p2 <= std_logic_vector(signed(ap_const_lv8_F1) + signed(tmp_8_reg_844));
    sum2_cast_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_727_p2),32));
    sum2_fu_727_p2 <= std_logic_vector(signed(ap_const_lv8_F2) + signed(tmp_8_reg_844));
    sum3_cast_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_fu_737_p2),32));
    sum3_fu_737_p2 <= std_logic_vector(signed(ap_const_lv8_F3) + signed(tmp_8_reg_844));
    sum8_cast_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_fu_519_p2),32));
    sum8_fu_519_p2 <= std_logic_vector(signed(tmp29_cast_fu_515_p1) + signed(tmp_8_reg_844));
    sum_cast_fu_583_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_578_p2),32));
    sum_fu_578_p2 <= std_logic_vector(signed(ap_const_lv8_F0) + signed(tmp_8_reg_844));
    temp_0_1_fu_681_p2 <= (Rcon_q0 xor sbox_q0);
    temp_0_2_fu_708_p3 <= 
        temp_0_1_fu_681_p2 when (tmp_9_reg_881(0) = '1') else 
        temp_3_8_reg_377;
    temp_1_1_fu_701_p3 <= 
        sbox_q1 when (tmp_9_reg_881(0) = '1') else 
        temp_3_5_reg_366;
    temp_2_1_35_fu_694_p3 <= 
        sbox_q2 when (tmp_9_reg_881(0) = '1') else 
        temp_2_1_reg_355;
    temp_3_1_34_fu_687_p3 <= 
        sbox_q3 when (tmp_9_reg_881(0) = '1') else 
        temp_3_1_reg_344;
    temp_3_3_fu_633_p3 <= 
        temp_3_1_reg_344 when (or_cond_fu_619_p2(0) = '1') else 
        newSel_fu_625_p3;
    temp_3_4_fu_649_p3 <= 
        temp_2_1_reg_355 when (or_cond_fu_619_p2(0) = '1') else 
        newSel2_fu_641_p3;
    temp_3_6_fu_657_p3 <= 
        RoundKey_q0 when (sel_tmp2_fu_609_p2(0) = '1') else 
        temp_3_5_reg_366;
    temp_3_7_fu_665_p3 <= 
        temp_3_5_reg_366 when (sel_tmp4_fu_614_p2(0) = '1') else 
        temp_3_6_fu_657_p3;
    temp_3_9_fu_673_p3 <= 
        RoundKey_q0 when (sel_tmp4_fu_614_p2(0) = '1') else 
        temp_3_8_reg_377;
    tmp1_fu_509_p2 <= (j_reg_388 xor ap_const_lv3_4);
        tmp29_cast_fu_515_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp1_fu_509_p2),8));

    tmp_10_fu_715_p2 <= (RoundKey_q0 xor temp_0_2_fu_708_p3);
    tmp_11_fu_721_p2 <= (RoundKey_q1 xor temp_1_1_fu_701_p3);
    tmp_12_fu_747_p2 <= (tmp_8_reg_844 or ap_const_lv8_1);
    tmp_13_fu_757_p2 <= (RoundKey_q1 xor temp_2_1_35_reg_955);
    tmp_14_fu_767_p2 <= (tmp_8_reg_844 or ap_const_lv8_2);
    tmp_15_fu_762_p2 <= (RoundKey_q0 xor temp_3_1_34_reg_949);
    tmp_16_fu_777_p2 <= (tmp_8_reg_844 or ap_const_lv8_3);
    tmp_18_fu_469_p1 <= Key_q0(8 - 1 downto 0);
    tmp_19_fu_474_p1 <= Key_q1(8 - 1 downto 0);
    tmp_1_cast_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_428_p2),32));
    tmp_1_fu_428_p2 <= (tmp_fu_415_p3 or ap_const_lv4_1);
    tmp_20_fu_533_p1 <= i_1_reg_332(2 - 1 downto 0);
    tmp_21_fu_529_p1 <= j_reg_388(2 - 1 downto 0);
    tmp_22_cast_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_12_fu_747_p2),32));
    tmp_24_cast_fu_772_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_fu_767_p2),32));
    tmp_26_cast_fu_782_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_777_p2),32));
    tmp_2_fu_411_p1 <= i_reg_273(2 - 1 downto 0);
    tmp_3_cast_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_449_p2),32));
    tmp_3_fu_449_p2 <= (tmp_reg_795 or ap_const_lv4_2);
    tmp_4_fu_439_p1 <= Key_q0(8 - 1 downto 0);
    tmp_5_cast_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_459_p2),32));
    tmp_5_fu_459_p2 <= (tmp_reg_795 or ap_const_lv4_3);
    tmp_6_fu_444_p1 <= Key_q1(8 - 1 downto 0);
    tmp_7_fu_405_p2 <= std_logic_vector(unsigned(i_reg_273) + unsigned(ap_const_lv3_1));
    tmp_8_cast_fu_493_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_485_p3),32));
    tmp_8_fu_485_p3 <= (i_1_reg_332 & ap_const_lv2_0);
    tmp_9_fu_537_p2 <= "1" when (tmp_20_fu_533_p1 = ap_const_lv2_0) else "0";
    tmp_cast_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_415_p3),32));
    tmp_fu_415_p3 <= (tmp_2_fu_411_p1 & ap_const_lv2_0);
    tmp_s_fu_573_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_cast_fu_563_p4),32));
end behav;
