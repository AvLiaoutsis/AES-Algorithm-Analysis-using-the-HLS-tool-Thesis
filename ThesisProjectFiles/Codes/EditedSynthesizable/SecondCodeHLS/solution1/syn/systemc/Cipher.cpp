// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Cipher.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Cipher::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Cipher::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<38> Cipher::ap_ST_fsm_state1 = "1";
const sc_lv<38> Cipher::ap_ST_fsm_state2 = "10";
const sc_lv<38> Cipher::ap_ST_fsm_state3 = "100";
const sc_lv<38> Cipher::ap_ST_fsm_state4 = "1000";
const sc_lv<38> Cipher::ap_ST_fsm_state5 = "10000";
const sc_lv<38> Cipher::ap_ST_fsm_state6 = "100000";
const sc_lv<38> Cipher::ap_ST_fsm_state7 = "1000000";
const sc_lv<38> Cipher::ap_ST_fsm_state8 = "10000000";
const sc_lv<38> Cipher::ap_ST_fsm_state9 = "100000000";
const sc_lv<38> Cipher::ap_ST_fsm_state10 = "1000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state11 = "10000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state12 = "100000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<38> Cipher::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<32> Cipher::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> Cipher::ap_const_lv32_7 = "111";
const sc_lv<32> Cipher::ap_const_lv32_C = "1100";
const sc_lv<32> Cipher::ap_const_lv32_13 = "10011";
const sc_lv<32> Cipher::ap_const_lv32_19 = "11001";
const sc_lv<32> Cipher::ap_const_lv32_1E = "11110";
const sc_lv<32> Cipher::ap_const_lv32_8 = "1000";
const sc_lv<32> Cipher::ap_const_lv32_1A = "11010";
const sc_lv<32> Cipher::ap_const_lv32_9 = "1001";
const sc_lv<32> Cipher::ap_const_lv32_1B = "11011";
const sc_lv<32> Cipher::ap_const_lv32_A = "1010";
const sc_lv<32> Cipher::ap_const_lv32_1C = "11100";
const sc_lv<32> Cipher::ap_const_lv32_B = "1011";
const sc_lv<32> Cipher::ap_const_lv32_1D = "11101";
const sc_lv<32> Cipher::ap_const_lv32_3 = "11";
const sc_lv<32> Cipher::ap_const_lv32_12 = "10010";
const sc_lv<1> Cipher::ap_const_lv1_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_14 = "10100";
const sc_lv<4> Cipher::ap_const_lv4_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_16 = "10110";
const sc_lv<3> Cipher::ap_const_lv3_0 = "000";
const sc_lv<32> Cipher::ap_const_lv32_11 = "10001";
const sc_lv<32> Cipher::ap_const_lv32_15 = "10101";
const sc_lv<32> Cipher::ap_const_lv32_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_2 = "10";
const sc_lv<32> Cipher::ap_const_lv32_24 = "100100";
const sc_lv<6> Cipher::ap_const_lv6_0 = "000000";
const sc_lv<6> Cipher::ap_const_lv6_A = "1010";
const sc_lv<32> Cipher::ap_const_lv32_25 = "100101";
const sc_lv<32> Cipher::ap_const_lv32_4 = "100";
const sc_lv<1> Cipher::ap_const_lv1_0 = "0";
const sc_lv<32> Cipher::ap_const_lv32_5 = "101";
const sc_lv<32> Cipher::ap_const_lv32_17 = "10111";
const sc_lv<32> Cipher::ap_const_lv32_6 = "110";
const sc_lv<32> Cipher::ap_const_lv32_F = "1111";
const sc_lv<32> Cipher::ap_const_lv32_E = "1110";
const sc_lv<32> Cipher::ap_const_lv32_D = "1101";
const sc_lv<32> Cipher::ap_const_lv32_10 = "10000";
const sc_lv<32> Cipher::ap_const_lv32_18 = "11000";
const sc_lv<32> Cipher::ap_const_lv32_1F = "11111";
const sc_lv<32> Cipher::ap_const_lv32_20 = "100000";
const sc_lv<32> Cipher::ap_const_lv32_21 = "100001";
const sc_lv<32> Cipher::ap_const_lv32_22 = "100010";
const sc_lv<32> Cipher::ap_const_lv32_23 = "100011";
const sc_lv<4> Cipher::ap_const_lv4_A = "1010";
const sc_lv<4> Cipher::ap_const_lv4_4 = "100";
const sc_lv<29> Cipher::ap_const_lv29_1 = "1";
const sc_lv<5> Cipher::ap_const_lv5_C = "1100";
const sc_lv<3> Cipher::ap_const_lv3_4 = "100";
const sc_lv<3> Cipher::ap_const_lv3_1 = "1";
const sc_lv<8> Cipher::ap_const_lv8_1 = "1";
const sc_lv<8> Cipher::ap_const_lv8_1B = "11011";
const sc_lv<8> Cipher::ap_const_lv8_0 = "00000000";
const bool Cipher::ap_const_boolean_1 = true;

Cipher::Cipher(sc_module_name name) : sc_module(name), mVcdFile(0) {
    RoundKey_U = new Cipher_RoundKey("RoundKey_U");
    RoundKey_U->clk(ap_clk);
    RoundKey_U->reset(ap_rst);
    RoundKey_U->address0(RoundKey_address0);
    RoundKey_U->ce0(RoundKey_ce0);
    RoundKey_U->we0(RoundKey_we0);
    RoundKey_U->d0(grp_KeyExpansion_fu_244_RoundKey_d0);
    RoundKey_U->q0(RoundKey_q0);
    RoundKey_U->address1(grp_KeyExpansion_fu_244_RoundKey_address1);
    RoundKey_U->ce1(RoundKey_ce1);
    RoundKey_U->we1(RoundKey_we1);
    RoundKey_U->d1(grp_KeyExpansion_fu_244_RoundKey_d1);
    RoundKey_U->q1(RoundKey_q1);
    grp_KeyExpansion_fu_244 = new KeyExpansion("grp_KeyExpansion_fu_244");
    grp_KeyExpansion_fu_244->ap_clk(ap_clk);
    grp_KeyExpansion_fu_244->ap_rst(ap_rst);
    grp_KeyExpansion_fu_244->ap_start(grp_KeyExpansion_fu_244_ap_start);
    grp_KeyExpansion_fu_244->ap_done(grp_KeyExpansion_fu_244_ap_done);
    grp_KeyExpansion_fu_244->ap_idle(grp_KeyExpansion_fu_244_ap_idle);
    grp_KeyExpansion_fu_244->ap_ready(grp_KeyExpansion_fu_244_ap_ready);
    grp_KeyExpansion_fu_244->RoundKey_address0(grp_KeyExpansion_fu_244_RoundKey_address0);
    grp_KeyExpansion_fu_244->RoundKey_ce0(grp_KeyExpansion_fu_244_RoundKey_ce0);
    grp_KeyExpansion_fu_244->RoundKey_we0(grp_KeyExpansion_fu_244_RoundKey_we0);
    grp_KeyExpansion_fu_244->RoundKey_d0(grp_KeyExpansion_fu_244_RoundKey_d0);
    grp_KeyExpansion_fu_244->RoundKey_q0(RoundKey_q0);
    grp_KeyExpansion_fu_244->RoundKey_address1(grp_KeyExpansion_fu_244_RoundKey_address1);
    grp_KeyExpansion_fu_244->RoundKey_ce1(grp_KeyExpansion_fu_244_RoundKey_ce1);
    grp_KeyExpansion_fu_244->RoundKey_we1(grp_KeyExpansion_fu_244_RoundKey_we1);
    grp_KeyExpansion_fu_244->RoundKey_d1(grp_KeyExpansion_fu_244_RoundKey_d1);
    grp_KeyExpansion_fu_244->RoundKey_q1(RoundKey_q1);
    grp_KeyExpansion_fu_244->Key_address0(grp_KeyExpansion_fu_244_Key_address0);
    grp_KeyExpansion_fu_244->Key_ce0(grp_KeyExpansion_fu_244_Key_ce0);
    grp_KeyExpansion_fu_244->Key_q0(Key_q0);
    grp_KeyExpansion_fu_244->Key_address1(grp_KeyExpansion_fu_244_Key_address1);
    grp_KeyExpansion_fu_244->Key_ce1(grp_KeyExpansion_fu_244_Key_ce1);
    grp_KeyExpansion_fu_244->Key_q1(Key_q1);
    grp_AddRoundKey_fu_256 = new AddRoundKey("grp_AddRoundKey_fu_256");
    grp_AddRoundKey_fu_256->ap_clk(ap_clk);
    grp_AddRoundKey_fu_256->ap_rst(ap_rst);
    grp_AddRoundKey_fu_256->ap_start(grp_AddRoundKey_fu_256_ap_start);
    grp_AddRoundKey_fu_256->ap_done(grp_AddRoundKey_fu_256_ap_done);
    grp_AddRoundKey_fu_256->ap_idle(grp_AddRoundKey_fu_256_ap_idle);
    grp_AddRoundKey_fu_256->ap_ready(grp_AddRoundKey_fu_256_ap_ready);
    grp_AddRoundKey_fu_256->round(grp_AddRoundKey_fu_256_round);
    grp_AddRoundKey_fu_256->state_address0(grp_AddRoundKey_fu_256_state_address0);
    grp_AddRoundKey_fu_256->state_ce0(grp_AddRoundKey_fu_256_state_ce0);
    grp_AddRoundKey_fu_256->state_we0(grp_AddRoundKey_fu_256_state_we0);
    grp_AddRoundKey_fu_256->state_d0(grp_AddRoundKey_fu_256_state_d0);
    grp_AddRoundKey_fu_256->state_q0(state_q0);
    grp_AddRoundKey_fu_256->RoundKey_address0(grp_AddRoundKey_fu_256_RoundKey_address0);
    grp_AddRoundKey_fu_256->RoundKey_ce0(grp_AddRoundKey_fu_256_RoundKey_ce0);
    grp_AddRoundKey_fu_256->RoundKey_q0(RoundKey_q0);
    grp_SubBytes_fu_266 = new SubBytes("grp_SubBytes_fu_266");
    grp_SubBytes_fu_266->ap_clk(ap_clk);
    grp_SubBytes_fu_266->ap_rst(ap_rst);
    grp_SubBytes_fu_266->ap_start(grp_SubBytes_fu_266_ap_start);
    grp_SubBytes_fu_266->ap_done(grp_SubBytes_fu_266_ap_done);
    grp_SubBytes_fu_266->ap_idle(grp_SubBytes_fu_266_ap_idle);
    grp_SubBytes_fu_266->ap_ready(grp_SubBytes_fu_266_ap_ready);
    grp_SubBytes_fu_266->state_address0(grp_SubBytes_fu_266_state_address0);
    grp_SubBytes_fu_266->state_ce0(grp_SubBytes_fu_266_state_ce0);
    grp_SubBytes_fu_266->state_we0(grp_SubBytes_fu_266_state_we0);
    grp_SubBytes_fu_266->state_d0(grp_SubBytes_fu_266_state_d0);
    grp_SubBytes_fu_266->state_q0(state_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Key_address0);
    sensitive << ( grp_KeyExpansion_fu_244_Key_address0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Key_address1);
    sensitive << ( grp_KeyExpansion_fu_244_Key_address1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Key_ce0);
    sensitive << ( grp_KeyExpansion_fu_244_Key_ce0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Key_ce1);
    sensitive << ( grp_KeyExpansion_fu_244_Key_ce1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_RoundKey_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_KeyExpansion_fu_244_RoundKey_address0 );
    sensitive << ( grp_AddRoundKey_fu_256_RoundKey_address0 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_RoundKey_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_KeyExpansion_fu_244_RoundKey_ce0 );
    sensitive << ( grp_AddRoundKey_fu_256_RoundKey_ce0 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_RoundKey_ce1);
    sensitive << ( grp_KeyExpansion_fu_244_RoundKey_ce1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_RoundKey_we0);
    sensitive << ( grp_KeyExpansion_fu_244_RoundKey_we0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_RoundKey_we1);
    sensitive << ( grp_KeyExpansion_fu_244_RoundKey_we1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Tm_1_fu_490_p2);
    sensitive << ( tmp_31_reg_798 );
    sensitive << ( tmp_32_fu_421_p1 );

    SC_METHOD(thread_Tm_2_fu_540_p2);
    sensitive << ( tmp_33_fu_429_p1 );
    sensitive << ( tmp_32_fu_421_p1 );

    SC_METHOD(thread_Tm_3_fu_590_p2);
    sensitive << ( t_reg_792 );
    sensitive << ( tmp_33_fu_429_p1 );

    SC_METHOD(thread_Tm_fu_425_p2);
    sensitive << ( t_reg_792 );
    sensitive << ( tmp_31_reg_798 );

    SC_METHOD(thread_Tmp_fu_439_p2);
    sensitive << ( tmp_fu_433_p2 );
    sensitive << ( tmp_32_fu_421_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state27);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state28);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state29);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state30);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state31);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state32);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( grp_AddRoundKey_fu_256_ap_done );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( grp_AddRoundKey_fu_256_ap_done );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_exitcond_fu_308_p2);
    sensitive << ( round_reg_221 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_exitcond_i_fu_390_p2);
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( i_i_reg_233 );

    SC_METHOD(thread_grp_AddRoundKey_fu_256_ap_start);
    sensitive << ( ap_reg_grp_AddRoundKey_fu_256_ap_start );

    SC_METHOD(thread_grp_AddRoundKey_fu_256_round);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( round_cast6_cast_reg_782 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state38 );

    SC_METHOD(thread_grp_KeyExpansion_fu_244_ap_start);
    sensitive << ( ap_reg_grp_KeyExpansion_fu_244_ap_start );

    SC_METHOD(thread_grp_SubBytes_fu_266_ap_start);
    sensitive << ( ap_reg_grp_SubBytes_fu_266_ap_start );

    SC_METHOD(thread_i_fu_396_p2);
    sensitive << ( i_i_reg_233 );

    SC_METHOD(thread_i_i_cast5_cast1_fu_351_p1);
    sensitive << ( i_i_reg_233 );

    SC_METHOD(thread_i_i_cast5_cast_fu_355_p1);
    sensitive << ( i_i_reg_233 );

    SC_METHOD(thread_i_i_cast5_fu_346_p1);
    sensitive << ( i_i_reg_233 );

    SC_METHOD(thread_round_1_fu_407_p2);
    sensitive << ( round_reg_221 );

    SC_METHOD(thread_round_cast6_cast_fu_402_p1);
    sensitive << ( round_reg_221 );

    SC_METHOD(thread_state_address0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( state_addr_12_reg_754 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( state_addr_14_reg_764 );
    sensitive << ( exitcond_i_fu_390_p2 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_AddRoundKey_fu_256_state_address0 );
    sensitive << ( grp_SubBytes_fu_266_state_address0 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( i_i_cast5_fu_346_p1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_state_address1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( state_addr_13_reg_759 );
    sensitive << ( state_addr_15_reg_769 );
    sensitive << ( exitcond_i_fu_390_p2 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( tmp_19_cast_fu_365_p1 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( exitcond_i_fu_390_p2 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_AddRoundKey_fu_256_state_ce0 );
    sensitive << ( grp_SubBytes_fu_266_state_ce0 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state27 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state28 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state29 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state30 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( exitcond_i_fu_390_p2 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_state_d0);
    sensitive << ( reg_274 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( reg_281 );
    sensitive << ( reg_288 );
    sensitive << ( reg_293 );
    sensitive << ( reg_298 );
    sensitive << ( reg_303 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_20_i_reg_804 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_AddRoundKey_fu_256_state_d0 );
    sensitive << ( grp_SubBytes_fu_266_state_d0 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( tmp_2_i6_fu_483_p2 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_state_d1);
    sensitive << ( reg_274 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( reg_281 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( tmp_27_i_reg_809 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_i_fu_330_p1 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( tmp_2_i_fu_334_p1 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( tmp_3_i_fu_338_p1 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( tmp_4_i_fu_342_p1 );
    sensitive << ( tmp_13_i_fu_533_p2 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( tmp_i1_fu_655_p1 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( tmp_2_i1_fu_659_p1 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( tmp_3_i1_fu_663_p1 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( tmp_4_i1_fu_667_p1 );

    SC_METHOD(thread_state_we0);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( grp_AddRoundKey_fu_256_state_we0 );
    sensitive << ( grp_SubBytes_fu_266_state_we0 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_state_we1);
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state31 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state32 );
    sensitive << ( ap_CS_fsm_state33 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );

    SC_METHOD(thread_t_fu_413_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_temp_1_fu_643_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_temp_2_fu_647_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_temp_3_fu_651_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_temp_4_fu_314_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_temp_5_fu_318_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_temp_6_fu_322_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_temp_7_fu_326_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_temp_fu_639_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_tmp1_fu_467_p2);
    sensitive << ( tmp_34_fu_445_p2 );
    sensitive << ( Tmp_fu_439_p2 );

    SC_METHOD(thread_tmp2_fu_517_p2);
    sensitive << ( Tmp_fu_439_p2 );
    sensitive << ( tmp_36_fu_495_p2 );

    SC_METHOD(thread_tmp3_fu_568_p2);
    sensitive << ( Tmp_fu_439_p2 );
    sensitive << ( tmp_16_i_cast_cast_fu_560_p3 );

    SC_METHOD(thread_tmp4_fu_617_p2);
    sensitive << ( Tmp_fu_439_p2 );
    sensitive << ( tmp_23_i_cast_cast_fu_609_p3 );

    SC_METHOD(thread_tmp_11_i_fu_523_p2);
    sensitive << ( tmp2_fu_517_p2 );
    sensitive << ( tmp_5_i_cast_cast_fu_509_p3 );

    SC_METHOD(thread_tmp_12_i_fu_529_p1);
    sensitive << ( tmp_11_i_fu_523_p2 );

    SC_METHOD(thread_tmp_13_i_fu_533_p2);
    sensitive << ( reg_281 );
    sensitive << ( tmp_12_i_fu_529_p1 );

    SC_METHOD(thread_tmp_16_i_cast_cast_fu_560_p3);
    sensitive << ( tmp_39_fu_552_p3 );

    SC_METHOD(thread_tmp_17_fu_370_p3);
    sensitive << ( i_i_reg_233 );

    SC_METHOD(thread_tmp_18_fu_379_p2);
    sensitive << ( i_i_cast5_cast1_fu_351_p1 );

    SC_METHOD(thread_tmp_18_i_fu_574_p2);
    sensitive << ( tmp3_fu_568_p2 );
    sensitive << ( tmp_38_fu_546_p2 );

    SC_METHOD(thread_tmp_19_cast_fu_365_p1);
    sensitive << ( tmp_s_fu_359_p2 );

    SC_METHOD(thread_tmp_19_i_fu_580_p1);
    sensitive << ( tmp_18_i_fu_574_p2 );

    SC_METHOD(thread_tmp_1_i_fu_479_p1);
    sensitive << ( tmp_i_37_fu_473_p2 );

    SC_METHOD(thread_tmp_20_i_fu_584_p2);
    sensitive << ( state_q0 );
    sensitive << ( tmp_19_i_fu_580_p1 );

    SC_METHOD(thread_tmp_21_cast_fu_385_p1);
    sensitive << ( tmp_18_fu_379_p2 );

    SC_METHOD(thread_tmp_23_i_cast_cast_fu_609_p3);
    sensitive << ( tmp_41_fu_601_p3 );

    SC_METHOD(thread_tmp_25_i_fu_623_p2);
    sensitive << ( tmp4_fu_617_p2 );
    sensitive << ( tmp_40_fu_595_p2 );

    SC_METHOD(thread_tmp_26_i_fu_629_p1);
    sensitive << ( tmp_25_i_fu_623_p2 );

    SC_METHOD(thread_tmp_27_i_fu_633_p2);
    sensitive << ( state_q1 );
    sensitive << ( tmp_26_i_fu_629_p1 );

    SC_METHOD(thread_tmp_2_i1_fu_659_p1);
    sensitive << ( temp_1_reg_819 );

    SC_METHOD(thread_tmp_2_i6_fu_483_p2);
    sensitive << ( reg_274 );
    sensitive << ( tmp_1_i_fu_479_p1 );

    SC_METHOD(thread_tmp_2_i_fu_334_p1);
    sensitive << ( temp_5_reg_739 );

    SC_METHOD(thread_tmp_31_fu_417_p1);
    sensitive << ( state_q1 );

    SC_METHOD(thread_tmp_32_fu_421_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_tmp_33_fu_429_p1);
    sensitive << ( state_q1 );

    SC_METHOD(thread_tmp_34_fu_445_p2);
    sensitive << ( Tm_fu_425_p2 );

    SC_METHOD(thread_tmp_35_fu_451_p3);
    sensitive << ( Tm_fu_425_p2 );

    SC_METHOD(thread_tmp_36_fu_495_p2);
    sensitive << ( Tm_1_fu_490_p2 );

    SC_METHOD(thread_tmp_37_fu_501_p3);
    sensitive << ( Tm_1_fu_490_p2 );

    SC_METHOD(thread_tmp_38_fu_546_p2);
    sensitive << ( Tm_2_fu_540_p2 );

    SC_METHOD(thread_tmp_39_fu_552_p3);
    sensitive << ( Tm_2_fu_540_p2 );

    SC_METHOD(thread_tmp_3_i1_fu_663_p1);
    sensitive << ( temp_2_reg_824 );

    SC_METHOD(thread_tmp_3_i_fu_338_p1);
    sensitive << ( temp_6_reg_744 );

    SC_METHOD(thread_tmp_40_fu_595_p2);
    sensitive << ( Tm_3_fu_590_p2 );

    SC_METHOD(thread_tmp_41_fu_601_p3);
    sensitive << ( Tm_3_fu_590_p2 );

    SC_METHOD(thread_tmp_4_i1_fu_667_p1);
    sensitive << ( temp_3_reg_829 );

    SC_METHOD(thread_tmp_4_i_fu_342_p1);
    sensitive << ( temp_7_reg_749 );

    SC_METHOD(thread_tmp_5_i_cast_cast_fu_509_p3);
    sensitive << ( tmp_37_fu_501_p3 );

    SC_METHOD(thread_tmp_9_i_cast_cast_fu_459_p3);
    sensitive << ( tmp_35_fu_451_p3 );

    SC_METHOD(thread_tmp_fu_433_p2);
    sensitive << ( Tm_fu_425_p2 );
    sensitive << ( tmp_33_fu_429_p1 );

    SC_METHOD(thread_tmp_i1_fu_655_p1);
    sensitive << ( temp_reg_814 );

    SC_METHOD(thread_tmp_i_37_fu_473_p2);
    sensitive << ( tmp1_fu_467_p2 );
    sensitive << ( tmp_9_i_cast_cast_fu_459_p3 );

    SC_METHOD(thread_tmp_i_fu_330_p1);
    sensitive << ( temp_4_reg_734 );

    SC_METHOD(thread_tmp_s_fu_359_p2);
    sensitive << ( i_i_cast5_cast_fu_355_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( grp_AddRoundKey_fu_256_ap_done );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( exitcond_i_fu_390_p2 );
    sensitive << ( grp_KeyExpansion_fu_244_ap_done );
    sensitive << ( grp_SubBytes_fu_266_ap_done );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond_fu_308_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state24 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "00000000000000000000000000000000000001";
    ap_reg_grp_KeyExpansion_fu_244_ap_start = SC_LOGIC_0;
    ap_reg_grp_AddRoundKey_fu_256_ap_start = SC_LOGIC_0;
    ap_reg_grp_SubBytes_fu_266_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Cipher_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
    sc_trace(mVcdFile, state_address1, "(port)state_address1");
    sc_trace(mVcdFile, state_ce1, "(port)state_ce1");
    sc_trace(mVcdFile, state_we1, "(port)state_we1");
    sc_trace(mVcdFile, state_d1, "(port)state_d1");
    sc_trace(mVcdFile, state_q1, "(port)state_q1");
    sc_trace(mVcdFile, Key_address0, "(port)Key_address0");
    sc_trace(mVcdFile, Key_ce0, "(port)Key_ce0");
    sc_trace(mVcdFile, Key_q0, "(port)Key_q0");
    sc_trace(mVcdFile, Key_address1, "(port)Key_address1");
    sc_trace(mVcdFile, Key_ce1, "(port)Key_ce1");
    sc_trace(mVcdFile, Key_q1, "(port)Key_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, reg_274, "reg_274");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, ap_CS_fsm_state31, "ap_CS_fsm_state31");
    sc_trace(mVcdFile, reg_281, "reg_281");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state27, "ap_CS_fsm_state27");
    sc_trace(mVcdFile, reg_288, "reg_288");
    sc_trace(mVcdFile, reg_293, "reg_293");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_CS_fsm_state28, "ap_CS_fsm_state28");
    sc_trace(mVcdFile, reg_298, "reg_298");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state29, "ap_CS_fsm_state29");
    sc_trace(mVcdFile, reg_303, "reg_303");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, ap_CS_fsm_state30, "ap_CS_fsm_state30");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_256_ap_done, "grp_AddRoundKey_fu_256_ap_done");
    sc_trace(mVcdFile, temp_4_fu_314_p1, "temp_4_fu_314_p1");
    sc_trace(mVcdFile, temp_4_reg_734, "temp_4_reg_734");
    sc_trace(mVcdFile, temp_5_fu_318_p1, "temp_5_fu_318_p1");
    sc_trace(mVcdFile, temp_5_reg_739, "temp_5_reg_739");
    sc_trace(mVcdFile, temp_6_fu_322_p1, "temp_6_fu_322_p1");
    sc_trace(mVcdFile, temp_6_reg_744, "temp_6_reg_744");
    sc_trace(mVcdFile, temp_7_fu_326_p1, "temp_7_fu_326_p1");
    sc_trace(mVcdFile, temp_7_reg_749, "temp_7_reg_749");
    sc_trace(mVcdFile, state_addr_12_reg_754, "state_addr_12_reg_754");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, state_addr_13_reg_759, "state_addr_13_reg_759");
    sc_trace(mVcdFile, state_addr_14_reg_764, "state_addr_14_reg_764");
    sc_trace(mVcdFile, state_addr_15_reg_769, "state_addr_15_reg_769");
    sc_trace(mVcdFile, i_fu_396_p2, "i_fu_396_p2");
    sc_trace(mVcdFile, i_reg_777, "i_reg_777");
    sc_trace(mVcdFile, round_cast6_cast_fu_402_p1, "round_cast6_cast_fu_402_p1");
    sc_trace(mVcdFile, round_cast6_cast_reg_782, "round_cast6_cast_reg_782");
    sc_trace(mVcdFile, exitcond_i_fu_390_p2, "exitcond_i_fu_390_p2");
    sc_trace(mVcdFile, round_1_fu_407_p2, "round_1_fu_407_p2");
    sc_trace(mVcdFile, round_1_reg_787, "round_1_reg_787");
    sc_trace(mVcdFile, t_fu_413_p1, "t_fu_413_p1");
    sc_trace(mVcdFile, t_reg_792, "t_reg_792");
    sc_trace(mVcdFile, tmp_31_fu_417_p1, "tmp_31_fu_417_p1");
    sc_trace(mVcdFile, tmp_31_reg_798, "tmp_31_reg_798");
    sc_trace(mVcdFile, tmp_20_i_fu_584_p2, "tmp_20_i_fu_584_p2");
    sc_trace(mVcdFile, tmp_20_i_reg_804, "tmp_20_i_reg_804");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, tmp_27_i_fu_633_p2, "tmp_27_i_fu_633_p2");
    sc_trace(mVcdFile, tmp_27_i_reg_809, "tmp_27_i_reg_809");
    sc_trace(mVcdFile, temp_fu_639_p1, "temp_fu_639_p1");
    sc_trace(mVcdFile, temp_reg_814, "temp_reg_814");
    sc_trace(mVcdFile, temp_1_fu_643_p1, "temp_1_fu_643_p1");
    sc_trace(mVcdFile, temp_1_reg_819, "temp_1_reg_819");
    sc_trace(mVcdFile, temp_2_fu_647_p1, "temp_2_fu_647_p1");
    sc_trace(mVcdFile, temp_2_reg_824, "temp_2_reg_824");
    sc_trace(mVcdFile, temp_3_fu_651_p1, "temp_3_fu_651_p1");
    sc_trace(mVcdFile, temp_3_reg_829, "temp_3_reg_829");
    sc_trace(mVcdFile, RoundKey_address0, "RoundKey_address0");
    sc_trace(mVcdFile, RoundKey_ce0, "RoundKey_ce0");
    sc_trace(mVcdFile, RoundKey_we0, "RoundKey_we0");
    sc_trace(mVcdFile, RoundKey_q0, "RoundKey_q0");
    sc_trace(mVcdFile, RoundKey_ce1, "RoundKey_ce1");
    sc_trace(mVcdFile, RoundKey_we1, "RoundKey_we1");
    sc_trace(mVcdFile, RoundKey_q1, "RoundKey_q1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_244_ap_start, "grp_KeyExpansion_fu_244_ap_start");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_244_ap_done, "grp_KeyExpansion_fu_244_ap_done");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_244_ap_idle, "grp_KeyExpansion_fu_244_ap_idle");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_244_ap_ready, "grp_KeyExpansion_fu_244_ap_ready");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_244_RoundKey_address0, "grp_KeyExpansion_fu_244_RoundKey_address0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_244_RoundKey_ce0, "grp_KeyExpansion_fu_244_RoundKey_ce0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_244_RoundKey_we0, "grp_KeyExpansion_fu_244_RoundKey_we0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_244_RoundKey_d0, "grp_KeyExpansion_fu_244_RoundKey_d0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_244_RoundKey_address1, "grp_KeyExpansion_fu_244_RoundKey_address1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_244_RoundKey_ce1, "grp_KeyExpansion_fu_244_RoundKey_ce1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_244_RoundKey_we1, "grp_KeyExpansion_fu_244_RoundKey_we1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_244_RoundKey_d1, "grp_KeyExpansion_fu_244_RoundKey_d1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_244_Key_address0, "grp_KeyExpansion_fu_244_Key_address0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_244_Key_ce0, "grp_KeyExpansion_fu_244_Key_ce0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_244_Key_address1, "grp_KeyExpansion_fu_244_Key_address1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_244_Key_ce1, "grp_KeyExpansion_fu_244_Key_ce1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_256_ap_start, "grp_AddRoundKey_fu_256_ap_start");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_256_ap_idle, "grp_AddRoundKey_fu_256_ap_idle");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_256_ap_ready, "grp_AddRoundKey_fu_256_ap_ready");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_256_round, "grp_AddRoundKey_fu_256_round");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_256_state_address0, "grp_AddRoundKey_fu_256_state_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_256_state_ce0, "grp_AddRoundKey_fu_256_state_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_256_state_we0, "grp_AddRoundKey_fu_256_state_we0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_256_state_d0, "grp_AddRoundKey_fu_256_state_d0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_256_RoundKey_address0, "grp_AddRoundKey_fu_256_RoundKey_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_256_RoundKey_ce0, "grp_AddRoundKey_fu_256_RoundKey_ce0");
    sc_trace(mVcdFile, grp_SubBytes_fu_266_ap_start, "grp_SubBytes_fu_266_ap_start");
    sc_trace(mVcdFile, grp_SubBytes_fu_266_ap_done, "grp_SubBytes_fu_266_ap_done");
    sc_trace(mVcdFile, grp_SubBytes_fu_266_ap_idle, "grp_SubBytes_fu_266_ap_idle");
    sc_trace(mVcdFile, grp_SubBytes_fu_266_ap_ready, "grp_SubBytes_fu_266_ap_ready");
    sc_trace(mVcdFile, grp_SubBytes_fu_266_state_address0, "grp_SubBytes_fu_266_state_address0");
    sc_trace(mVcdFile, grp_SubBytes_fu_266_state_ce0, "grp_SubBytes_fu_266_state_ce0");
    sc_trace(mVcdFile, grp_SubBytes_fu_266_state_we0, "grp_SubBytes_fu_266_state_we0");
    sc_trace(mVcdFile, grp_SubBytes_fu_266_state_d0, "grp_SubBytes_fu_266_state_d0");
    sc_trace(mVcdFile, round_reg_221, "round_reg_221");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, i_i_reg_233, "i_i_reg_233");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_reg_grp_KeyExpansion_fu_244_ap_start, "ap_reg_grp_KeyExpansion_fu_244_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_reg_grp_AddRoundKey_fu_256_ap_start, "ap_reg_grp_AddRoundKey_fu_256_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, ap_reg_grp_SubBytes_fu_266_ap_start, "ap_reg_grp_SubBytes_fu_266_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exitcond_fu_308_p2, "exitcond_fu_308_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, i_i_cast5_fu_346_p1, "i_i_cast5_fu_346_p1");
    sc_trace(mVcdFile, tmp_19_cast_fu_365_p1, "tmp_19_cast_fu_365_p1");
    sc_trace(mVcdFile, tmp_17_fu_370_p3, "tmp_17_fu_370_p3");
    sc_trace(mVcdFile, tmp_21_cast_fu_385_p1, "tmp_21_cast_fu_385_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, tmp_i_fu_330_p1, "tmp_i_fu_330_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, tmp_2_i_fu_334_p1, "tmp_2_i_fu_334_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, tmp_3_i_fu_338_p1, "tmp_3_i_fu_338_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, tmp_4_i_fu_342_p1, "tmp_4_i_fu_342_p1");
    sc_trace(mVcdFile, tmp_2_i6_fu_483_p2, "tmp_2_i6_fu_483_p2");
    sc_trace(mVcdFile, tmp_13_i_fu_533_p2, "tmp_13_i_fu_533_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_CS_fsm_state32, "ap_CS_fsm_state32");
    sc_trace(mVcdFile, tmp_i1_fu_655_p1, "tmp_i1_fu_655_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, tmp_2_i1_fu_659_p1, "tmp_2_i1_fu_659_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, tmp_3_i1_fu_663_p1, "tmp_3_i1_fu_663_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, tmp_4_i1_fu_667_p1, "tmp_4_i1_fu_667_p1");
    sc_trace(mVcdFile, i_i_cast5_cast_fu_355_p1, "i_i_cast5_cast_fu_355_p1");
    sc_trace(mVcdFile, tmp_s_fu_359_p2, "tmp_s_fu_359_p2");
    sc_trace(mVcdFile, i_i_cast5_cast1_fu_351_p1, "i_i_cast5_cast1_fu_351_p1");
    sc_trace(mVcdFile, tmp_18_fu_379_p2, "tmp_18_fu_379_p2");
    sc_trace(mVcdFile, Tm_fu_425_p2, "Tm_fu_425_p2");
    sc_trace(mVcdFile, tmp_33_fu_429_p1, "tmp_33_fu_429_p1");
    sc_trace(mVcdFile, tmp_fu_433_p2, "tmp_fu_433_p2");
    sc_trace(mVcdFile, tmp_32_fu_421_p1, "tmp_32_fu_421_p1");
    sc_trace(mVcdFile, tmp_35_fu_451_p3, "tmp_35_fu_451_p3");
    sc_trace(mVcdFile, tmp_34_fu_445_p2, "tmp_34_fu_445_p2");
    sc_trace(mVcdFile, Tmp_fu_439_p2, "Tmp_fu_439_p2");
    sc_trace(mVcdFile, tmp1_fu_467_p2, "tmp1_fu_467_p2");
    sc_trace(mVcdFile, tmp_9_i_cast_cast_fu_459_p3, "tmp_9_i_cast_cast_fu_459_p3");
    sc_trace(mVcdFile, tmp_i_37_fu_473_p2, "tmp_i_37_fu_473_p2");
    sc_trace(mVcdFile, tmp_1_i_fu_479_p1, "tmp_1_i_fu_479_p1");
    sc_trace(mVcdFile, Tm_1_fu_490_p2, "Tm_1_fu_490_p2");
    sc_trace(mVcdFile, tmp_37_fu_501_p3, "tmp_37_fu_501_p3");
    sc_trace(mVcdFile, tmp_36_fu_495_p2, "tmp_36_fu_495_p2");
    sc_trace(mVcdFile, tmp2_fu_517_p2, "tmp2_fu_517_p2");
    sc_trace(mVcdFile, tmp_5_i_cast_cast_fu_509_p3, "tmp_5_i_cast_cast_fu_509_p3");
    sc_trace(mVcdFile, tmp_11_i_fu_523_p2, "tmp_11_i_fu_523_p2");
    sc_trace(mVcdFile, tmp_12_i_fu_529_p1, "tmp_12_i_fu_529_p1");
    sc_trace(mVcdFile, Tm_2_fu_540_p2, "Tm_2_fu_540_p2");
    sc_trace(mVcdFile, tmp_39_fu_552_p3, "tmp_39_fu_552_p3");
    sc_trace(mVcdFile, tmp_16_i_cast_cast_fu_560_p3, "tmp_16_i_cast_cast_fu_560_p3");
    sc_trace(mVcdFile, tmp3_fu_568_p2, "tmp3_fu_568_p2");
    sc_trace(mVcdFile, tmp_38_fu_546_p2, "tmp_38_fu_546_p2");
    sc_trace(mVcdFile, tmp_18_i_fu_574_p2, "tmp_18_i_fu_574_p2");
    sc_trace(mVcdFile, tmp_19_i_fu_580_p1, "tmp_19_i_fu_580_p1");
    sc_trace(mVcdFile, Tm_3_fu_590_p2, "Tm_3_fu_590_p2");
    sc_trace(mVcdFile, tmp_41_fu_601_p3, "tmp_41_fu_601_p3");
    sc_trace(mVcdFile, tmp_23_i_cast_cast_fu_609_p3, "tmp_23_i_cast_cast_fu_609_p3");
    sc_trace(mVcdFile, tmp4_fu_617_p2, "tmp4_fu_617_p2");
    sc_trace(mVcdFile, tmp_40_fu_595_p2, "tmp_40_fu_595_p2");
    sc_trace(mVcdFile, tmp_25_i_fu_623_p2, "tmp_25_i_fu_623_p2");
    sc_trace(mVcdFile, tmp_26_i_fu_629_p1, "tmp_26_i_fu_629_p1");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("Cipher.hdltvin.dat");
    mHdltvoutHandle.open("Cipher.hdltvout.dat");
}

Cipher::~Cipher() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete RoundKey_U;
    delete grp_KeyExpansion_fu_244;
    delete grp_AddRoundKey_fu_256;
    delete grp_SubBytes_fu_266;
}

void Cipher::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_AddRoundKey_fu_256_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
              esl_seteq<1,1,1>(exitcond_i_fu_390_p2.read(), ap_const_lv1_1)) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()))) {
            ap_reg_grp_AddRoundKey_fu_256_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AddRoundKey_fu_256_ap_ready.read())) {
            ap_reg_grp_AddRoundKey_fu_256_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_KeyExpansion_fu_244_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_reg_grp_KeyExpansion_fu_244_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_KeyExpansion_fu_244_ap_ready.read())) {
            ap_reg_grp_KeyExpansion_fu_244_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_SubBytes_fu_266_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
              esl_seteq<1,1,1>(exitcond_fu_308_p2.read(), ap_const_lv1_0)) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_308_p2.read())))) {
            ap_reg_grp_SubBytes_fu_266_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_SubBytes_fu_266_ap_ready.read())) {
            ap_reg_grp_SubBytes_fu_266_ap_start = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        i_i_reg_233 = i_reg_777.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        i_i_reg_233 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        reg_274 = state_q0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        reg_274 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        reg_281 = state_q1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        reg_281 = state_q0.read();
    }
    if (esl_seteq<1,1,1>(grp_AddRoundKey_fu_256_ap_done.read(), ap_const_logic_1)) {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
            round_reg_221 = round_1_reg_787.read();
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
            round_reg_221 = ap_const_lv4_1;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        i_reg_777 = i_fu_396_p2.read();
        state_addr_12_reg_754 =  (sc_lv<4>) (i_i_cast5_fu_346_p1.read());
        state_addr_13_reg_759 =  (sc_lv<4>) (tmp_19_cast_fu_365_p1.read());
        state_addr_14_reg_764 =  (sc_lv<4>) (tmp_17_fu_370_p3.read());
        state_addr_15_reg_769 =  (sc_lv<4>) (tmp_21_cast_fu_385_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()))) {
        reg_288 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()))) {
        reg_293 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()))) {
        reg_298 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()))) {
        reg_303 = state_q1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(exitcond_i_fu_390_p2.read(), ap_const_lv1_1))) {
        round_1_reg_787 = round_1_fu_407_p2.read();
        round_cast6_cast_reg_782 = round_cast6_cast_fu_402_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        t_reg_792 = t_fu_413_p1.read();
        tmp_31_reg_798 = tmp_31_fu_417_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read())) {
        temp_1_reg_819 = temp_1_fu_643_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read())) {
        temp_2_reg_824 = temp_2_fu_647_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read())) {
        temp_3_reg_829 = temp_3_fu_651_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        temp_4_reg_734 = temp_4_fu_314_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        temp_5_reg_739 = temp_5_fu_318_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        temp_6_reg_744 = temp_6_fu_322_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        temp_7_reg_749 = temp_7_fu_326_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        temp_reg_814 = temp_fu_639_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        tmp_20_i_reg_804 = tmp_20_i_fu_584_p2.read();
        tmp_27_i_reg_809 = tmp_27_i_fu_633_p2.read();
    }
}

void Cipher::thread_Key_address0() {
    Key_address0 = grp_KeyExpansion_fu_244_Key_address0.read();
}

void Cipher::thread_Key_address1() {
    Key_address1 = grp_KeyExpansion_fu_244_Key_address1.read();
}

void Cipher::thread_Key_ce0() {
    Key_ce0 = grp_KeyExpansion_fu_244_Key_ce0.read();
}

void Cipher::thread_Key_ce1() {
    Key_ce1 = grp_KeyExpansion_fu_244_Key_ce1.read();
}

void Cipher::thread_RoundKey_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()))) {
        RoundKey_address0 = grp_AddRoundKey_fu_256_RoundKey_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_address0 = grp_KeyExpansion_fu_244_RoundKey_address0.read();
    } else {
        RoundKey_address0 = "XXXXXXXX";
    }
}

void Cipher::thread_RoundKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()))) {
        RoundKey_ce0 = grp_AddRoundKey_fu_256_RoundKey_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_ce0 = grp_KeyExpansion_fu_244_RoundKey_ce0.read();
    } else {
        RoundKey_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_ce1 = grp_KeyExpansion_fu_244_RoundKey_ce1.read();
    } else {
        RoundKey_ce1 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_we0 = grp_KeyExpansion_fu_244_RoundKey_we0.read();
    } else {
        RoundKey_we0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_we1 = grp_KeyExpansion_fu_244_RoundKey_we1.read();
    } else {
        RoundKey_we1 = ap_const_logic_0;
    }
}

void Cipher::thread_Tm_1_fu_490_p2() {
    Tm_1_fu_490_p2 = (tmp_32_fu_421_p1.read() ^ tmp_31_reg_798.read());
}

void Cipher::thread_Tm_2_fu_540_p2() {
    Tm_2_fu_540_p2 = (tmp_33_fu_429_p1.read() ^ tmp_32_fu_421_p1.read());
}

void Cipher::thread_Tm_3_fu_590_p2() {
    Tm_3_fu_590_p2 = (tmp_33_fu_429_p1.read() ^ t_reg_792.read());
}

void Cipher::thread_Tm_fu_425_p2() {
    Tm_fu_425_p2 = (tmp_31_reg_798.read() ^ t_reg_792.read());
}

void Cipher::thread_Tmp_fu_439_p2() {
    Tmp_fu_439_p2 = (tmp_fu_433_p2.read() ^ tmp_32_fu_421_p1.read());
}

void Cipher::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Cipher::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void Cipher::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void Cipher::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void Cipher::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void Cipher::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void Cipher::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void Cipher::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void Cipher::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void Cipher::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void Cipher::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void Cipher::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Cipher::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void Cipher::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[20];
}

void Cipher::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[21];
}

void Cipher::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[22];
}

void Cipher::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[23];
}

void Cipher::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[24];
}

void Cipher::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[25];
}

void Cipher::thread_ap_CS_fsm_state27() {
    ap_CS_fsm_state27 = ap_CS_fsm.read()[26];
}

void Cipher::thread_ap_CS_fsm_state28() {
    ap_CS_fsm_state28 = ap_CS_fsm.read()[27];
}

void Cipher::thread_ap_CS_fsm_state29() {
    ap_CS_fsm_state29 = ap_CS_fsm.read()[28];
}

void Cipher::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Cipher::thread_ap_CS_fsm_state30() {
    ap_CS_fsm_state30 = ap_CS_fsm.read()[29];
}

void Cipher::thread_ap_CS_fsm_state31() {
    ap_CS_fsm_state31 = ap_CS_fsm.read()[30];
}

void Cipher::thread_ap_CS_fsm_state32() {
    ap_CS_fsm_state32 = ap_CS_fsm.read()[31];
}

void Cipher::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void Cipher::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void Cipher::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void Cipher::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void Cipher::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void Cipher::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void Cipher::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Cipher::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Cipher::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void Cipher::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void Cipher::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void Cipher::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void Cipher::thread_ap_done() {
    if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_256_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Cipher::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Cipher::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_256_ap_done.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Cipher::thread_exitcond_fu_308_p2() {
    exitcond_fu_308_p2 = (!round_reg_221.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(round_reg_221.read() == ap_const_lv4_A);
}

void Cipher::thread_exitcond_i_fu_390_p2() {
    exitcond_i_fu_390_p2 = (!i_i_reg_233.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_233.read() == ap_const_lv3_4);
}

void Cipher::thread_grp_AddRoundKey_fu_256_ap_start() {
    grp_AddRoundKey_fu_256_ap_start = ap_reg_grp_AddRoundKey_fu_256_ap_start.read();
}

void Cipher::thread_grp_AddRoundKey_fu_256_round() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        grp_AddRoundKey_fu_256_round = ap_const_lv6_A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read())) {
        grp_AddRoundKey_fu_256_round = round_cast6_cast_reg_782.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_AddRoundKey_fu_256_round = ap_const_lv6_0;
    } else {
        grp_AddRoundKey_fu_256_round =  (sc_lv<6>) ("XXXXXX");
    }
}

void Cipher::thread_grp_KeyExpansion_fu_244_ap_start() {
    grp_KeyExpansion_fu_244_ap_start = ap_reg_grp_KeyExpansion_fu_244_ap_start.read();
}

void Cipher::thread_grp_SubBytes_fu_266_ap_start() {
    grp_SubBytes_fu_266_ap_start = ap_reg_grp_SubBytes_fu_266_ap_start.read();
}

void Cipher::thread_i_fu_396_p2() {
    i_fu_396_p2 = (!i_i_reg_233.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_i_reg_233.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void Cipher::thread_i_i_cast5_cast1_fu_351_p1() {
    i_i_cast5_cast1_fu_351_p1 = esl_zext<5,3>(i_i_reg_233.read());
}

void Cipher::thread_i_i_cast5_cast_fu_355_p1() {
    i_i_cast5_cast_fu_355_p1 = esl_zext<4,3>(i_i_reg_233.read());
}

void Cipher::thread_i_i_cast5_fu_346_p1() {
    i_i_cast5_fu_346_p1 = esl_zext<32,3>(i_i_reg_233.read());
}

void Cipher::thread_round_1_fu_407_p2() {
    round_1_fu_407_p2 = (!round_reg_221.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(round_reg_221.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void Cipher::thread_round_cast6_cast_fu_402_p1() {
    round_cast6_cast_fu_402_p1 = esl_zext<6,4>(round_reg_221.read());
}

void Cipher::thread_state_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        state_address0 = state_addr_12_reg_754.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        state_address0 = state_addr_14_reg_764.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
                esl_seteq<1,1,1>(exitcond_i_fu_390_p2.read(), ap_const_lv1_0))) {
        state_address0 =  (sc_lv<4>) (i_i_cast5_fu_346_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv32_E);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv32_C);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv32_9);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv32_8);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv32_6);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        state_address0 =  (sc_lv<4>) (ap_const_lv32_4);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        state_address0 = grp_SubBytes_fu_266_state_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()))) {
        state_address0 = grp_AddRoundKey_fu_256_state_address0.read();
    } else {
        state_address0 =  (sc_lv<4>) ("XXXX");
    }
}

void Cipher::thread_state_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        state_address1 = state_addr_13_reg_759.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()))) {
        state_address1 = state_addr_15_reg_769.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
                esl_seteq<1,1,1>(exitcond_i_fu_390_p2.read(), ap_const_lv1_0))) {
        state_address1 =  (sc_lv<4>) (tmp_19_cast_fu_365_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv32_D);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv32_F);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv32_B);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv32_A);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv32_7);
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        state_address1 =  (sc_lv<4>) (ap_const_lv32_5);
    } else {
        state_address1 =  (sc_lv<4>) ("XXXX");
    }
}

void Cipher::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(exitcond_i_fu_390_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()))) {
        state_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        state_ce0 = grp_SubBytes_fu_266_state_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()))) {
        state_ce0 = grp_AddRoundKey_fu_256_state_ce0.read();
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_state_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state27.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state28.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state29.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state30.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && 
          esl_seteq<1,1,1>(exitcond_i_fu_390_p2.read(), ap_const_lv1_0)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()))) {
        state_ce1 = ap_const_logic_1;
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void Cipher::thread_state_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        state_d0 = tmp_20_i_reg_804.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        state_d0 = tmp_2_i6_fu_483_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()))) {
        state_d0 = reg_281.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()))) {
        state_d0 = reg_303.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()))) {
        state_d0 = reg_298.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()))) {
        state_d0 = reg_293.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()))) {
        state_d0 = reg_288.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        state_d0 = reg_274.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        state_d0 = grp_SubBytes_fu_266_state_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()))) {
        state_d0 = grp_AddRoundKey_fu_256_state_d0.read();
    } else {
        state_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Cipher::thread_state_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read())) {
        state_d1 = tmp_4_i1_fu_667_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read())) {
        state_d1 = tmp_3_i1_fu_663_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        state_d1 = tmp_2_i1_fu_659_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read())) {
        state_d1 = tmp_i1_fu_655_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read())) {
        state_d1 = tmp_27_i_reg_809.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read())) {
        state_d1 = tmp_13_i_fu_533_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        state_d1 = tmp_4_i_fu_342_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()))) {
        state_d1 = reg_274.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        state_d1 = tmp_3_i_fu_338_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        state_d1 = tmp_2_i_fu_334_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        state_d1 = tmp_i_fu_330_p1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()))) {
        state_d1 = reg_281.read();
    } else {
        state_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Cipher::thread_state_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()))) {
        state_we0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()))) {
        state_we0 = grp_SubBytes_fu_266_state_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()))) {
        state_we0 = grp_AddRoundKey_fu_256_state_we0.read();
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void Cipher::thread_state_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state31.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state32.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()))) {
        state_we1 = ap_const_logic_1;
    } else {
        state_we1 = ap_const_logic_0;
    }
}

void Cipher::thread_t_fu_413_p1() {
    t_fu_413_p1 = state_q0.read().range(8-1, 0);
}

void Cipher::thread_temp_1_fu_643_p1() {
    temp_1_fu_643_p1 = state_q0.read().range(8-1, 0);
}

void Cipher::thread_temp_2_fu_647_p1() {
    temp_2_fu_647_p1 = state_q0.read().range(8-1, 0);
}

void Cipher::thread_temp_3_fu_651_p1() {
    temp_3_fu_651_p1 = state_q0.read().range(8-1, 0);
}

void Cipher::thread_temp_4_fu_314_p1() {
    temp_4_fu_314_p1 = state_q0.read().range(8-1, 0);
}

void Cipher::thread_temp_5_fu_318_p1() {
    temp_5_fu_318_p1 = state_q0.read().range(8-1, 0);
}

void Cipher::thread_temp_6_fu_322_p1() {
    temp_6_fu_322_p1 = state_q0.read().range(8-1, 0);
}

void Cipher::thread_temp_7_fu_326_p1() {
    temp_7_fu_326_p1 = state_q0.read().range(8-1, 0);
}

void Cipher::thread_temp_fu_639_p1() {
    temp_fu_639_p1 = state_q0.read().range(8-1, 0);
}

void Cipher::thread_tmp1_fu_467_p2() {
    tmp1_fu_467_p2 = (tmp_34_fu_445_p2.read() ^ Tmp_fu_439_p2.read());
}

void Cipher::thread_tmp2_fu_517_p2() {
    tmp2_fu_517_p2 = (tmp_36_fu_495_p2.read() ^ Tmp_fu_439_p2.read());
}

void Cipher::thread_tmp3_fu_568_p2() {
    tmp3_fu_568_p2 = (Tmp_fu_439_p2.read() ^ tmp_16_i_cast_cast_fu_560_p3.read());
}

void Cipher::thread_tmp4_fu_617_p2() {
    tmp4_fu_617_p2 = (Tmp_fu_439_p2.read() ^ tmp_23_i_cast_cast_fu_609_p3.read());
}

void Cipher::thread_tmp_11_i_fu_523_p2() {
    tmp_11_i_fu_523_p2 = (tmp2_fu_517_p2.read() ^ tmp_5_i_cast_cast_fu_509_p3.read());
}

void Cipher::thread_tmp_12_i_fu_529_p1() {
    tmp_12_i_fu_529_p1 = esl_zext<32,8>(tmp_11_i_fu_523_p2.read());
}

void Cipher::thread_tmp_13_i_fu_533_p2() {
    tmp_13_i_fu_533_p2 = (reg_281.read() ^ tmp_12_i_fu_529_p1.read());
}

void Cipher::thread_tmp_16_i_cast_cast_fu_560_p3() {
    tmp_16_i_cast_cast_fu_560_p3 = (!tmp_39_fu_552_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_39_fu_552_p3.read()[0].to_bool())? ap_const_lv8_1B: ap_const_lv8_0);
}

void Cipher::thread_tmp_17_fu_370_p3() {
    tmp_17_fu_370_p3 = esl_concat<29,3>(ap_const_lv29_1, i_i_reg_233.read());
}

void Cipher::thread_tmp_18_fu_379_p2() {
    tmp_18_fu_379_p2 = (!i_i_cast5_cast1_fu_351_p1.read().is_01() || !ap_const_lv5_C.is_01())? sc_lv<5>(): (sc_biguint<5>(i_i_cast5_cast1_fu_351_p1.read()) + sc_biguint<5>(ap_const_lv5_C));
}

void Cipher::thread_tmp_18_i_fu_574_p2() {
    tmp_18_i_fu_574_p2 = (tmp3_fu_568_p2.read() ^ tmp_38_fu_546_p2.read());
}

void Cipher::thread_tmp_19_cast_fu_365_p1() {
    tmp_19_cast_fu_365_p1 = esl_zext<32,4>(tmp_s_fu_359_p2.read());
}

void Cipher::thread_tmp_19_i_fu_580_p1() {
    tmp_19_i_fu_580_p1 = esl_zext<32,8>(tmp_18_i_fu_574_p2.read());
}

void Cipher::thread_tmp_1_i_fu_479_p1() {
    tmp_1_i_fu_479_p1 = esl_zext<32,8>(tmp_i_37_fu_473_p2.read());
}

void Cipher::thread_tmp_20_i_fu_584_p2() {
    tmp_20_i_fu_584_p2 = (state_q0.read() ^ tmp_19_i_fu_580_p1.read());
}

void Cipher::thread_tmp_21_cast_fu_385_p1() {
    tmp_21_cast_fu_385_p1 = esl_zext<32,5>(tmp_18_fu_379_p2.read());
}

void Cipher::thread_tmp_23_i_cast_cast_fu_609_p3() {
    tmp_23_i_cast_cast_fu_609_p3 = (!tmp_41_fu_601_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_41_fu_601_p3.read()[0].to_bool())? ap_const_lv8_1B: ap_const_lv8_0);
}

void Cipher::thread_tmp_25_i_fu_623_p2() {
    tmp_25_i_fu_623_p2 = (tmp4_fu_617_p2.read() ^ tmp_40_fu_595_p2.read());
}

void Cipher::thread_tmp_26_i_fu_629_p1() {
    tmp_26_i_fu_629_p1 = esl_zext<32,8>(tmp_25_i_fu_623_p2.read());
}

void Cipher::thread_tmp_27_i_fu_633_p2() {
    tmp_27_i_fu_633_p2 = (state_q1.read() ^ tmp_26_i_fu_629_p1.read());
}

void Cipher::thread_tmp_2_i1_fu_659_p1() {
    tmp_2_i1_fu_659_p1 = esl_zext<32,8>(temp_1_reg_819.read());
}

void Cipher::thread_tmp_2_i6_fu_483_p2() {
    tmp_2_i6_fu_483_p2 = (reg_274.read() ^ tmp_1_i_fu_479_p1.read());
}

void Cipher::thread_tmp_2_i_fu_334_p1() {
    tmp_2_i_fu_334_p1 = esl_zext<32,8>(temp_5_reg_739.read());
}

void Cipher::thread_tmp_31_fu_417_p1() {
    tmp_31_fu_417_p1 = state_q1.read().range(8-1, 0);
}

void Cipher::thread_tmp_32_fu_421_p1() {
    tmp_32_fu_421_p1 = state_q0.read().range(8-1, 0);
}

void Cipher::thread_tmp_33_fu_429_p1() {
    tmp_33_fu_429_p1 = state_q1.read().range(8-1, 0);
}

void Cipher::thread_tmp_34_fu_445_p2() {
    tmp_34_fu_445_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): Tm_fu_425_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void Cipher::thread_tmp_35_fu_451_p3() {
    tmp_35_fu_451_p3 = Tm_fu_425_p2.read().range(7, 7);
}

void Cipher::thread_tmp_36_fu_495_p2() {
    tmp_36_fu_495_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): Tm_1_fu_490_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void Cipher::thread_tmp_37_fu_501_p3() {
    tmp_37_fu_501_p3 = Tm_1_fu_490_p2.read().range(7, 7);
}

void Cipher::thread_tmp_38_fu_546_p2() {
    tmp_38_fu_546_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): Tm_2_fu_540_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void Cipher::thread_tmp_39_fu_552_p3() {
    tmp_39_fu_552_p3 = Tm_2_fu_540_p2.read().range(7, 7);
}

void Cipher::thread_tmp_3_i1_fu_663_p1() {
    tmp_3_i1_fu_663_p1 = esl_zext<32,8>(temp_2_reg_824.read());
}

void Cipher::thread_tmp_3_i_fu_338_p1() {
    tmp_3_i_fu_338_p1 = esl_zext<32,8>(temp_6_reg_744.read());
}

void Cipher::thread_tmp_40_fu_595_p2() {
    tmp_40_fu_595_p2 = (!ap_const_lv8_1.is_01())? sc_lv<8>(): Tm_3_fu_590_p2.read() << (unsigned short)ap_const_lv8_1.to_uint();
}

void Cipher::thread_tmp_41_fu_601_p3() {
    tmp_41_fu_601_p3 = Tm_3_fu_590_p2.read().range(7, 7);
}

void Cipher::thread_tmp_4_i1_fu_667_p1() {
    tmp_4_i1_fu_667_p1 = esl_zext<32,8>(temp_3_reg_829.read());
}

void Cipher::thread_tmp_4_i_fu_342_p1() {
    tmp_4_i_fu_342_p1 = esl_zext<32,8>(temp_7_reg_749.read());
}

void Cipher::thread_tmp_5_i_cast_cast_fu_509_p3() {
    tmp_5_i_cast_cast_fu_509_p3 = (!tmp_37_fu_501_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_37_fu_501_p3.read()[0].to_bool())? ap_const_lv8_1B: ap_const_lv8_0);
}

void Cipher::thread_tmp_9_i_cast_cast_fu_459_p3() {
    tmp_9_i_cast_cast_fu_459_p3 = (!tmp_35_fu_451_p3.read()[0].is_01())? sc_lv<8>(): ((tmp_35_fu_451_p3.read()[0].to_bool())? ap_const_lv8_1B: ap_const_lv8_0);
}

void Cipher::thread_tmp_fu_433_p2() {
    tmp_fu_433_p2 = (Tm_fu_425_p2.read() ^ tmp_33_fu_429_p1.read());
}

void Cipher::thread_tmp_i1_fu_655_p1() {
    tmp_i1_fu_655_p1 = esl_zext<32,8>(temp_reg_814.read());
}

void Cipher::thread_tmp_i_37_fu_473_p2() {
    tmp_i_37_fu_473_p2 = (tmp1_fu_467_p2.read() ^ tmp_9_i_cast_cast_fu_459_p3.read());
}

void Cipher::thread_tmp_i_fu_330_p1() {
    tmp_i_fu_330_p1 = esl_zext<32,8>(temp_4_reg_734.read());
}

void Cipher::thread_tmp_s_fu_359_p2() {
    tmp_s_fu_359_p2 = (!i_i_cast5_cast_fu_355_p1.read().is_01() || !ap_const_lv4_4.is_01())? sc_lv<4>(): (sc_biguint<4>(i_i_cast5_cast_fu_355_p1.read()) + sc_biguint<4>(ap_const_lv4_4));
}

void Cipher::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_KeyExpansion_fu_244_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_AddRoundKey_fu_256_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_308_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state24;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_266_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) && esl_seteq<1,1,1>(exitcond_i_fu_390_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state23;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 4194304 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_256_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state23;
            }
            break;
        case 8388608 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) && esl_seteq<1,1,1>(grp_SubBytes_fu_266_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state25;
            } else {
                ap_NS_fsm = ap_ST_fsm_state24;
            }
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_256_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state38;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<38>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void Cipher::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_address0\" :  \"" << state_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_ce0\" :  \"" << state_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_we0\" :  \"" << state_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_d0\" :  \"" << state_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_q0\" :  \"" << state_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_address1\" :  \"" << state_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_ce1\" :  \"" << state_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_we1\" :  \"" << state_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_d1\" :  \"" << state_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_q1\" :  \"" << state_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Key_address0\" :  \"" << Key_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Key_ce0\" :  \"" << Key_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Key_q0\" :  \"" << Key_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Key_address1\" :  \"" << Key_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Key_ce1\" :  \"" << Key_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Key_q1\" :  \"" << Key_q1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

