// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "KeyExpansion.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic KeyExpansion::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic KeyExpansion::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<10> KeyExpansion::ap_ST_fsm_state1 = "1";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state2 = "10";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state3 = "100";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state4 = "1000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state5 = "10000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state6 = "100000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state7 = "1000000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state8 = "10000000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state9 = "100000000";
const sc_lv<10> KeyExpansion::ap_ST_fsm_state10 = "1000000000";
const sc_lv<32> KeyExpansion::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> KeyExpansion::ap_const_lv32_1 = "1";
const sc_lv<1> KeyExpansion::ap_const_lv1_0 = "0";
const sc_lv<32> KeyExpansion::ap_const_lv32_2 = "10";
const sc_lv<32> KeyExpansion::ap_const_lv32_4 = "100";
const sc_lv<32> KeyExpansion::ap_const_lv32_5 = "101";
const sc_lv<1> KeyExpansion::ap_const_lv1_1 = "1";
const sc_lv<32> KeyExpansion::ap_const_lv32_6 = "110";
const sc_lv<32> KeyExpansion::ap_const_lv32_7 = "111";
const sc_lv<32> KeyExpansion::ap_const_lv32_8 = "1000";
const sc_lv<3> KeyExpansion::ap_const_lv3_0 = "000";
const sc_lv<32> KeyExpansion::ap_const_lv32_3 = "11";
const sc_lv<32> KeyExpansion::ap_const_lv32_9 = "1001";
const sc_lv<6> KeyExpansion::ap_const_lv6_4 = "100";
const sc_lv<3> KeyExpansion::ap_const_lv3_4 = "100";
const sc_lv<3> KeyExpansion::ap_const_lv3_1 = "1";
const sc_lv<2> KeyExpansion::ap_const_lv2_0 = "00";
const sc_lv<4> KeyExpansion::ap_const_lv4_1 = "1";
const sc_lv<4> KeyExpansion::ap_const_lv4_2 = "10";
const sc_lv<4> KeyExpansion::ap_const_lv4_3 = "11";
const sc_lv<6> KeyExpansion::ap_const_lv6_2C = "101100";
const sc_lv<8> KeyExpansion::ap_const_lv8_F0 = "11110000";
const sc_lv<8> KeyExpansion::ap_const_lv8_F1 = "11110001";
const sc_lv<6> KeyExpansion::ap_const_lv6_1 = "1";
const sc_lv<2> KeyExpansion::ap_const_lv2_2 = "10";
const sc_lv<2> KeyExpansion::ap_const_lv2_1 = "1";
const sc_lv<8> KeyExpansion::ap_const_lv8_F2 = "11110010";
const sc_lv<8> KeyExpansion::ap_const_lv8_F3 = "11110011";
const sc_lv<8> KeyExpansion::ap_const_lv8_1 = "1";
const sc_lv<8> KeyExpansion::ap_const_lv8_2 = "10";
const sc_lv<8> KeyExpansion::ap_const_lv8_3 = "11";
const bool KeyExpansion::ap_const_boolean_1 = true;

KeyExpansion::KeyExpansion(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_U = new KeyExpansion_sbox("sbox_U");
    sbox_U->clk(ap_clk);
    sbox_U->reset(ap_rst);
    sbox_U->address0(sbox_address0);
    sbox_U->ce0(sbox_ce0);
    sbox_U->q0(sbox_q0);
    sbox_U->address1(sbox_address1);
    sbox_U->ce1(sbox_ce1);
    sbox_U->q1(sbox_q1);
    sbox_U->address2(sbox_address2);
    sbox_U->ce2(sbox_ce2);
    sbox_U->q2(sbox_q2);
    sbox_U->address3(sbox_address3);
    sbox_U->ce3(sbox_ce3);
    sbox_U->q3(sbox_q3);
    Rcon_U = new KeyExpansion_Rcon("Rcon_U");
    Rcon_U->clk(ap_clk);
    Rcon_U->reset(ap_rst);
    Rcon_U->address0(Rcon_address0);
    Rcon_U->ce0(Rcon_ce0);
    Rcon_U->q0(Rcon_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Key_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_cast_fu_423_p1 );
    sensitive << ( tmp_3_cast_fu_454_p1 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_Key_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_1_cast_fu_434_p1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_cast_fu_464_p1 );

    SC_METHOD(thread_Key_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_Key_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );

    SC_METHOD(thread_Rcon_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( tmp_s_fu_573_p1 );

    SC_METHOD(thread_Rcon_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_RoundKey_address0);
    sensitive << ( tmp_cast_reg_801 );
    sensitive << ( tmp_3_cast_reg_821 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_fu_497_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( sum8_cast_fu_524_p1 );
    sensitive << ( sum_cast_fu_583_p1 );
    sensitive << ( sum3_cast_fu_742_p1 );
    sensitive << ( tmp_22_cast_fu_752_p1 );
    sensitive << ( tmp_26_cast_fu_782_p1 );

    SC_METHOD(thread_RoundKey_address1);
    sensitive << ( tmp_1_cast_reg_811 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_5_cast_reg_831 );
    sensitive << ( tmp_8_cast_reg_856 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( sum1_cast_fu_593_p1 );
    sensitive << ( sum2_cast_fu_732_p1 );
    sensitive << ( tmp_24_cast_fu_772_p1 );

    SC_METHOD(thread_RoundKey_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_fu_497_p2 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_RoundKey_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_RoundKey_d0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_11_reg_976 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_15_reg_996 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_4_fu_439_p1 );
    sensitive << ( tmp_18_fu_469_p1 );

    SC_METHOD(thread_RoundKey_d1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( tmp_10_reg_971 );
    sensitive << ( tmp_13_reg_991 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( tmp_6_fu_444_p1 );
    sensitive << ( tmp_19_fu_474_p1 );

    SC_METHOD(thread_RoundKey_we0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_RoundKey_we1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond1_fu_479_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond1_fu_479_p2 );

    SC_METHOD(thread_exitcond1_fu_479_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( i_1_reg_332 );

    SC_METHOD(thread_exitcond2_fu_399_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_reg_273 );

    SC_METHOD(thread_exitcond_fu_497_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( j_reg_388 );

    SC_METHOD(thread_i_2_fu_598_p2);
    sensitive << ( i_1_reg_332 );

    SC_METHOD(thread_j_2_fu_503_p2);
    sensitive << ( j_reg_388 );

    SC_METHOD(thread_newSel2_fu_641_p3);
    sensitive << ( RoundKey_q0 );
    sensitive << ( temp_2_1_reg_355 );
    sensitive << ( sel_tmp_fu_604_p2 );

    SC_METHOD(thread_newSel_fu_625_p3);
    sensitive << ( RoundKey_q0 );
    sensitive << ( temp_3_1_reg_344 );
    sensitive << ( sel_tmp_fu_604_p2 );

    SC_METHOD(thread_num_assign_1_fu_548_p1);
    sensitive << ( temp_2_1_reg_355 );

    SC_METHOD(thread_num_assign_2_fu_553_p1);
    sensitive << ( temp_3_1_reg_344 );

    SC_METHOD(thread_num_assign_3_fu_558_p1);
    sensitive << ( temp_3_8_reg_377 );

    SC_METHOD(thread_num_assign_fu_543_p1);
    sensitive << ( temp_3_5_reg_366 );

    SC_METHOD(thread_or_cond_fu_619_p2);
    sensitive << ( sel_tmp4_fu_614_p2 );
    sensitive << ( sel_tmp2_fu_609_p2 );

    SC_METHOD(thread_p_lshr_f_cast_fu_563_p4);
    sensitive << ( i_1_reg_332 );

    SC_METHOD(thread_sbox_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( num_assign_fu_543_p1 );

    SC_METHOD(thread_sbox_address1);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( num_assign_1_fu_548_p1 );

    SC_METHOD(thread_sbox_address2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( num_assign_2_fu_553_p1 );

    SC_METHOD(thread_sbox_address3);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( num_assign_3_fu_558_p1 );

    SC_METHOD(thread_sbox_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_sbox_ce1);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_sbox_ce2);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_sbox_ce3);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_sel_tmp2_fu_609_p2);
    sensitive << ( tmp_21_reg_874 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sel_tmp4_fu_614_p2);
    sensitive << ( tmp_21_reg_874 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sel_tmp_fu_604_p2);
    sensitive << ( tmp_21_reg_874 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_sum1_cast_fu_593_p1);
    sensitive << ( sum1_fu_588_p2 );

    SC_METHOD(thread_sum1_fu_588_p2);
    sensitive << ( tmp_8_reg_844 );

    SC_METHOD(thread_sum2_cast_fu_732_p1);
    sensitive << ( sum2_fu_727_p2 );

    SC_METHOD(thread_sum2_fu_727_p2);
    sensitive << ( tmp_8_reg_844 );

    SC_METHOD(thread_sum3_cast_fu_742_p1);
    sensitive << ( sum3_fu_737_p2 );

    SC_METHOD(thread_sum3_fu_737_p2);
    sensitive << ( tmp_8_reg_844 );

    SC_METHOD(thread_sum8_cast_fu_524_p1);
    sensitive << ( sum8_fu_519_p2 );

    SC_METHOD(thread_sum8_fu_519_p2);
    sensitive << ( tmp_8_reg_844 );
    sensitive << ( tmp29_cast_fu_515_p1 );

    SC_METHOD(thread_sum_cast_fu_583_p1);
    sensitive << ( sum_fu_578_p2 );

    SC_METHOD(thread_sum_fu_578_p2);
    sensitive << ( tmp_8_reg_844 );

    SC_METHOD(thread_temp_0_1_fu_681_p2);
    sensitive << ( sbox_q0 );
    sensitive << ( Rcon_q0 );

    SC_METHOD(thread_temp_0_2_fu_708_p3);
    sensitive << ( tmp_9_reg_881 );
    sensitive << ( temp_3_8_reg_377 );
    sensitive << ( temp_0_1_fu_681_p2 );

    SC_METHOD(thread_temp_1_1_fu_701_p3);
    sensitive << ( sbox_q1 );
    sensitive << ( tmp_9_reg_881 );
    sensitive << ( temp_3_5_reg_366 );

    SC_METHOD(thread_temp_2_1_35_fu_694_p3);
    sensitive << ( sbox_q2 );
    sensitive << ( tmp_9_reg_881 );
    sensitive << ( temp_2_1_reg_355 );

    SC_METHOD(thread_temp_3_1_34_fu_687_p3);
    sensitive << ( sbox_q3 );
    sensitive << ( tmp_9_reg_881 );
    sensitive << ( temp_3_1_reg_344 );

    SC_METHOD(thread_temp_3_3_fu_633_p3);
    sensitive << ( temp_3_1_reg_344 );
    sensitive << ( or_cond_fu_619_p2 );
    sensitive << ( newSel_fu_625_p3 );

    SC_METHOD(thread_temp_3_4_fu_649_p3);
    sensitive << ( temp_2_1_reg_355 );
    sensitive << ( or_cond_fu_619_p2 );
    sensitive << ( newSel2_fu_641_p3 );

    SC_METHOD(thread_temp_3_6_fu_657_p3);
    sensitive << ( RoundKey_q0 );
    sensitive << ( temp_3_5_reg_366 );
    sensitive << ( sel_tmp2_fu_609_p2 );

    SC_METHOD(thread_temp_3_7_fu_665_p3);
    sensitive << ( temp_3_5_reg_366 );
    sensitive << ( sel_tmp4_fu_614_p2 );
    sensitive << ( temp_3_6_fu_657_p3 );

    SC_METHOD(thread_temp_3_9_fu_673_p3);
    sensitive << ( RoundKey_q0 );
    sensitive << ( temp_3_8_reg_377 );
    sensitive << ( sel_tmp4_fu_614_p2 );

    SC_METHOD(thread_tmp1_fu_509_p2);
    sensitive << ( j_reg_388 );

    SC_METHOD(thread_tmp29_cast_fu_515_p1);
    sensitive << ( tmp1_fu_509_p2 );

    SC_METHOD(thread_tmp_10_fu_715_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( temp_0_2_fu_708_p3 );

    SC_METHOD(thread_tmp_11_fu_721_p2);
    sensitive << ( RoundKey_q1 );
    sensitive << ( temp_1_1_fu_701_p3 );

    SC_METHOD(thread_tmp_12_fu_747_p2);
    sensitive << ( tmp_8_reg_844 );

    SC_METHOD(thread_tmp_13_fu_757_p2);
    sensitive << ( RoundKey_q1 );
    sensitive << ( temp_2_1_35_reg_955 );

    SC_METHOD(thread_tmp_14_fu_767_p2);
    sensitive << ( tmp_8_reg_844 );

    SC_METHOD(thread_tmp_15_fu_762_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( temp_3_1_34_reg_949 );

    SC_METHOD(thread_tmp_16_fu_777_p2);
    sensitive << ( tmp_8_reg_844 );

    SC_METHOD(thread_tmp_18_fu_469_p1);
    sensitive << ( Key_q0 );

    SC_METHOD(thread_tmp_19_fu_474_p1);
    sensitive << ( Key_q1 );

    SC_METHOD(thread_tmp_1_cast_fu_434_p1);
    sensitive << ( tmp_1_fu_428_p2 );

    SC_METHOD(thread_tmp_1_fu_428_p2);
    sensitive << ( tmp_fu_415_p3 );

    SC_METHOD(thread_tmp_20_fu_533_p1);
    sensitive << ( i_1_reg_332 );

    SC_METHOD(thread_tmp_21_fu_529_p1);
    sensitive << ( j_reg_388 );

    SC_METHOD(thread_tmp_22_cast_fu_752_p1);
    sensitive << ( tmp_12_fu_747_p2 );

    SC_METHOD(thread_tmp_24_cast_fu_772_p1);
    sensitive << ( tmp_14_fu_767_p2 );

    SC_METHOD(thread_tmp_26_cast_fu_782_p1);
    sensitive << ( tmp_16_fu_777_p2 );

    SC_METHOD(thread_tmp_2_fu_411_p1);
    sensitive << ( i_reg_273 );

    SC_METHOD(thread_tmp_3_cast_fu_454_p1);
    sensitive << ( tmp_3_fu_449_p2 );

    SC_METHOD(thread_tmp_3_fu_449_p2);
    sensitive << ( tmp_reg_795 );

    SC_METHOD(thread_tmp_4_fu_439_p1);
    sensitive << ( Key_q0 );

    SC_METHOD(thread_tmp_5_cast_fu_464_p1);
    sensitive << ( tmp_5_fu_459_p2 );

    SC_METHOD(thread_tmp_5_fu_459_p2);
    sensitive << ( tmp_reg_795 );

    SC_METHOD(thread_tmp_6_fu_444_p1);
    sensitive << ( Key_q1 );

    SC_METHOD(thread_tmp_7_fu_405_p2);
    sensitive << ( i_reg_273 );

    SC_METHOD(thread_tmp_8_cast_fu_493_p1);
    sensitive << ( tmp_8_fu_485_p3 );

    SC_METHOD(thread_tmp_8_fu_485_p3);
    sensitive << ( i_1_reg_332 );

    SC_METHOD(thread_tmp_9_fu_537_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_fu_497_p2 );
    sensitive << ( tmp_20_fu_533_p1 );

    SC_METHOD(thread_tmp_cast_fu_423_p1);
    sensitive << ( tmp_fu_415_p3 );

    SC_METHOD(thread_tmp_fu_415_p3);
    sensitive << ( tmp_2_fu_411_p1 );

    SC_METHOD(thread_tmp_s_fu_573_p1);
    sensitive << ( p_lshr_f_cast_fu_563_p4 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond2_fu_399_p2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond1_fu_479_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( exitcond_fu_497_p2 );

    ap_CS_fsm = "0000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "KeyExpansion_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, RoundKey_address0, "(port)RoundKey_address0");
    sc_trace(mVcdFile, RoundKey_ce0, "(port)RoundKey_ce0");
    sc_trace(mVcdFile, RoundKey_we0, "(port)RoundKey_we0");
    sc_trace(mVcdFile, RoundKey_d0, "(port)RoundKey_d0");
    sc_trace(mVcdFile, RoundKey_q0, "(port)RoundKey_q0");
    sc_trace(mVcdFile, RoundKey_address1, "(port)RoundKey_address1");
    sc_trace(mVcdFile, RoundKey_ce1, "(port)RoundKey_ce1");
    sc_trace(mVcdFile, RoundKey_we1, "(port)RoundKey_we1");
    sc_trace(mVcdFile, RoundKey_d1, "(port)RoundKey_d1");
    sc_trace(mVcdFile, RoundKey_q1, "(port)RoundKey_q1");
    sc_trace(mVcdFile, Key_address0, "(port)Key_address0");
    sc_trace(mVcdFile, Key_ce0, "(port)Key_ce0");
    sc_trace(mVcdFile, Key_q0, "(port)Key_q0");
    sc_trace(mVcdFile, Key_address1, "(port)Key_address1");
    sc_trace(mVcdFile, Key_ce1, "(port)Key_ce1");
    sc_trace(mVcdFile, Key_q1, "(port)Key_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_address0, "sbox_address0");
    sc_trace(mVcdFile, sbox_ce0, "sbox_ce0");
    sc_trace(mVcdFile, sbox_q0, "sbox_q0");
    sc_trace(mVcdFile, sbox_address1, "sbox_address1");
    sc_trace(mVcdFile, sbox_ce1, "sbox_ce1");
    sc_trace(mVcdFile, sbox_q1, "sbox_q1");
    sc_trace(mVcdFile, sbox_address2, "sbox_address2");
    sc_trace(mVcdFile, sbox_ce2, "sbox_ce2");
    sc_trace(mVcdFile, sbox_q2, "sbox_q2");
    sc_trace(mVcdFile, sbox_address3, "sbox_address3");
    sc_trace(mVcdFile, sbox_ce3, "sbox_ce3");
    sc_trace(mVcdFile, sbox_q3, "sbox_q3");
    sc_trace(mVcdFile, Rcon_address0, "Rcon_address0");
    sc_trace(mVcdFile, Rcon_ce0, "Rcon_ce0");
    sc_trace(mVcdFile, Rcon_q0, "Rcon_q0");
    sc_trace(mVcdFile, tmp_7_fu_405_p2, "tmp_7_fu_405_p2");
    sc_trace(mVcdFile, tmp_7_reg_790, "tmp_7_reg_790");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_fu_415_p3, "tmp_fu_415_p3");
    sc_trace(mVcdFile, tmp_reg_795, "tmp_reg_795");
    sc_trace(mVcdFile, exitcond2_fu_399_p2, "exitcond2_fu_399_p2");
    sc_trace(mVcdFile, tmp_cast_fu_423_p1, "tmp_cast_fu_423_p1");
    sc_trace(mVcdFile, tmp_cast_reg_801, "tmp_cast_reg_801");
    sc_trace(mVcdFile, tmp_1_cast_fu_434_p1, "tmp_1_cast_fu_434_p1");
    sc_trace(mVcdFile, tmp_1_cast_reg_811, "tmp_1_cast_reg_811");
    sc_trace(mVcdFile, tmp_3_cast_fu_454_p1, "tmp_3_cast_fu_454_p1");
    sc_trace(mVcdFile, tmp_3_cast_reg_821, "tmp_3_cast_reg_821");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_5_cast_fu_464_p1, "tmp_5_cast_fu_464_p1");
    sc_trace(mVcdFile, tmp_5_cast_reg_831, "tmp_5_cast_reg_831");
    sc_trace(mVcdFile, tmp_8_fu_485_p3, "tmp_8_fu_485_p3");
    sc_trace(mVcdFile, tmp_8_reg_844, "tmp_8_reg_844");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exitcond1_fu_479_p2, "exitcond1_fu_479_p2");
    sc_trace(mVcdFile, tmp_8_cast_fu_493_p1, "tmp_8_cast_fu_493_p1");
    sc_trace(mVcdFile, tmp_8_cast_reg_856, "tmp_8_cast_reg_856");
    sc_trace(mVcdFile, j_2_fu_503_p2, "j_2_fu_503_p2");
    sc_trace(mVcdFile, j_2_reg_864, "j_2_reg_864");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, exitcond_fu_497_p2, "exitcond_fu_497_p2");
    sc_trace(mVcdFile, tmp_21_fu_529_p1, "tmp_21_fu_529_p1");
    sc_trace(mVcdFile, tmp_21_reg_874, "tmp_21_reg_874");
    sc_trace(mVcdFile, tmp_9_fu_537_p2, "tmp_9_fu_537_p2");
    sc_trace(mVcdFile, tmp_9_reg_881, "tmp_9_reg_881");
    sc_trace(mVcdFile, i_2_fu_598_p2, "i_2_fu_598_p2");
    sc_trace(mVcdFile, i_2_reg_924, "i_2_reg_924");
    sc_trace(mVcdFile, temp_3_3_fu_633_p3, "temp_3_3_fu_633_p3");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, temp_3_4_fu_649_p3, "temp_3_4_fu_649_p3");
    sc_trace(mVcdFile, temp_3_7_fu_665_p3, "temp_3_7_fu_665_p3");
    sc_trace(mVcdFile, temp_3_9_fu_673_p3, "temp_3_9_fu_673_p3");
    sc_trace(mVcdFile, temp_3_1_34_fu_687_p3, "temp_3_1_34_fu_687_p3");
    sc_trace(mVcdFile, temp_3_1_34_reg_949, "temp_3_1_34_reg_949");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, temp_2_1_35_fu_694_p3, "temp_2_1_35_fu_694_p3");
    sc_trace(mVcdFile, temp_2_1_35_reg_955, "temp_2_1_35_reg_955");
    sc_trace(mVcdFile, temp_1_1_fu_701_p3, "temp_1_1_fu_701_p3");
    sc_trace(mVcdFile, temp_1_1_reg_961, "temp_1_1_reg_961");
    sc_trace(mVcdFile, temp_0_2_fu_708_p3, "temp_0_2_fu_708_p3");
    sc_trace(mVcdFile, temp_0_2_reg_966, "temp_0_2_reg_966");
    sc_trace(mVcdFile, tmp_10_fu_715_p2, "tmp_10_fu_715_p2");
    sc_trace(mVcdFile, tmp_10_reg_971, "tmp_10_reg_971");
    sc_trace(mVcdFile, tmp_11_fu_721_p2, "tmp_11_fu_721_p2");
    sc_trace(mVcdFile, tmp_11_reg_976, "tmp_11_reg_976");
    sc_trace(mVcdFile, tmp_13_fu_757_p2, "tmp_13_fu_757_p2");
    sc_trace(mVcdFile, tmp_13_reg_991, "tmp_13_reg_991");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_15_fu_762_p2, "tmp_15_fu_762_p2");
    sc_trace(mVcdFile, tmp_15_reg_996, "tmp_15_reg_996");
    sc_trace(mVcdFile, i_reg_273, "i_reg_273");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, temp_3_reg_284, "temp_3_reg_284");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, temp_2_reg_296, "temp_2_reg_296");
    sc_trace(mVcdFile, temp_1_reg_308, "temp_1_reg_308");
    sc_trace(mVcdFile, temp_reg_320, "temp_reg_320");
    sc_trace(mVcdFile, i_1_reg_332, "i_1_reg_332");
    sc_trace(mVcdFile, temp_3_1_reg_344, "temp_3_1_reg_344");
    sc_trace(mVcdFile, temp_2_1_reg_355, "temp_2_1_reg_355");
    sc_trace(mVcdFile, temp_3_5_reg_366, "temp_3_5_reg_366");
    sc_trace(mVcdFile, temp_3_8_reg_377, "temp_3_8_reg_377");
    sc_trace(mVcdFile, j_reg_388, "j_reg_388");
    sc_trace(mVcdFile, sum8_cast_fu_524_p1, "sum8_cast_fu_524_p1");
    sc_trace(mVcdFile, num_assign_fu_543_p1, "num_assign_fu_543_p1");
    sc_trace(mVcdFile, num_assign_1_fu_548_p1, "num_assign_1_fu_548_p1");
    sc_trace(mVcdFile, num_assign_2_fu_553_p1, "num_assign_2_fu_553_p1");
    sc_trace(mVcdFile, num_assign_3_fu_558_p1, "num_assign_3_fu_558_p1");
    sc_trace(mVcdFile, tmp_s_fu_573_p1, "tmp_s_fu_573_p1");
    sc_trace(mVcdFile, sum_cast_fu_583_p1, "sum_cast_fu_583_p1");
    sc_trace(mVcdFile, sum1_cast_fu_593_p1, "sum1_cast_fu_593_p1");
    sc_trace(mVcdFile, sum2_cast_fu_732_p1, "sum2_cast_fu_732_p1");
    sc_trace(mVcdFile, sum3_cast_fu_742_p1, "sum3_cast_fu_742_p1");
    sc_trace(mVcdFile, tmp_22_cast_fu_752_p1, "tmp_22_cast_fu_752_p1");
    sc_trace(mVcdFile, tmp_24_cast_fu_772_p1, "tmp_24_cast_fu_772_p1");
    sc_trace(mVcdFile, tmp_26_cast_fu_782_p1, "tmp_26_cast_fu_782_p1");
    sc_trace(mVcdFile, tmp_4_fu_439_p1, "tmp_4_fu_439_p1");
    sc_trace(mVcdFile, tmp_6_fu_444_p1, "tmp_6_fu_444_p1");
    sc_trace(mVcdFile, tmp_18_fu_469_p1, "tmp_18_fu_469_p1");
    sc_trace(mVcdFile, tmp_19_fu_474_p1, "tmp_19_fu_474_p1");
    sc_trace(mVcdFile, tmp_2_fu_411_p1, "tmp_2_fu_411_p1");
    sc_trace(mVcdFile, tmp_1_fu_428_p2, "tmp_1_fu_428_p2");
    sc_trace(mVcdFile, tmp_3_fu_449_p2, "tmp_3_fu_449_p2");
    sc_trace(mVcdFile, tmp_5_fu_459_p2, "tmp_5_fu_459_p2");
    sc_trace(mVcdFile, tmp1_fu_509_p2, "tmp1_fu_509_p2");
    sc_trace(mVcdFile, tmp29_cast_fu_515_p1, "tmp29_cast_fu_515_p1");
    sc_trace(mVcdFile, sum8_fu_519_p2, "sum8_fu_519_p2");
    sc_trace(mVcdFile, tmp_20_fu_533_p1, "tmp_20_fu_533_p1");
    sc_trace(mVcdFile, p_lshr_f_cast_fu_563_p4, "p_lshr_f_cast_fu_563_p4");
    sc_trace(mVcdFile, sum_fu_578_p2, "sum_fu_578_p2");
    sc_trace(mVcdFile, sum1_fu_588_p2, "sum1_fu_588_p2");
    sc_trace(mVcdFile, sel_tmp4_fu_614_p2, "sel_tmp4_fu_614_p2");
    sc_trace(mVcdFile, sel_tmp2_fu_609_p2, "sel_tmp2_fu_609_p2");
    sc_trace(mVcdFile, sel_tmp_fu_604_p2, "sel_tmp_fu_604_p2");
    sc_trace(mVcdFile, or_cond_fu_619_p2, "or_cond_fu_619_p2");
    sc_trace(mVcdFile, newSel_fu_625_p3, "newSel_fu_625_p3");
    sc_trace(mVcdFile, newSel2_fu_641_p3, "newSel2_fu_641_p3");
    sc_trace(mVcdFile, temp_3_6_fu_657_p3, "temp_3_6_fu_657_p3");
    sc_trace(mVcdFile, temp_0_1_fu_681_p2, "temp_0_1_fu_681_p2");
    sc_trace(mVcdFile, sum2_fu_727_p2, "sum2_fu_727_p2");
    sc_trace(mVcdFile, sum3_fu_737_p2, "sum3_fu_737_p2");
    sc_trace(mVcdFile, tmp_12_fu_747_p2, "tmp_12_fu_747_p2");
    sc_trace(mVcdFile, tmp_14_fu_767_p2, "tmp_14_fu_767_p2");
    sc_trace(mVcdFile, tmp_16_fu_777_p2, "tmp_16_fu_777_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

KeyExpansion::~KeyExpansion() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox_U;
    delete Rcon_U;
}

void KeyExpansion::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond2_fu_399_p2.read(), ap_const_lv1_1))) {
        i_1_reg_332 = ap_const_lv6_4;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        i_1_reg_332 = i_2_reg_924.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        i_reg_273 = tmp_7_reg_790.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        i_reg_273 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        j_reg_388 = j_2_reg_864.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_479_p2.read()))) {
        j_reg_388 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        temp_2_1_reg_355 = temp_3_4_fu_649_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_479_p2.read()))) {
        temp_2_1_reg_355 = temp_2_reg_296.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        temp_3_1_reg_344 = temp_3_3_fu_633_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_479_p2.read()))) {
        temp_3_1_reg_344 = temp_3_reg_284.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        temp_3_5_reg_366 = temp_3_7_fu_665_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_479_p2.read()))) {
        temp_3_5_reg_366 = temp_1_reg_308.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        temp_3_8_reg_377 = temp_3_9_fu_673_p3.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_479_p2.read()))) {
        temp_3_8_reg_377 = temp_reg_320.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(exitcond_fu_497_p2.read(), ap_const_lv1_1))) {
        i_2_reg_924 = i_2_fu_598_p2.read();
        tmp_9_reg_881 = tmp_9_fu_537_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        j_2_reg_864 = j_2_fu_503_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        temp_0_2_reg_966 = temp_0_2_fu_708_p3.read();
        temp_1_1_reg_961 = temp_1_1_fu_701_p3.read();
        temp_2_1_35_reg_955 = temp_2_1_35_fu_694_p3.read();
        temp_3_1_34_reg_949 = temp_3_1_34_fu_687_p3.read();
        tmp_10_reg_971 = tmp_10_fu_715_p2.read();
        tmp_11_reg_976 = tmp_11_fu_721_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        temp_1_reg_308 = temp_1_1_reg_961.read();
        temp_2_reg_296 = temp_2_1_35_reg_955.read();
        temp_3_reg_284 = temp_3_1_34_reg_949.read();
        temp_reg_320 = temp_0_2_reg_966.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        tmp_13_reg_991 = tmp_13_fu_757_p2.read();
        tmp_15_reg_996 = tmp_15_fu_762_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond2_fu_399_p2.read(), ap_const_lv1_0))) {
        tmp_1_cast_reg_811 = tmp_1_cast_fu_434_p1.read();
        tmp_cast_reg_801 = tmp_cast_fu_423_p1.read();
        tmp_reg_795 = tmp_fu_415_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_497_p2.read()))) {
        tmp_21_reg_874 = tmp_21_fu_529_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        tmp_3_cast_reg_821 = tmp_3_cast_fu_454_p1.read();
        tmp_5_cast_reg_831 = tmp_5_cast_fu_464_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        tmp_7_reg_790 = tmp_7_fu_405_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_479_p2.read()))) {
        tmp_8_cast_reg_856 = tmp_8_cast_fu_493_p1.read();
        tmp_8_reg_844 = tmp_8_fu_485_p3.read();
    }
}

void KeyExpansion::thread_Key_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Key_address0 =  (sc_lv<5>) (tmp_3_cast_fu_454_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Key_address0 =  (sc_lv<5>) (tmp_cast_fu_423_p1.read());
    } else {
        Key_address0 = "XXXXX";
    }
}

void KeyExpansion::thread_Key_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Key_address1 =  (sc_lv<5>) (tmp_5_cast_fu_464_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Key_address1 =  (sc_lv<5>) (tmp_1_cast_fu_434_p1.read());
    } else {
        Key_address1 = "XXXXX";
    }
}

void KeyExpansion::thread_Key_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        Key_ce0 = ap_const_logic_1;
    } else {
        Key_ce0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_Key_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()))) {
        Key_ce1 = ap_const_logic_1;
    } else {
        Key_ce1 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_Rcon_address0() {
    Rcon_address0 =  (sc_lv<8>) (tmp_s_fu_573_p1.read());
}

void KeyExpansion::thread_Rcon_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        Rcon_ce0 = ap_const_logic_1;
    } else {
        Rcon_ce0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_RoundKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        RoundKey_address0 =  (sc_lv<8>) (tmp_26_cast_fu_782_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        RoundKey_address0 =  (sc_lv<8>) (tmp_22_cast_fu_752_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        RoundKey_address0 =  (sc_lv<8>) (sum3_cast_fu_742_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(exitcond_fu_497_p2.read(), ap_const_lv1_1))) {
        RoundKey_address0 =  (sc_lv<8>) (sum_cast_fu_583_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_497_p2.read()))) {
        RoundKey_address0 =  (sc_lv<8>) (sum8_cast_fu_524_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RoundKey_address0 =  (sc_lv<8>) (tmp_3_cast_reg_821.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_address0 =  (sc_lv<8>) (tmp_cast_reg_801.read());
    } else {
        RoundKey_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_RoundKey_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        RoundKey_address1 =  (sc_lv<8>) (tmp_24_cast_fu_772_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        RoundKey_address1 =  (sc_lv<8>) (tmp_8_cast_reg_856.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        RoundKey_address1 =  (sc_lv<8>) (sum2_cast_fu_732_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        RoundKey_address1 =  (sc_lv<8>) (sum1_cast_fu_593_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RoundKey_address1 =  (sc_lv<8>) (tmp_5_cast_reg_831.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_address1 =  (sc_lv<8>) (tmp_1_cast_reg_811.read());
    } else {
        RoundKey_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_RoundKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_497_p2.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_497_p2.read(), ap_const_lv1_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        RoundKey_ce0 = ap_const_logic_1;
    } else {
        RoundKey_ce0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_RoundKey_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        RoundKey_ce1 = ap_const_logic_1;
    } else {
        RoundKey_ce1 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_RoundKey_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        RoundKey_d0 = tmp_15_reg_996.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        RoundKey_d0 = tmp_11_reg_976.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RoundKey_d0 = tmp_18_fu_469_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_d0 = tmp_4_fu_439_p1.read();
    } else {
        RoundKey_d0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_RoundKey_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        RoundKey_d1 = tmp_13_reg_991.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        RoundKey_d1 = tmp_10_reg_971.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RoundKey_d1 = tmp_19_fu_474_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_d1 = tmp_6_fu_444_p1.read();
    } else {
        RoundKey_d1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_RoundKey_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        RoundKey_we0 = ap_const_logic_1;
    } else {
        RoundKey_we0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_RoundKey_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
        RoundKey_we1 = ap_const_logic_1;
    } else {
        RoundKey_we1 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void KeyExpansion::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void KeyExpansion::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void KeyExpansion::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void KeyExpansion::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void KeyExpansion::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void KeyExpansion::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void KeyExpansion::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void KeyExpansion::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void KeyExpansion::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void KeyExpansion::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(exitcond1_fu_479_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void KeyExpansion::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void KeyExpansion::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(exitcond1_fu_479_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void KeyExpansion::thread_exitcond1_fu_479_p2() {
    exitcond1_fu_479_p2 = (!i_1_reg_332.read().is_01() || !ap_const_lv6_2C.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_332.read() == ap_const_lv6_2C);
}

void KeyExpansion::thread_exitcond2_fu_399_p2() {
    exitcond2_fu_399_p2 = (!i_reg_273.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_reg_273.read() == ap_const_lv3_4);
}

void KeyExpansion::thread_exitcond_fu_497_p2() {
    exitcond_fu_497_p2 = (!j_reg_388.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_388.read() == ap_const_lv3_4);
}

void KeyExpansion::thread_i_2_fu_598_p2() {
    i_2_fu_598_p2 = (!ap_const_lv6_1.is_01() || !i_1_reg_332.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_1) + sc_biguint<6>(i_1_reg_332.read()));
}

void KeyExpansion::thread_j_2_fu_503_p2() {
    j_2_fu_503_p2 = (!j_reg_388.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_reg_388.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void KeyExpansion::thread_newSel2_fu_641_p3() {
    newSel2_fu_641_p3 = (!sel_tmp_fu_604_p2.read()[0].is_01())? sc_lv<8>(): ((sel_tmp_fu_604_p2.read()[0].to_bool())? RoundKey_q0.read(): temp_2_1_reg_355.read());
}

void KeyExpansion::thread_newSel_fu_625_p3() {
    newSel_fu_625_p3 = (!sel_tmp_fu_604_p2.read()[0].is_01())? sc_lv<8>(): ((sel_tmp_fu_604_p2.read()[0].to_bool())? temp_3_1_reg_344.read(): RoundKey_q0.read());
}

void KeyExpansion::thread_num_assign_1_fu_548_p1() {
    num_assign_1_fu_548_p1 = esl_zext<32,8>(temp_2_1_reg_355.read());
}

void KeyExpansion::thread_num_assign_2_fu_553_p1() {
    num_assign_2_fu_553_p1 = esl_zext<32,8>(temp_3_1_reg_344.read());
}

void KeyExpansion::thread_num_assign_3_fu_558_p1() {
    num_assign_3_fu_558_p1 = esl_zext<32,8>(temp_3_8_reg_377.read());
}

void KeyExpansion::thread_num_assign_fu_543_p1() {
    num_assign_fu_543_p1 = esl_zext<32,8>(temp_3_5_reg_366.read());
}

void KeyExpansion::thread_or_cond_fu_619_p2() {
    or_cond_fu_619_p2 = (sel_tmp4_fu_614_p2.read() | sel_tmp2_fu_609_p2.read());
}

void KeyExpansion::thread_p_lshr_f_cast_fu_563_p4() {
    p_lshr_f_cast_fu_563_p4 = i_1_reg_332.read().range(5, 2);
}

void KeyExpansion::thread_sbox_address0() {
    sbox_address0 =  (sc_lv<8>) (num_assign_fu_543_p1.read());
}

void KeyExpansion::thread_sbox_address1() {
    sbox_address1 =  (sc_lv<8>) (num_assign_1_fu_548_p1.read());
}

void KeyExpansion::thread_sbox_address2() {
    sbox_address2 =  (sc_lv<8>) (num_assign_2_fu_553_p1.read());
}

void KeyExpansion::thread_sbox_address3() {
    sbox_address3 =  (sc_lv<8>) (num_assign_3_fu_558_p1.read());
}

void KeyExpansion::thread_sbox_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sbox_ce0 = ap_const_logic_1;
    } else {
        sbox_ce0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_sbox_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sbox_ce1 = ap_const_logic_1;
    } else {
        sbox_ce1 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_sbox_ce2() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sbox_ce2 = ap_const_logic_1;
    } else {
        sbox_ce2 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_sbox_ce3() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        sbox_ce3 = ap_const_logic_1;
    } else {
        sbox_ce3 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_sel_tmp2_fu_609_p2() {
    sel_tmp2_fu_609_p2 = (!tmp_21_reg_874.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(tmp_21_reg_874.read() == ap_const_lv2_1);
}

void KeyExpansion::thread_sel_tmp4_fu_614_p2() {
    sel_tmp4_fu_614_p2 = (!tmp_21_reg_874.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_21_reg_874.read() == ap_const_lv2_0);
}

void KeyExpansion::thread_sel_tmp_fu_604_p2() {
    sel_tmp_fu_604_p2 = (!tmp_21_reg_874.read().is_01() || !ap_const_lv2_2.is_01())? sc_lv<1>(): sc_lv<1>(tmp_21_reg_874.read() == ap_const_lv2_2);
}

void KeyExpansion::thread_sum1_cast_fu_593_p1() {
    sum1_cast_fu_593_p1 = esl_zext<32,8>(sum1_fu_588_p2.read());
}

void KeyExpansion::thread_sum1_fu_588_p2() {
    sum1_fu_588_p2 = (!ap_const_lv8_F1.is_01() || !tmp_8_reg_844.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_F1) + sc_biguint<8>(tmp_8_reg_844.read()));
}

void KeyExpansion::thread_sum2_cast_fu_732_p1() {
    sum2_cast_fu_732_p1 = esl_zext<32,8>(sum2_fu_727_p2.read());
}

void KeyExpansion::thread_sum2_fu_727_p2() {
    sum2_fu_727_p2 = (!ap_const_lv8_F2.is_01() || !tmp_8_reg_844.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_F2) + sc_biguint<8>(tmp_8_reg_844.read()));
}

void KeyExpansion::thread_sum3_cast_fu_742_p1() {
    sum3_cast_fu_742_p1 = esl_zext<32,8>(sum3_fu_737_p2.read());
}

void KeyExpansion::thread_sum3_fu_737_p2() {
    sum3_fu_737_p2 = (!ap_const_lv8_F3.is_01() || !tmp_8_reg_844.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_F3) + sc_biguint<8>(tmp_8_reg_844.read()));
}

void KeyExpansion::thread_sum8_cast_fu_524_p1() {
    sum8_cast_fu_524_p1 = esl_zext<32,8>(sum8_fu_519_p2.read());
}

void KeyExpansion::thread_sum8_fu_519_p2() {
    sum8_fu_519_p2 = (!tmp29_cast_fu_515_p1.read().is_01() || !tmp_8_reg_844.read().is_01())? sc_lv<8>(): (sc_bigint<8>(tmp29_cast_fu_515_p1.read()) + sc_biguint<8>(tmp_8_reg_844.read()));
}

void KeyExpansion::thread_sum_cast_fu_583_p1() {
    sum_cast_fu_583_p1 = esl_zext<32,8>(sum_fu_578_p2.read());
}

void KeyExpansion::thread_sum_fu_578_p2() {
    sum_fu_578_p2 = (!ap_const_lv8_F0.is_01() || !tmp_8_reg_844.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_F0) + sc_biguint<8>(tmp_8_reg_844.read()));
}

void KeyExpansion::thread_temp_0_1_fu_681_p2() {
    temp_0_1_fu_681_p2 = (Rcon_q0.read() ^ sbox_q0.read());
}

void KeyExpansion::thread_temp_0_2_fu_708_p3() {
    temp_0_2_fu_708_p3 = (!tmp_9_reg_881.read()[0].is_01())? sc_lv<8>(): ((tmp_9_reg_881.read()[0].to_bool())? temp_0_1_fu_681_p2.read(): temp_3_8_reg_377.read());
}

void KeyExpansion::thread_temp_1_1_fu_701_p3() {
    temp_1_1_fu_701_p3 = (!tmp_9_reg_881.read()[0].is_01())? sc_lv<8>(): ((tmp_9_reg_881.read()[0].to_bool())? sbox_q1.read(): temp_3_5_reg_366.read());
}

void KeyExpansion::thread_temp_2_1_35_fu_694_p3() {
    temp_2_1_35_fu_694_p3 = (!tmp_9_reg_881.read()[0].is_01())? sc_lv<8>(): ((tmp_9_reg_881.read()[0].to_bool())? sbox_q2.read(): temp_2_1_reg_355.read());
}

void KeyExpansion::thread_temp_3_1_34_fu_687_p3() {
    temp_3_1_34_fu_687_p3 = (!tmp_9_reg_881.read()[0].is_01())? sc_lv<8>(): ((tmp_9_reg_881.read()[0].to_bool())? sbox_q3.read(): temp_3_1_reg_344.read());
}

void KeyExpansion::thread_temp_3_3_fu_633_p3() {
    temp_3_3_fu_633_p3 = (!or_cond_fu_619_p2.read()[0].is_01())? sc_lv<8>(): ((or_cond_fu_619_p2.read()[0].to_bool())? temp_3_1_reg_344.read(): newSel_fu_625_p3.read());
}

void KeyExpansion::thread_temp_3_4_fu_649_p3() {
    temp_3_4_fu_649_p3 = (!or_cond_fu_619_p2.read()[0].is_01())? sc_lv<8>(): ((or_cond_fu_619_p2.read()[0].to_bool())? temp_2_1_reg_355.read(): newSel2_fu_641_p3.read());
}

void KeyExpansion::thread_temp_3_6_fu_657_p3() {
    temp_3_6_fu_657_p3 = (!sel_tmp2_fu_609_p2.read()[0].is_01())? sc_lv<8>(): ((sel_tmp2_fu_609_p2.read()[0].to_bool())? RoundKey_q0.read(): temp_3_5_reg_366.read());
}

void KeyExpansion::thread_temp_3_7_fu_665_p3() {
    temp_3_7_fu_665_p3 = (!sel_tmp4_fu_614_p2.read()[0].is_01())? sc_lv<8>(): ((sel_tmp4_fu_614_p2.read()[0].to_bool())? temp_3_5_reg_366.read(): temp_3_6_fu_657_p3.read());
}

void KeyExpansion::thread_temp_3_9_fu_673_p3() {
    temp_3_9_fu_673_p3 = (!sel_tmp4_fu_614_p2.read()[0].is_01())? sc_lv<8>(): ((sel_tmp4_fu_614_p2.read()[0].to_bool())? RoundKey_q0.read(): temp_3_8_reg_377.read());
}

void KeyExpansion::thread_tmp1_fu_509_p2() {
    tmp1_fu_509_p2 = (j_reg_388.read() ^ ap_const_lv3_4);
}

void KeyExpansion::thread_tmp29_cast_fu_515_p1() {
    tmp29_cast_fu_515_p1 = esl_sext<8,3>(tmp1_fu_509_p2.read());
}

void KeyExpansion::thread_tmp_10_fu_715_p2() {
    tmp_10_fu_715_p2 = (RoundKey_q0.read() ^ temp_0_2_fu_708_p3.read());
}

void KeyExpansion::thread_tmp_11_fu_721_p2() {
    tmp_11_fu_721_p2 = (RoundKey_q1.read() ^ temp_1_1_fu_701_p3.read());
}

void KeyExpansion::thread_tmp_12_fu_747_p2() {
    tmp_12_fu_747_p2 = (tmp_8_reg_844.read() | ap_const_lv8_1);
}

void KeyExpansion::thread_tmp_13_fu_757_p2() {
    tmp_13_fu_757_p2 = (RoundKey_q1.read() ^ temp_2_1_35_reg_955.read());
}

void KeyExpansion::thread_tmp_14_fu_767_p2() {
    tmp_14_fu_767_p2 = (tmp_8_reg_844.read() | ap_const_lv8_2);
}

void KeyExpansion::thread_tmp_15_fu_762_p2() {
    tmp_15_fu_762_p2 = (RoundKey_q0.read() ^ temp_3_1_34_reg_949.read());
}

void KeyExpansion::thread_tmp_16_fu_777_p2() {
    tmp_16_fu_777_p2 = (tmp_8_reg_844.read() | ap_const_lv8_3);
}

void KeyExpansion::thread_tmp_18_fu_469_p1() {
    tmp_18_fu_469_p1 = Key_q0.read().range(8-1, 0);
}

void KeyExpansion::thread_tmp_19_fu_474_p1() {
    tmp_19_fu_474_p1 = Key_q1.read().range(8-1, 0);
}

void KeyExpansion::thread_tmp_1_cast_fu_434_p1() {
    tmp_1_cast_fu_434_p1 = esl_zext<32,4>(tmp_1_fu_428_p2.read());
}

void KeyExpansion::thread_tmp_1_fu_428_p2() {
    tmp_1_fu_428_p2 = (tmp_fu_415_p3.read() | ap_const_lv4_1);
}

void KeyExpansion::thread_tmp_20_fu_533_p1() {
    tmp_20_fu_533_p1 = i_1_reg_332.read().range(2-1, 0);
}

void KeyExpansion::thread_tmp_21_fu_529_p1() {
    tmp_21_fu_529_p1 = j_reg_388.read().range(2-1, 0);
}

void KeyExpansion::thread_tmp_22_cast_fu_752_p1() {
    tmp_22_cast_fu_752_p1 = esl_zext<32,8>(tmp_12_fu_747_p2.read());
}

void KeyExpansion::thread_tmp_24_cast_fu_772_p1() {
    tmp_24_cast_fu_772_p1 = esl_zext<32,8>(tmp_14_fu_767_p2.read());
}

void KeyExpansion::thread_tmp_26_cast_fu_782_p1() {
    tmp_26_cast_fu_782_p1 = esl_zext<32,8>(tmp_16_fu_777_p2.read());
}

void KeyExpansion::thread_tmp_2_fu_411_p1() {
    tmp_2_fu_411_p1 = i_reg_273.read().range(2-1, 0);
}

void KeyExpansion::thread_tmp_3_cast_fu_454_p1() {
    tmp_3_cast_fu_454_p1 = esl_zext<32,4>(tmp_3_fu_449_p2.read());
}

void KeyExpansion::thread_tmp_3_fu_449_p2() {
    tmp_3_fu_449_p2 = (tmp_reg_795.read() | ap_const_lv4_2);
}

void KeyExpansion::thread_tmp_4_fu_439_p1() {
    tmp_4_fu_439_p1 = Key_q0.read().range(8-1, 0);
}

void KeyExpansion::thread_tmp_5_cast_fu_464_p1() {
    tmp_5_cast_fu_464_p1 = esl_zext<32,4>(tmp_5_fu_459_p2.read());
}

void KeyExpansion::thread_tmp_5_fu_459_p2() {
    tmp_5_fu_459_p2 = (tmp_reg_795.read() | ap_const_lv4_3);
}

void KeyExpansion::thread_tmp_6_fu_444_p1() {
    tmp_6_fu_444_p1 = Key_q1.read().range(8-1, 0);
}

void KeyExpansion::thread_tmp_7_fu_405_p2() {
    tmp_7_fu_405_p2 = (!i_reg_273.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_reg_273.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void KeyExpansion::thread_tmp_8_cast_fu_493_p1() {
    tmp_8_cast_fu_493_p1 = esl_zext<32,8>(tmp_8_fu_485_p3.read());
}

void KeyExpansion::thread_tmp_8_fu_485_p3() {
    tmp_8_fu_485_p3 = esl_concat<6,2>(i_1_reg_332.read(), ap_const_lv2_0);
}

void KeyExpansion::thread_tmp_9_fu_537_p2() {
    tmp_9_fu_537_p2 = (!tmp_20_fu_533_p1.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_20_fu_533_p1.read() == ap_const_lv2_0);
}

void KeyExpansion::thread_tmp_cast_fu_423_p1() {
    tmp_cast_fu_423_p1 = esl_zext<32,4>(tmp_fu_415_p3.read());
}

void KeyExpansion::thread_tmp_fu_415_p3() {
    tmp_fu_415_p3 = esl_concat<2,2>(tmp_2_fu_411_p1.read(), ap_const_lv2_0);
}

void KeyExpansion::thread_tmp_s_fu_573_p1() {
    tmp_s_fu_573_p1 = esl_zext<32,4>(p_lshr_f_cast_fu_563_p4.read());
}

void KeyExpansion::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond2_fu_399_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond1_fu_479_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(exitcond_fu_497_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<10>) ("XXXXXXXXXX");
            break;
    }
}

}

