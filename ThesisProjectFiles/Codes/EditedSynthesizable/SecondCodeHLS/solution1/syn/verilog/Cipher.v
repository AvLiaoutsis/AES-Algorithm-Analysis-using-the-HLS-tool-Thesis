// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Cipher,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7eg-ffvf1517-1lv-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.704000,HLS_SYN_LAT=1862,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=1040,HLS_SYN_LUT=1673}" *)

module Cipher (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        Key_address0,
        Key_ce0,
        Key_q0,
        Key_address1,
        Key_ce1,
        Key_q1
);

parameter    ap_ST_fsm_state1 = 38'd1;
parameter    ap_ST_fsm_state2 = 38'd2;
parameter    ap_ST_fsm_state3 = 38'd4;
parameter    ap_ST_fsm_state4 = 38'd8;
parameter    ap_ST_fsm_state5 = 38'd16;
parameter    ap_ST_fsm_state6 = 38'd32;
parameter    ap_ST_fsm_state7 = 38'd64;
parameter    ap_ST_fsm_state8 = 38'd128;
parameter    ap_ST_fsm_state9 = 38'd256;
parameter    ap_ST_fsm_state10 = 38'd512;
parameter    ap_ST_fsm_state11 = 38'd1024;
parameter    ap_ST_fsm_state12 = 38'd2048;
parameter    ap_ST_fsm_state13 = 38'd4096;
parameter    ap_ST_fsm_state14 = 38'd8192;
parameter    ap_ST_fsm_state15 = 38'd16384;
parameter    ap_ST_fsm_state16 = 38'd32768;
parameter    ap_ST_fsm_state17 = 38'd65536;
parameter    ap_ST_fsm_state18 = 38'd131072;
parameter    ap_ST_fsm_state19 = 38'd262144;
parameter    ap_ST_fsm_state20 = 38'd524288;
parameter    ap_ST_fsm_state21 = 38'd1048576;
parameter    ap_ST_fsm_state22 = 38'd2097152;
parameter    ap_ST_fsm_state23 = 38'd4194304;
parameter    ap_ST_fsm_state24 = 38'd8388608;
parameter    ap_ST_fsm_state25 = 38'd16777216;
parameter    ap_ST_fsm_state26 = 38'd33554432;
parameter    ap_ST_fsm_state27 = 38'd67108864;
parameter    ap_ST_fsm_state28 = 38'd134217728;
parameter    ap_ST_fsm_state29 = 38'd268435456;
parameter    ap_ST_fsm_state30 = 38'd536870912;
parameter    ap_ST_fsm_state31 = 38'd1073741824;
parameter    ap_ST_fsm_state32 = 38'd2147483648;
parameter    ap_ST_fsm_state33 = 38'd4294967296;
parameter    ap_ST_fsm_state34 = 38'd8589934592;
parameter    ap_ST_fsm_state35 = 38'd17179869184;
parameter    ap_ST_fsm_state36 = 38'd34359738368;
parameter    ap_ST_fsm_state37 = 38'd68719476736;
parameter    ap_ST_fsm_state38 = 38'd137438953472;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [31:0] state_d0;
input  [31:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [31:0] state_d1;
input  [31:0] state_q1;
output  [4:0] Key_address0;
output   Key_ce0;
input  [31:0] Key_q0;
output  [4:0] Key_address1;
output   Key_ce1;
input  [31:0] Key_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[31:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[31:0] state_d1;

(* fsm_encoding = "none" *) reg   [37:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] reg_274;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state31;
reg   [31:0] reg_281;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state27;
reg   [31:0] reg_288;
reg   [31:0] reg_293;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state28;
reg   [31:0] reg_298;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state29;
reg   [31:0] reg_303;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state4;
wire    grp_AddRoundKey_fu_256_ap_done;
wire   [7:0] temp_4_fu_314_p1;
reg   [7:0] temp_4_reg_734;
wire   [7:0] temp_5_fu_318_p1;
reg   [7:0] temp_5_reg_739;
wire   [7:0] temp_6_fu_322_p1;
reg   [7:0] temp_6_reg_744;
wire   [7:0] temp_7_fu_326_p1;
reg   [7:0] temp_7_reg_749;
reg   [3:0] state_addr_12_reg_754;
wire    ap_CS_fsm_state19;
reg   [3:0] state_addr_13_reg_759;
reg   [3:0] state_addr_14_reg_764;
reg   [3:0] state_addr_15_reg_769;
wire   [2:0] i_fu_396_p2;
reg   [2:0] i_reg_777;
wire   [5:0] round_cast6_cast_fu_402_p1;
reg   [5:0] round_cast6_cast_reg_782;
wire   [0:0] exitcond_i_fu_390_p2;
wire   [3:0] round_1_fu_407_p2;
reg   [3:0] round_1_reg_787;
wire   [7:0] t_fu_413_p1;
reg   [7:0] t_reg_792;
wire   [7:0] tmp_31_fu_417_p1;
reg   [7:0] tmp_31_reg_798;
wire   [31:0] tmp_20_i_fu_584_p2;
reg   [31:0] tmp_20_i_reg_804;
wire    ap_CS_fsm_state21;
wire   [31:0] tmp_27_i_fu_633_p2;
reg   [31:0] tmp_27_i_reg_809;
wire   [7:0] temp_fu_639_p1;
reg   [7:0] temp_reg_814;
wire   [7:0] temp_1_fu_643_p1;
reg   [7:0] temp_1_reg_819;
wire   [7:0] temp_2_fu_647_p1;
reg   [7:0] temp_2_reg_824;
wire   [7:0] temp_3_fu_651_p1;
reg   [7:0] temp_3_reg_829;
reg   [7:0] RoundKey_address0;
reg    RoundKey_ce0;
reg    RoundKey_we0;
wire   [7:0] RoundKey_q0;
reg    RoundKey_ce1;
reg    RoundKey_we1;
wire   [7:0] RoundKey_q1;
wire    grp_KeyExpansion_fu_244_ap_start;
wire    grp_KeyExpansion_fu_244_ap_done;
wire    grp_KeyExpansion_fu_244_ap_idle;
wire    grp_KeyExpansion_fu_244_ap_ready;
wire   [7:0] grp_KeyExpansion_fu_244_RoundKey_address0;
wire    grp_KeyExpansion_fu_244_RoundKey_ce0;
wire    grp_KeyExpansion_fu_244_RoundKey_we0;
wire   [7:0] grp_KeyExpansion_fu_244_RoundKey_d0;
wire   [7:0] grp_KeyExpansion_fu_244_RoundKey_address1;
wire    grp_KeyExpansion_fu_244_RoundKey_ce1;
wire    grp_KeyExpansion_fu_244_RoundKey_we1;
wire   [7:0] grp_KeyExpansion_fu_244_RoundKey_d1;
wire   [4:0] grp_KeyExpansion_fu_244_Key_address0;
wire    grp_KeyExpansion_fu_244_Key_ce0;
wire   [4:0] grp_KeyExpansion_fu_244_Key_address1;
wire    grp_KeyExpansion_fu_244_Key_ce1;
wire    grp_AddRoundKey_fu_256_ap_start;
wire    grp_AddRoundKey_fu_256_ap_idle;
wire    grp_AddRoundKey_fu_256_ap_ready;
reg   [5:0] grp_AddRoundKey_fu_256_round;
wire   [3:0] grp_AddRoundKey_fu_256_state_address0;
wire    grp_AddRoundKey_fu_256_state_ce0;
wire    grp_AddRoundKey_fu_256_state_we0;
wire   [31:0] grp_AddRoundKey_fu_256_state_d0;
wire   [7:0] grp_AddRoundKey_fu_256_RoundKey_address0;
wire    grp_AddRoundKey_fu_256_RoundKey_ce0;
wire    grp_SubBytes_fu_266_ap_start;
wire    grp_SubBytes_fu_266_ap_done;
wire    grp_SubBytes_fu_266_ap_idle;
wire    grp_SubBytes_fu_266_ap_ready;
wire   [3:0] grp_SubBytes_fu_266_state_address0;
wire    grp_SubBytes_fu_266_state_ce0;
wire    grp_SubBytes_fu_266_state_we0;
wire   [31:0] grp_SubBytes_fu_266_state_d0;
reg   [3:0] round_reg_221;
wire    ap_CS_fsm_state23;
reg   [2:0] i_i_reg_233;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state22;
reg    ap_reg_grp_KeyExpansion_fu_244_ap_start;
wire    ap_CS_fsm_state2;
reg    ap_reg_grp_AddRoundKey_fu_256_ap_start;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
reg    ap_reg_grp_SubBytes_fu_266_ap_start;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond_fu_308_p2;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state24;
wire   [31:0] i_i_cast5_fu_346_p1;
wire   [31:0] tmp_19_cast_fu_365_p1;
wire   [31:0] tmp_17_fu_370_p3;
wire   [31:0] tmp_21_cast_fu_385_p1;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state14;
wire   [31:0] tmp_i_fu_330_p1;
wire    ap_CS_fsm_state15;
wire   [31:0] tmp_2_i_fu_334_p1;
wire    ap_CS_fsm_state16;
wire   [31:0] tmp_3_i_fu_338_p1;
wire    ap_CS_fsm_state17;
wire   [31:0] tmp_4_i_fu_342_p1;
wire   [31:0] tmp_2_i6_fu_483_p2;
wire   [31:0] tmp_13_i_fu_533_p2;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state32;
wire   [31:0] tmp_i1_fu_655_p1;
wire    ap_CS_fsm_state33;
wire   [31:0] tmp_2_i1_fu_659_p1;
wire    ap_CS_fsm_state34;
wire   [31:0] tmp_3_i1_fu_663_p1;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire   [31:0] tmp_4_i1_fu_667_p1;
wire   [3:0] i_i_cast5_cast_fu_355_p1;
wire   [3:0] tmp_s_fu_359_p2;
wire   [4:0] i_i_cast5_cast1_fu_351_p1;
wire   [4:0] tmp_18_fu_379_p2;
wire   [7:0] Tm_fu_425_p2;
wire   [7:0] tmp_33_fu_429_p1;
wire   [7:0] tmp_fu_433_p2;
wire   [7:0] tmp_32_fu_421_p1;
wire   [0:0] tmp_35_fu_451_p3;
wire   [7:0] tmp_34_fu_445_p2;
wire   [7:0] Tmp_fu_439_p2;
wire   [7:0] tmp1_fu_467_p2;
wire   [7:0] tmp_9_i_cast_cast_fu_459_p3;
wire   [7:0] tmp_i_37_fu_473_p2;
wire   [31:0] tmp_1_i_fu_479_p1;
wire   [7:0] Tm_1_fu_490_p2;
wire   [0:0] tmp_37_fu_501_p3;
wire   [7:0] tmp_36_fu_495_p2;
wire   [7:0] tmp2_fu_517_p2;
wire   [7:0] tmp_5_i_cast_cast_fu_509_p3;
wire   [7:0] tmp_11_i_fu_523_p2;
wire   [31:0] tmp_12_i_fu_529_p1;
wire   [7:0] Tm_2_fu_540_p2;
wire   [0:0] tmp_39_fu_552_p3;
wire   [7:0] tmp_16_i_cast_cast_fu_560_p3;
wire   [7:0] tmp3_fu_568_p2;
wire   [7:0] tmp_38_fu_546_p2;
wire   [7:0] tmp_18_i_fu_574_p2;
wire   [31:0] tmp_19_i_fu_580_p1;
wire   [7:0] Tm_3_fu_590_p2;
wire   [0:0] tmp_41_fu_601_p3;
wire   [7:0] tmp_23_i_cast_cast_fu_609_p3;
wire   [7:0] tmp4_fu_617_p2;
wire   [7:0] tmp_40_fu_595_p2;
wire   [7:0] tmp_25_i_fu_623_p2;
wire   [31:0] tmp_26_i_fu_629_p1;
reg   [37:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 38'd1;
#0 ap_reg_grp_KeyExpansion_fu_244_ap_start = 1'b0;
#0 ap_reg_grp_AddRoundKey_fu_256_ap_start = 1'b0;
#0 ap_reg_grp_SubBytes_fu_266_ap_start = 1'b0;
end

Cipher_RoundKey #(
    .DataWidth( 8 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
RoundKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RoundKey_address0),
    .ce0(RoundKey_ce0),
    .we0(RoundKey_we0),
    .d0(grp_KeyExpansion_fu_244_RoundKey_d0),
    .q0(RoundKey_q0),
    .address1(grp_KeyExpansion_fu_244_RoundKey_address1),
    .ce1(RoundKey_ce1),
    .we1(RoundKey_we1),
    .d1(grp_KeyExpansion_fu_244_RoundKey_d1),
    .q1(RoundKey_q1)
);

KeyExpansion grp_KeyExpansion_fu_244(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeyExpansion_fu_244_ap_start),
    .ap_done(grp_KeyExpansion_fu_244_ap_done),
    .ap_idle(grp_KeyExpansion_fu_244_ap_idle),
    .ap_ready(grp_KeyExpansion_fu_244_ap_ready),
    .RoundKey_address0(grp_KeyExpansion_fu_244_RoundKey_address0),
    .RoundKey_ce0(grp_KeyExpansion_fu_244_RoundKey_ce0),
    .RoundKey_we0(grp_KeyExpansion_fu_244_RoundKey_we0),
    .RoundKey_d0(grp_KeyExpansion_fu_244_RoundKey_d0),
    .RoundKey_q0(RoundKey_q0),
    .RoundKey_address1(grp_KeyExpansion_fu_244_RoundKey_address1),
    .RoundKey_ce1(grp_KeyExpansion_fu_244_RoundKey_ce1),
    .RoundKey_we1(grp_KeyExpansion_fu_244_RoundKey_we1),
    .RoundKey_d1(grp_KeyExpansion_fu_244_RoundKey_d1),
    .RoundKey_q1(RoundKey_q1),
    .Key_address0(grp_KeyExpansion_fu_244_Key_address0),
    .Key_ce0(grp_KeyExpansion_fu_244_Key_ce0),
    .Key_q0(Key_q0),
    .Key_address1(grp_KeyExpansion_fu_244_Key_address1),
    .Key_ce1(grp_KeyExpansion_fu_244_Key_ce1),
    .Key_q1(Key_q1)
);

AddRoundKey grp_AddRoundKey_fu_256(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AddRoundKey_fu_256_ap_start),
    .ap_done(grp_AddRoundKey_fu_256_ap_done),
    .ap_idle(grp_AddRoundKey_fu_256_ap_idle),
    .ap_ready(grp_AddRoundKey_fu_256_ap_ready),
    .round(grp_AddRoundKey_fu_256_round),
    .state_address0(grp_AddRoundKey_fu_256_state_address0),
    .state_ce0(grp_AddRoundKey_fu_256_state_ce0),
    .state_we0(grp_AddRoundKey_fu_256_state_we0),
    .state_d0(grp_AddRoundKey_fu_256_state_d0),
    .state_q0(state_q0),
    .RoundKey_address0(grp_AddRoundKey_fu_256_RoundKey_address0),
    .RoundKey_ce0(grp_AddRoundKey_fu_256_RoundKey_ce0),
    .RoundKey_q0(RoundKey_q0)
);

SubBytes grp_SubBytes_fu_266(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_SubBytes_fu_266_ap_start),
    .ap_done(grp_SubBytes_fu_266_ap_done),
    .ap_idle(grp_SubBytes_fu_266_ap_idle),
    .ap_ready(grp_SubBytes_fu_266_ap_ready),
    .state_address0(grp_SubBytes_fu_266_state_address0),
    .state_ce0(grp_SubBytes_fu_266_state_ce0),
    .state_we0(grp_SubBytes_fu_266_state_we0),
    .state_d0(grp_SubBytes_fu_266_state_d0),
    .state_q0(state_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_AddRoundKey_fu_256_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state19) & (exitcond_i_fu_390_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state37))) begin
            ap_reg_grp_AddRoundKey_fu_256_ap_start <= 1'b1;
        end else if ((1'b1 == grp_AddRoundKey_fu_256_ap_ready)) begin
            ap_reg_grp_AddRoundKey_fu_256_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_KeyExpansion_fu_244_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_reg_grp_KeyExpansion_fu_244_ap_start <= 1'b1;
        end else if ((1'b1 == grp_KeyExpansion_fu_244_ap_ready)) begin
            ap_reg_grp_KeyExpansion_fu_244_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_SubBytes_fu_266_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state5) & (exitcond_fu_308_p2 == 1'd0)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_308_p2)))) begin
            ap_reg_grp_SubBytes_fu_266_ap_start <= 1'b1;
        end else if ((1'b1 == grp_SubBytes_fu_266_ap_ready)) begin
            ap_reg_grp_SubBytes_fu_266_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        i_i_reg_233 <= i_reg_777;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i_i_reg_233 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_274 <= state_q0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state26))) begin
        reg_274 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_281 <= state_q1;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state27))) begin
        reg_281 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_AddRoundKey_fu_256_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state23)) begin
            round_reg_221 <= round_1_reg_787;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            round_reg_221 <= 4'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        i_reg_777 <= i_fu_396_p2;
        state_addr_12_reg_754[2 : 0] <= i_i_cast5_fu_346_p1[2 : 0];
        state_addr_13_reg_759 <= tmp_19_cast_fu_365_p1;
        state_addr_14_reg_764[2 : 0] <= tmp_17_fu_370_p3[2 : 0];
        state_addr_15_reg_769 <= tmp_21_cast_fu_385_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state27))) begin
        reg_288 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state28))) begin
        reg_293 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state29))) begin
        reg_298 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_303 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & (exitcond_i_fu_390_p2 == 1'd1))) begin
        round_1_reg_787 <= round_1_fu_407_p2;
        round_cast6_cast_reg_782[3 : 0] <= round_cast6_cast_fu_402_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        t_reg_792 <= t_fu_413_p1;
        tmp_31_reg_798 <= tmp_31_fu_417_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        temp_1_reg_819 <= temp_1_fu_643_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        temp_2_reg_824 <= temp_2_fu_647_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state30)) begin
        temp_3_reg_829 <= temp_3_fu_651_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_4_reg_734 <= temp_4_fu_314_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_5_reg_739 <= temp_5_fu_318_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        temp_6_reg_744 <= temp_6_fu_322_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_7_reg_749 <= temp_7_fu_326_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        temp_reg_814 <= temp_fu_639_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        tmp_20_i_reg_804 <= tmp_20_i_fu_584_p2;
        tmp_27_i_reg_809 <= tmp_27_i_fu_633_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state38))) begin
        RoundKey_address0 = grp_AddRoundKey_fu_256_RoundKey_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_address0 = grp_KeyExpansion_fu_244_RoundKey_address0;
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state38))) begin
        RoundKey_ce0 = grp_AddRoundKey_fu_256_RoundKey_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_ce0 = grp_KeyExpansion_fu_244_RoundKey_ce0;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_ce1 = grp_KeyExpansion_fu_244_RoundKey_ce1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_we0 = grp_KeyExpansion_fu_244_RoundKey_we0;
    end else begin
        RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_we1 = grp_KeyExpansion_fu_244_RoundKey_we1;
    end else begin
        RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_AddRoundKey_fu_256_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_AddRoundKey_fu_256_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_AddRoundKey_fu_256_round = 6'd10;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        grp_AddRoundKey_fu_256_round = round_cast6_cast_reg_782;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        grp_AddRoundKey_fu_256_round = 6'd0;
    end else begin
        grp_AddRoundKey_fu_256_round = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        state_address0 = state_addr_12_reg_754;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        state_address0 = state_addr_14_reg_764;
    end else if (((1'b1 == ap_CS_fsm_state19) & (exitcond_i_fu_390_p2 == 1'd0))) begin
        state_address0 = i_i_cast5_fu_346_p1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state36))) begin
        state_address0 = 32'd14;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35))) begin
        state_address0 = 32'd12;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34))) begin
        state_address0 = 32'd9;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state33))) begin
        state_address0 = 32'd8;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state32))) begin
        state_address0 = 32'd6;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state25))) begin
        state_address0 = 32'd4;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state24))) begin
        state_address0 = grp_SubBytes_fu_266_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state38))) begin
        state_address0 = grp_AddRoundKey_fu_256_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state21)) begin
        state_address1 = state_addr_13_reg_759;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22))) begin
        state_address1 = state_addr_15_reg_769;
    end else if (((1'b1 == ap_CS_fsm_state19) & (exitcond_i_fu_390_p2 == 1'd0))) begin
        state_address1 = tmp_19_cast_fu_365_p1;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state36))) begin
        state_address1 = 32'd13;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35))) begin
        state_address1 = 32'd15;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34))) begin
        state_address1 = 32'd11;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state33))) begin
        state_address1 = 32'd10;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state32))) begin
        state_address1 = 32'd7;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state25))) begin
        state_address1 = 32'd5;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | ((1'b1 == ap_CS_fsm_state19) & (exitcond_i_fu_390_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36))) begin
        state_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state24))) begin
        state_ce0 = grp_SubBytes_fu_266_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state38))) begin
        state_ce0 = grp_AddRoundKey_fu_256_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | ((1'b1 == ap_CS_fsm_state19) & (exitcond_i_fu_390_p2 == 1'd0)) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        state_d0 = tmp_20_i_reg_804;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_d0 = tmp_2_i6_fu_483_p2;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state36))) begin
        state_d0 = reg_281;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35))) begin
        state_d0 = reg_303;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34))) begin
        state_d0 = reg_298;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state33))) begin
        state_d0 = reg_293;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state32))) begin
        state_d0 = reg_288;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31))) begin
        state_d0 = reg_274;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state24))) begin
        state_d0 = grp_SubBytes_fu_266_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state38))) begin
        state_d0 = grp_AddRoundKey_fu_256_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        state_d1 = tmp_4_i1_fu_667_p1;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        state_d1 = tmp_3_i1_fu_663_p1;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        state_d1 = tmp_2_i1_fu_659_p1;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        state_d1 = tmp_i1_fu_655_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_d1 = tmp_27_i_reg_809;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        state_d1 = tmp_13_i_fu_533_p2;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_d1 = tmp_4_i_fu_342_p1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35))) begin
        state_d1 = reg_274;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_d1 = tmp_3_i_fu_338_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d1 = tmp_2_i_fu_334_p1;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d1 = tmp_i_fu_330_p1;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31))) begin
        state_d1 = reg_281;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36))) begin
        state_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state24))) begin
        state_we0 = grp_SubBytes_fu_266_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state38))) begin
        state_we0 = grp_AddRoundKey_fu_256_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_KeyExpansion_fu_244_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_AddRoundKey_fu_256_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond_fu_308_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_SubBytes_fu_266_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            if (((1'b1 == ap_CS_fsm_state19) & (exitcond_i_fu_390_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state23 : begin
            if (((grp_AddRoundKey_fu_256_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state23))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & (grp_SubBytes_fu_266_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            if (((grp_AddRoundKey_fu_256_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state38))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Key_address0 = grp_KeyExpansion_fu_244_Key_address0;

assign Key_address1 = grp_KeyExpansion_fu_244_Key_address1;

assign Key_ce0 = grp_KeyExpansion_fu_244_Key_ce0;

assign Key_ce1 = grp_KeyExpansion_fu_244_Key_ce1;

assign Tm_1_fu_490_p2 = (tmp_32_fu_421_p1 ^ tmp_31_reg_798);

assign Tm_2_fu_540_p2 = (tmp_33_fu_429_p1 ^ tmp_32_fu_421_p1);

assign Tm_3_fu_590_p2 = (tmp_33_fu_429_p1 ^ t_reg_792);

assign Tm_fu_425_p2 = (tmp_31_reg_798 ^ t_reg_792);

assign Tmp_fu_439_p2 = (tmp_fu_433_p2 ^ tmp_32_fu_421_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond_fu_308_p2 = ((round_reg_221 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_i_fu_390_p2 = ((i_i_reg_233 == 3'd4) ? 1'b1 : 1'b0);

assign grp_AddRoundKey_fu_256_ap_start = ap_reg_grp_AddRoundKey_fu_256_ap_start;

assign grp_KeyExpansion_fu_244_ap_start = ap_reg_grp_KeyExpansion_fu_244_ap_start;

assign grp_SubBytes_fu_266_ap_start = ap_reg_grp_SubBytes_fu_266_ap_start;

assign i_fu_396_p2 = (i_i_reg_233 + 3'd1);

assign i_i_cast5_cast1_fu_351_p1 = i_i_reg_233;

assign i_i_cast5_cast_fu_355_p1 = i_i_reg_233;

assign i_i_cast5_fu_346_p1 = i_i_reg_233;

assign round_1_fu_407_p2 = (round_reg_221 + 4'd1);

assign round_cast6_cast_fu_402_p1 = round_reg_221;

assign t_fu_413_p1 = state_q0[7:0];

assign temp_1_fu_643_p1 = state_q0[7:0];

assign temp_2_fu_647_p1 = state_q0[7:0];

assign temp_3_fu_651_p1 = state_q0[7:0];

assign temp_4_fu_314_p1 = state_q0[7:0];

assign temp_5_fu_318_p1 = state_q0[7:0];

assign temp_6_fu_322_p1 = state_q0[7:0];

assign temp_7_fu_326_p1 = state_q0[7:0];

assign temp_fu_639_p1 = state_q0[7:0];

assign tmp1_fu_467_p2 = (tmp_34_fu_445_p2 ^ Tmp_fu_439_p2);

assign tmp2_fu_517_p2 = (tmp_36_fu_495_p2 ^ Tmp_fu_439_p2);

assign tmp3_fu_568_p2 = (Tmp_fu_439_p2 ^ tmp_16_i_cast_cast_fu_560_p3);

assign tmp4_fu_617_p2 = (Tmp_fu_439_p2 ^ tmp_23_i_cast_cast_fu_609_p3);

assign tmp_11_i_fu_523_p2 = (tmp2_fu_517_p2 ^ tmp_5_i_cast_cast_fu_509_p3);

assign tmp_12_i_fu_529_p1 = tmp_11_i_fu_523_p2;

assign tmp_13_i_fu_533_p2 = (reg_281 ^ tmp_12_i_fu_529_p1);

assign tmp_16_i_cast_cast_fu_560_p3 = ((tmp_39_fu_552_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_17_fu_370_p3 = {{29'd1}, {i_i_reg_233}};

assign tmp_18_fu_379_p2 = (i_i_cast5_cast1_fu_351_p1 + 5'd12);

assign tmp_18_i_fu_574_p2 = (tmp3_fu_568_p2 ^ tmp_38_fu_546_p2);

assign tmp_19_cast_fu_365_p1 = tmp_s_fu_359_p2;

assign tmp_19_i_fu_580_p1 = tmp_18_i_fu_574_p2;

assign tmp_1_i_fu_479_p1 = tmp_i_37_fu_473_p2;

assign tmp_20_i_fu_584_p2 = (state_q0 ^ tmp_19_i_fu_580_p1);

assign tmp_21_cast_fu_385_p1 = tmp_18_fu_379_p2;

assign tmp_23_i_cast_cast_fu_609_p3 = ((tmp_41_fu_601_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_25_i_fu_623_p2 = (tmp4_fu_617_p2 ^ tmp_40_fu_595_p2);

assign tmp_26_i_fu_629_p1 = tmp_25_i_fu_623_p2;

assign tmp_27_i_fu_633_p2 = (state_q1 ^ tmp_26_i_fu_629_p1);

assign tmp_2_i1_fu_659_p1 = temp_1_reg_819;

assign tmp_2_i6_fu_483_p2 = (reg_274 ^ tmp_1_i_fu_479_p1);

assign tmp_2_i_fu_334_p1 = temp_5_reg_739;

assign tmp_31_fu_417_p1 = state_q1[7:0];

assign tmp_32_fu_421_p1 = state_q0[7:0];

assign tmp_33_fu_429_p1 = state_q1[7:0];

assign tmp_34_fu_445_p2 = Tm_fu_425_p2 << 8'd1;

assign tmp_35_fu_451_p3 = Tm_fu_425_p2[32'd7];

assign tmp_36_fu_495_p2 = Tm_1_fu_490_p2 << 8'd1;

assign tmp_37_fu_501_p3 = Tm_1_fu_490_p2[32'd7];

assign tmp_38_fu_546_p2 = Tm_2_fu_540_p2 << 8'd1;

assign tmp_39_fu_552_p3 = Tm_2_fu_540_p2[32'd7];

assign tmp_3_i1_fu_663_p1 = temp_2_reg_824;

assign tmp_3_i_fu_338_p1 = temp_6_reg_744;

assign tmp_40_fu_595_p2 = Tm_3_fu_590_p2 << 8'd1;

assign tmp_41_fu_601_p3 = Tm_3_fu_590_p2[32'd7];

assign tmp_4_i1_fu_667_p1 = temp_3_reg_829;

assign tmp_4_i_fu_342_p1 = temp_7_reg_749;

assign tmp_5_i_cast_cast_fu_509_p3 = ((tmp_37_fu_501_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_9_i_cast_cast_fu_459_p3 = ((tmp_35_fu_451_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_fu_433_p2 = (Tm_fu_425_p2 ^ tmp_33_fu_429_p1);

assign tmp_i1_fu_655_p1 = temp_reg_814;

assign tmp_i_37_fu_473_p2 = (tmp1_fu_467_p2 ^ tmp_9_i_cast_cast_fu_459_p3);

assign tmp_i_fu_330_p1 = temp_4_reg_734;

assign tmp_s_fu_359_p2 = (i_i_cast5_cast_fu_355_p1 + 4'd4);

always @ (posedge ap_clk) begin
    state_addr_12_reg_754[3] <= 1'b0;
    state_addr_14_reg_764[3] <= 1'b1;
    round_cast6_cast_reg_782[5:4] <= 2'b00;
end

endmodule //Cipher
