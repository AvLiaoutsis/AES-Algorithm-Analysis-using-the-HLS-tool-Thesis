// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Cipher_HH_
#define _Cipher_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "SubBytes.h"
#include "KeyExpansion.h"
#include "Cipher_RoundKey.h"

namespace ap_rtl {

struct Cipher : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<2> > state_address0;
    sc_out< sc_logic > state_ce0;
    sc_out< sc_logic > state_we0;
    sc_out< sc_lv<128> > state_d0;
    sc_in< sc_lv<128> > state_q0;
    sc_out< sc_lv<2> > state_address1;
    sc_out< sc_logic > state_ce1;
    sc_out< sc_logic > state_we1;
    sc_out< sc_lv<128> > state_d1;
    sc_in< sc_lv<128> > state_q1;
    sc_out< sc_lv<5> > Key_address0;
    sc_out< sc_logic > Key_ce0;
    sc_in< sc_lv<32> > Key_q0;
    sc_out< sc_lv<5> > Key_address1;
    sc_out< sc_logic > Key_ce1;
    sc_in< sc_lv<32> > Key_q1;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    Cipher(sc_module_name name);
    SC_HAS_PROCESS(Cipher);

    ~Cipher();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Cipher_RoundKey* RoundKey_U;
    SubBytes* grp_SubBytes_fu_149;
    KeyExpansion* grp_KeyExpansion_fu_158;
    sc_signal< sc_lv<23> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<4> > round_reg_137;
    sc_signal< sc_lv<1> > exitcond1_i_fu_173_p2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<3> > i_fu_179_p2;
    sc_signal< sc_lv<3> > i_reg_323;
    sc_signal< sc_lv<4> > tmp_i_fu_189_p3;
    sc_signal< sc_lv<4> > tmp_i_reg_328;
    sc_signal< sc_lv<2> > state_addr_reg_339;
    sc_signal< sc_lv<32> > RoundKey_q0;
    sc_signal< sc_lv<32> > RoundKey_load_reg_349;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > RoundKey_q1;
    sc_signal< sc_lv<32> > RoundKey_load_34_reg_354;
    sc_signal< sc_lv<1> > exitcond_fu_302_p2;
    sc_signal< sc_lv<1> > exitcond_reg_369;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state6_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state14_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_reg_369;
    sc_signal< sc_lv<4> > tmp_fu_313_p2;
    sc_signal< sc_lv<4> > tmp_reg_373;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage1;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_state7_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state15_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_flag00011001;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state6;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_state13_pp0_stage7_iter0;
    sc_signal< bool > ap_block_pp0_stage7_flag00011011;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage7;
    sc_signal< bool > ap_block_state8_pp0_stage2_iter0;
    sc_signal< bool > ap_block_state16_pp0_stage2_iter1;
    sc_signal< bool > ap_block_pp0_stage2_flag00011011;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage2;
    sc_signal< sc_lv<8> > RoundKey_address0;
    sc_signal< sc_logic > RoundKey_ce0;
    sc_signal< sc_logic > RoundKey_we0;
    sc_signal< sc_lv<8> > RoundKey_address1;
    sc_signal< sc_logic > RoundKey_ce1;
    sc_signal< sc_logic > RoundKey_we1;
    sc_signal< sc_logic > grp_SubBytes_fu_149_ap_start;
    sc_signal< sc_logic > grp_SubBytes_fu_149_ap_done;
    sc_signal< sc_logic > grp_SubBytes_fu_149_ap_idle;
    sc_signal< sc_logic > grp_SubBytes_fu_149_ap_ready;
    sc_signal< sc_lv<2> > grp_SubBytes_fu_149_state_address0;
    sc_signal< sc_logic > grp_SubBytes_fu_149_state_ce0;
    sc_signal< sc_logic > grp_SubBytes_fu_149_state_we0;
    sc_signal< sc_lv<128> > grp_SubBytes_fu_149_state_d0;
    sc_signal< sc_lv<2> > grp_SubBytes_fu_149_state_address1;
    sc_signal< sc_logic > grp_SubBytes_fu_149_state_ce1;
    sc_signal< sc_logic > grp_SubBytes_fu_149_state_we1;
    sc_signal< sc_lv<128> > grp_SubBytes_fu_149_state_d1;
    sc_signal< sc_lv<6> > grp_SubBytes_fu_149_round;
    sc_signal< sc_lv<8> > grp_SubBytes_fu_149_RoundKey_address0;
    sc_signal< sc_logic > grp_SubBytes_fu_149_RoundKey_ce0;
    sc_signal< sc_lv<8> > grp_SubBytes_fu_149_RoundKey_address1;
    sc_signal< sc_logic > grp_SubBytes_fu_149_RoundKey_ce1;
    sc_signal< sc_logic > grp_KeyExpansion_fu_158_ap_start;
    sc_signal< sc_logic > grp_KeyExpansion_fu_158_ap_done;
    sc_signal< sc_logic > grp_KeyExpansion_fu_158_ap_idle;
    sc_signal< sc_logic > grp_KeyExpansion_fu_158_ap_ready;
    sc_signal< sc_lv<8> > grp_KeyExpansion_fu_158_RoundKey_address0;
    sc_signal< sc_logic > grp_KeyExpansion_fu_158_RoundKey_ce0;
    sc_signal< sc_logic > grp_KeyExpansion_fu_158_RoundKey_we0;
    sc_signal< sc_lv<32> > grp_KeyExpansion_fu_158_RoundKey_d0;
    sc_signal< sc_lv<8> > grp_KeyExpansion_fu_158_RoundKey_address1;
    sc_signal< sc_logic > grp_KeyExpansion_fu_158_RoundKey_ce1;
    sc_signal< sc_logic > grp_KeyExpansion_fu_158_RoundKey_we1;
    sc_signal< sc_lv<32> > grp_KeyExpansion_fu_158_RoundKey_d1;
    sc_signal< sc_lv<5> > grp_KeyExpansion_fu_158_Key_address0;
    sc_signal< sc_logic > grp_KeyExpansion_fu_158_Key_ce0;
    sc_signal< sc_lv<5> > grp_KeyExpansion_fu_158_Key_address1;
    sc_signal< sc_logic > grp_KeyExpansion_fu_158_Key_ce1;
    sc_signal< sc_lv<3> > i_i_reg_126;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<4> > round_phi_fu_141_p4;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_logic > ap_reg_grp_SubBytes_fu_149_ap_start;
    sc_signal< sc_lv<23> > ap_NS_fsm;
    sc_signal< sc_logic > ap_NS_fsm_state17;
    sc_signal< bool > ap_block_pp0_stage2_flag00000000;
    sc_signal< bool > ap_block_pp0_stage1_flag00000000;
    sc_signal< bool > ap_block_pp0_stage2_flag00011001;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage3;
    sc_signal< bool > ap_block_state9_pp0_stage3_iter0;
    sc_signal< bool > ap_block_pp0_stage3_flag00011001;
    sc_signal< bool > ap_block_pp0_stage3_flag00000000;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage4;
    sc_signal< bool > ap_block_state10_pp0_stage4_iter0;
    sc_signal< bool > ap_block_pp0_stage4_flag00011001;
    sc_signal< bool > ap_block_pp0_stage4_flag00000000;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage5;
    sc_signal< bool > ap_block_state11_pp0_stage5_iter0;
    sc_signal< bool > ap_block_pp0_stage5_flag00011001;
    sc_signal< bool > ap_block_pp0_stage5_flag00000000;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage6;
    sc_signal< bool > ap_block_state12_pp0_stage6_iter0;
    sc_signal< bool > ap_block_pp0_stage6_flag00011001;
    sc_signal< bool > ap_block_pp0_stage6_flag00000000;
    sc_signal< bool > ap_block_pp0_stage7_flag00011001;
    sc_signal< bool > ap_block_pp0_stage7_flag00000000;
    sc_signal< sc_logic > ap_CS_fsm_state17;
    sc_signal< sc_logic > ap_CS_fsm_state18;
    sc_signal< sc_logic > ap_CS_fsm_state19;
    sc_signal< sc_logic > ap_CS_fsm_state20;
    sc_signal< sc_logic > ap_CS_fsm_state21;
    sc_signal< sc_logic > ap_CS_fsm_state22;
    sc_signal< sc_logic > ap_CS_fsm_state23;
    sc_signal< sc_logic > ap_CS_fsm_state26;
    sc_signal< sc_lv<6> > round_cast1_cast_fu_308_p1;
    sc_signal< sc_logic > ap_CS_fsm_state24;
    sc_signal< sc_logic > ap_CS_fsm_state25;
    sc_signal< sc_logic > ap_reg_grp_KeyExpansion_fu_158_ap_start;
    sc_signal< sc_lv<32> > tmp_i_cast_fu_197_p1;
    sc_signal< sc_lv<32> > i_i_cast2_fu_168_p1;
    sc_signal< sc_lv<32> > sum3_i_cast_fu_208_p1;
    sc_signal< sc_lv<32> > sum3_1_i_cast_fu_218_p1;
    sc_signal< sc_lv<32> > sum3_2_i_cast_fu_228_p1;
    sc_signal< sc_lv<128> > tmp_118_i_fu_289_p5;
    sc_signal< sc_lv<2> > tmp_112_fu_185_p1;
    sc_signal< sc_lv<4> > sum3_i_fu_202_p2;
    sc_signal< sc_lv<4> > sum3_1_i_fu_213_p2;
    sc_signal< sc_lv<4> > sum3_2_i_fu_223_p2;
    sc_signal< sc_lv<32> > tmp_113_fu_233_p1;
    sc_signal< sc_lv<32> > tmp_113_i_fu_242_p4;
    sc_signal< sc_lv<32> > tmp_115_i_fu_257_p4;
    sc_signal< sc_lv<32> > tmp_117_i_fu_273_p4;
    sc_signal< sc_lv<32> > tmp_84_3_i_fu_283_p2;
    sc_signal< sc_lv<32> > tmp_84_2_i_fu_267_p2;
    sc_signal< sc_lv<32> > tmp_84_1_i_fu_252_p2;
    sc_signal< sc_lv<32> > tmp_84_i_fu_237_p2;
    sc_signal< bool > ap_block_pp0_stage1_flag00011011;
    sc_signal< bool > ap_block_pp0_stage3_flag00011011;
    sc_signal< bool > ap_block_pp0_stage4_flag00011011;
    sc_signal< bool > ap_block_pp0_stage5_flag00011011;
    sc_signal< bool > ap_block_pp0_stage6_flag00011011;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<23> ap_ST_fsm_state1;
    static const sc_lv<23> ap_ST_fsm_state2;
    static const sc_lv<23> ap_ST_fsm_state3;
    static const sc_lv<23> ap_ST_fsm_state4;
    static const sc_lv<23> ap_ST_fsm_state5;
    static const sc_lv<23> ap_ST_fsm_pp0_stage0;
    static const sc_lv<23> ap_ST_fsm_pp0_stage1;
    static const sc_lv<23> ap_ST_fsm_pp0_stage2;
    static const sc_lv<23> ap_ST_fsm_pp0_stage3;
    static const sc_lv<23> ap_ST_fsm_pp0_stage4;
    static const sc_lv<23> ap_ST_fsm_pp0_stage5;
    static const sc_lv<23> ap_ST_fsm_pp0_stage6;
    static const sc_lv<23> ap_ST_fsm_pp0_stage7;
    static const sc_lv<23> ap_ST_fsm_state17;
    static const sc_lv<23> ap_ST_fsm_state18;
    static const sc_lv<23> ap_ST_fsm_state19;
    static const sc_lv<23> ap_ST_fsm_state20;
    static const sc_lv<23> ap_ST_fsm_state21;
    static const sc_lv<23> ap_ST_fsm_state22;
    static const sc_lv<23> ap_ST_fsm_state23;
    static const sc_lv<23> ap_ST_fsm_state24;
    static const sc_lv<23> ap_ST_fsm_state25;
    static const sc_lv<23> ap_ST_fsm_state26;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<32> ap_const_lv32_10;
    static const sc_lv<32> ap_const_lv32_11;
    static const sc_lv<32> ap_const_lv32_12;
    static const sc_lv<32> ap_const_lv32_13;
    static const sc_lv<32> ap_const_lv32_16;
    static const sc_lv<6> ap_const_lv6_A;
    static const sc_lv<32> ap_const_lv32_14;
    static const sc_lv<32> ap_const_lv32_15;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<32> ap_const_lv32_20;
    static const sc_lv<32> ap_const_lv32_3F;
    static const sc_lv<32> ap_const_lv32_40;
    static const sc_lv<32> ap_const_lv32_5F;
    static const sc_lv<32> ap_const_lv32_60;
    static const sc_lv<32> ap_const_lv32_7F;
    static const sc_lv<4> ap_const_lv4_A;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_Key_address0();
    void thread_Key_address1();
    void thread_Key_ce0();
    void thread_Key_ce1();
    void thread_RoundKey_address0();
    void thread_RoundKey_address1();
    void thread_RoundKey_ce0();
    void thread_RoundKey_ce1();
    void thread_RoundKey_we0();
    void thread_RoundKey_we1();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage1();
    void thread_ap_CS_fsm_pp0_stage2();
    void thread_ap_CS_fsm_pp0_stage3();
    void thread_ap_CS_fsm_pp0_stage4();
    void thread_ap_CS_fsm_pp0_stage5();
    void thread_ap_CS_fsm_pp0_stage6();
    void thread_ap_CS_fsm_pp0_stage7();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state17();
    void thread_ap_CS_fsm_state18();
    void thread_ap_CS_fsm_state19();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state20();
    void thread_ap_CS_fsm_state21();
    void thread_ap_CS_fsm_state22();
    void thread_ap_CS_fsm_state23();
    void thread_ap_CS_fsm_state24();
    void thread_ap_CS_fsm_state25();
    void thread_ap_CS_fsm_state26();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_NS_fsm_state17();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_pp0_stage1_flag00000000();
    void thread_ap_block_pp0_stage1_flag00011001();
    void thread_ap_block_pp0_stage1_flag00011011();
    void thread_ap_block_pp0_stage2_flag00000000();
    void thread_ap_block_pp0_stage2_flag00011001();
    void thread_ap_block_pp0_stage2_flag00011011();
    void thread_ap_block_pp0_stage3_flag00000000();
    void thread_ap_block_pp0_stage3_flag00011001();
    void thread_ap_block_pp0_stage3_flag00011011();
    void thread_ap_block_pp0_stage4_flag00000000();
    void thread_ap_block_pp0_stage4_flag00011001();
    void thread_ap_block_pp0_stage4_flag00011011();
    void thread_ap_block_pp0_stage5_flag00000000();
    void thread_ap_block_pp0_stage5_flag00011001();
    void thread_ap_block_pp0_stage5_flag00011011();
    void thread_ap_block_pp0_stage6_flag00000000();
    void thread_ap_block_pp0_stage6_flag00011001();
    void thread_ap_block_pp0_stage6_flag00011011();
    void thread_ap_block_pp0_stage7_flag00000000();
    void thread_ap_block_pp0_stage7_flag00011001();
    void thread_ap_block_pp0_stage7_flag00011011();
    void thread_ap_block_state10_pp0_stage4_iter0();
    void thread_ap_block_state11_pp0_stage5_iter0();
    void thread_ap_block_state12_pp0_stage6_iter0();
    void thread_ap_block_state13_pp0_stage7_iter0();
    void thread_ap_block_state14_pp0_stage0_iter1();
    void thread_ap_block_state15_pp0_stage1_iter1();
    void thread_ap_block_state16_pp0_stage2_iter1();
    void thread_ap_block_state6_pp0_stage0_iter0();
    void thread_ap_block_state7_pp0_stage1_iter0();
    void thread_ap_block_state8_pp0_stage2_iter0();
    void thread_ap_block_state9_pp0_stage3_iter0();
    void thread_ap_condition_pp0_exit_iter0_state6();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_exitcond1_i_fu_173_p2();
    void thread_exitcond_fu_302_p2();
    void thread_grp_KeyExpansion_fu_158_ap_start();
    void thread_grp_SubBytes_fu_149_ap_start();
    void thread_grp_SubBytes_fu_149_round();
    void thread_i_fu_179_p2();
    void thread_i_i_cast2_fu_168_p1();
    void thread_round_cast1_cast_fu_308_p1();
    void thread_round_phi_fu_141_p4();
    void thread_state_address0();
    void thread_state_address1();
    void thread_state_ce0();
    void thread_state_ce1();
    void thread_state_d0();
    void thread_state_d1();
    void thread_state_we0();
    void thread_state_we1();
    void thread_sum3_1_i_cast_fu_218_p1();
    void thread_sum3_1_i_fu_213_p2();
    void thread_sum3_2_i_cast_fu_228_p1();
    void thread_sum3_2_i_fu_223_p2();
    void thread_sum3_i_cast_fu_208_p1();
    void thread_sum3_i_fu_202_p2();
    void thread_tmp_112_fu_185_p1();
    void thread_tmp_113_fu_233_p1();
    void thread_tmp_113_i_fu_242_p4();
    void thread_tmp_115_i_fu_257_p4();
    void thread_tmp_117_i_fu_273_p4();
    void thread_tmp_118_i_fu_289_p5();
    void thread_tmp_84_1_i_fu_252_p2();
    void thread_tmp_84_2_i_fu_267_p2();
    void thread_tmp_84_3_i_fu_283_p2();
    void thread_tmp_84_i_fu_237_p2();
    void thread_tmp_fu_313_p2();
    void thread_tmp_i_cast_fu_197_p1();
    void thread_tmp_i_fu_189_p3();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
