// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Cipher.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Cipher::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Cipher::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<23> Cipher::ap_ST_fsm_state1 = "1";
const sc_lv<23> Cipher::ap_ST_fsm_state2 = "10";
const sc_lv<23> Cipher::ap_ST_fsm_state3 = "100";
const sc_lv<23> Cipher::ap_ST_fsm_state4 = "1000";
const sc_lv<23> Cipher::ap_ST_fsm_state5 = "10000";
const sc_lv<23> Cipher::ap_ST_fsm_pp0_stage0 = "100000";
const sc_lv<23> Cipher::ap_ST_fsm_pp0_stage1 = "1000000";
const sc_lv<23> Cipher::ap_ST_fsm_pp0_stage2 = "10000000";
const sc_lv<23> Cipher::ap_ST_fsm_pp0_stage3 = "100000000";
const sc_lv<23> Cipher::ap_ST_fsm_pp0_stage4 = "1000000000";
const sc_lv<23> Cipher::ap_ST_fsm_pp0_stage5 = "10000000000";
const sc_lv<23> Cipher::ap_ST_fsm_pp0_stage6 = "100000000000";
const sc_lv<23> Cipher::ap_ST_fsm_pp0_stage7 = "1000000000000";
const sc_lv<23> Cipher::ap_ST_fsm_state17 = "10000000000000";
const sc_lv<23> Cipher::ap_ST_fsm_state18 = "100000000000000";
const sc_lv<23> Cipher::ap_ST_fsm_state19 = "1000000000000000";
const sc_lv<23> Cipher::ap_ST_fsm_state20 = "10000000000000000";
const sc_lv<23> Cipher::ap_ST_fsm_state21 = "100000000000000000";
const sc_lv<23> Cipher::ap_ST_fsm_state22 = "1000000000000000000";
const sc_lv<23> Cipher::ap_ST_fsm_state23 = "10000000000000000000";
const sc_lv<23> Cipher::ap_ST_fsm_state24 = "100000000000000000000";
const sc_lv<23> Cipher::ap_ST_fsm_state25 = "1000000000000000000000";
const sc_lv<23> Cipher::ap_ST_fsm_state26 = "10000000000000000000000";
const sc_lv<32> Cipher::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Cipher::ap_const_boolean_1 = true;
const sc_lv<32> Cipher::ap_const_lv32_2 = "10";
const sc_lv<1> Cipher::ap_const_lv1_0 = "0";
const sc_lv<32> Cipher::ap_const_lv32_3 = "11";
const sc_lv<32> Cipher::ap_const_lv32_5 = "101";
const bool Cipher::ap_const_boolean_0 = false;
const sc_lv<32> Cipher::ap_const_lv32_6 = "110";
const sc_lv<1> Cipher::ap_const_lv1_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_C = "1100";
const sc_lv<32> Cipher::ap_const_lv32_7 = "111";
const sc_lv<3> Cipher::ap_const_lv3_0 = "000";
const sc_lv<32> Cipher::ap_const_lv32_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_4 = "100";
const sc_lv<4> Cipher::ap_const_lv4_1 = "1";
const sc_lv<32> Cipher::ap_const_lv32_D = "1101";
const sc_lv<32> Cipher::ap_const_lv32_8 = "1000";
const sc_lv<32> Cipher::ap_const_lv32_9 = "1001";
const sc_lv<32> Cipher::ap_const_lv32_A = "1010";
const sc_lv<32> Cipher::ap_const_lv32_B = "1011";
const sc_lv<32> Cipher::ap_const_lv32_E = "1110";
const sc_lv<32> Cipher::ap_const_lv32_F = "1111";
const sc_lv<32> Cipher::ap_const_lv32_10 = "10000";
const sc_lv<32> Cipher::ap_const_lv32_11 = "10001";
const sc_lv<32> Cipher::ap_const_lv32_12 = "10010";
const sc_lv<32> Cipher::ap_const_lv32_13 = "10011";
const sc_lv<32> Cipher::ap_const_lv32_16 = "10110";
const sc_lv<6> Cipher::ap_const_lv6_A = "1010";
const sc_lv<32> Cipher::ap_const_lv32_14 = "10100";
const sc_lv<32> Cipher::ap_const_lv32_15 = "10101";
const sc_lv<3> Cipher::ap_const_lv3_4 = "100";
const sc_lv<3> Cipher::ap_const_lv3_1 = "1";
const sc_lv<2> Cipher::ap_const_lv2_0 = "00";
const sc_lv<4> Cipher::ap_const_lv4_2 = "10";
const sc_lv<4> Cipher::ap_const_lv4_3 = "11";
const sc_lv<32> Cipher::ap_const_lv32_20 = "100000";
const sc_lv<32> Cipher::ap_const_lv32_3F = "111111";
const sc_lv<32> Cipher::ap_const_lv32_40 = "1000000";
const sc_lv<32> Cipher::ap_const_lv32_5F = "1011111";
const sc_lv<32> Cipher::ap_const_lv32_60 = "1100000";
const sc_lv<32> Cipher::ap_const_lv32_7F = "1111111";
const sc_lv<4> Cipher::ap_const_lv4_A = "1010";

Cipher::Cipher(sc_module_name name) : sc_module(name), mVcdFile(0) {
    RoundKey_U = new Cipher_RoundKey("RoundKey_U");
    RoundKey_U->clk(ap_clk);
    RoundKey_U->reset(ap_rst);
    RoundKey_U->address0(RoundKey_address0);
    RoundKey_U->ce0(RoundKey_ce0);
    RoundKey_U->we0(RoundKey_we0);
    RoundKey_U->d0(grp_KeyExpansion_fu_158_RoundKey_d0);
    RoundKey_U->q0(RoundKey_q0);
    RoundKey_U->address1(RoundKey_address1);
    RoundKey_U->ce1(RoundKey_ce1);
    RoundKey_U->we1(RoundKey_we1);
    RoundKey_U->d1(grp_KeyExpansion_fu_158_RoundKey_d1);
    RoundKey_U->q1(RoundKey_q1);
    grp_SubBytes_fu_149 = new SubBytes("grp_SubBytes_fu_149");
    grp_SubBytes_fu_149->ap_clk(ap_clk);
    grp_SubBytes_fu_149->ap_rst(ap_rst);
    grp_SubBytes_fu_149->ap_start(grp_SubBytes_fu_149_ap_start);
    grp_SubBytes_fu_149->ap_done(grp_SubBytes_fu_149_ap_done);
    grp_SubBytes_fu_149->ap_idle(grp_SubBytes_fu_149_ap_idle);
    grp_SubBytes_fu_149->ap_ready(grp_SubBytes_fu_149_ap_ready);
    grp_SubBytes_fu_149->ap_ce(ap_var_for_const0);
    grp_SubBytes_fu_149->state_address0(grp_SubBytes_fu_149_state_address0);
    grp_SubBytes_fu_149->state_ce0(grp_SubBytes_fu_149_state_ce0);
    grp_SubBytes_fu_149->state_we0(grp_SubBytes_fu_149_state_we0);
    grp_SubBytes_fu_149->state_d0(grp_SubBytes_fu_149_state_d0);
    grp_SubBytes_fu_149->state_q0(state_q0);
    grp_SubBytes_fu_149->state_address1(grp_SubBytes_fu_149_state_address1);
    grp_SubBytes_fu_149->state_ce1(grp_SubBytes_fu_149_state_ce1);
    grp_SubBytes_fu_149->state_we1(grp_SubBytes_fu_149_state_we1);
    grp_SubBytes_fu_149->state_d1(grp_SubBytes_fu_149_state_d1);
    grp_SubBytes_fu_149->state_q1(state_q1);
    grp_SubBytes_fu_149->round(grp_SubBytes_fu_149_round);
    grp_SubBytes_fu_149->RoundKey_address0(grp_SubBytes_fu_149_RoundKey_address0);
    grp_SubBytes_fu_149->RoundKey_ce0(grp_SubBytes_fu_149_RoundKey_ce0);
    grp_SubBytes_fu_149->RoundKey_q0(RoundKey_q0);
    grp_SubBytes_fu_149->RoundKey_address1(grp_SubBytes_fu_149_RoundKey_address1);
    grp_SubBytes_fu_149->RoundKey_ce1(grp_SubBytes_fu_149_RoundKey_ce1);
    grp_SubBytes_fu_149->RoundKey_q1(RoundKey_q1);
    grp_KeyExpansion_fu_158 = new KeyExpansion("grp_KeyExpansion_fu_158");
    grp_KeyExpansion_fu_158->ap_clk(ap_clk);
    grp_KeyExpansion_fu_158->ap_rst(ap_rst);
    grp_KeyExpansion_fu_158->ap_start(grp_KeyExpansion_fu_158_ap_start);
    grp_KeyExpansion_fu_158->ap_done(grp_KeyExpansion_fu_158_ap_done);
    grp_KeyExpansion_fu_158->ap_idle(grp_KeyExpansion_fu_158_ap_idle);
    grp_KeyExpansion_fu_158->ap_ready(grp_KeyExpansion_fu_158_ap_ready);
    grp_KeyExpansion_fu_158->RoundKey_address0(grp_KeyExpansion_fu_158_RoundKey_address0);
    grp_KeyExpansion_fu_158->RoundKey_ce0(grp_KeyExpansion_fu_158_RoundKey_ce0);
    grp_KeyExpansion_fu_158->RoundKey_we0(grp_KeyExpansion_fu_158_RoundKey_we0);
    grp_KeyExpansion_fu_158->RoundKey_d0(grp_KeyExpansion_fu_158_RoundKey_d0);
    grp_KeyExpansion_fu_158->RoundKey_q0(RoundKey_q0);
    grp_KeyExpansion_fu_158->RoundKey_address1(grp_KeyExpansion_fu_158_RoundKey_address1);
    grp_KeyExpansion_fu_158->RoundKey_ce1(grp_KeyExpansion_fu_158_RoundKey_ce1);
    grp_KeyExpansion_fu_158->RoundKey_we1(grp_KeyExpansion_fu_158_RoundKey_we1);
    grp_KeyExpansion_fu_158->RoundKey_d1(grp_KeyExpansion_fu_158_RoundKey_d1);
    grp_KeyExpansion_fu_158->RoundKey_q1(RoundKey_q1);
    grp_KeyExpansion_fu_158->Key_address0(grp_KeyExpansion_fu_158_Key_address0);
    grp_KeyExpansion_fu_158->Key_ce0(grp_KeyExpansion_fu_158_Key_ce0);
    grp_KeyExpansion_fu_158->Key_q0(Key_q0);
    grp_KeyExpansion_fu_158->Key_address1(grp_KeyExpansion_fu_158_Key_address1);
    grp_KeyExpansion_fu_158->Key_ce1(grp_KeyExpansion_fu_158_Key_ce1);
    grp_KeyExpansion_fu_158->Key_q1(Key_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Key_address0);
    sensitive << ( grp_KeyExpansion_fu_158_Key_address0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Key_address1);
    sensitive << ( grp_KeyExpansion_fu_158_Key_address1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Key_ce0);
    sensitive << ( grp_KeyExpansion_fu_158_Key_ce0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_Key_ce1);
    sensitive << ( grp_KeyExpansion_fu_158_Key_ce1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_RoundKey_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( grp_SubBytes_fu_149_RoundKey_address0 );
    sensitive << ( grp_KeyExpansion_fu_158_RoundKey_address0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_block_pp0_stage2_flag00000000 );
    sensitive << ( ap_block_pp0_stage1_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_flag00000000 );
    sensitive << ( ap_block_pp0_stage7_flag00000000 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( tmp_i_cast_fu_197_p1 );
    sensitive << ( sum3_1_i_cast_fu_218_p1 );

    SC_METHOD(thread_RoundKey_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( grp_SubBytes_fu_149_RoundKey_address1 );
    sensitive << ( grp_KeyExpansion_fu_158_RoundKey_address1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );
    sensitive << ( ap_block_pp0_stage2_flag00000000 );
    sensitive << ( ap_block_pp0_stage1_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_flag00000000 );
    sensitive << ( ap_block_pp0_stage7_flag00000000 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );
    sensitive << ( sum3_i_cast_fu_208_p1 );
    sensitive << ( sum3_2_i_cast_fu_228_p1 );

    SC_METHOD(thread_RoundKey_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( grp_SubBytes_fu_149_RoundKey_ce0 );
    sensitive << ( grp_KeyExpansion_fu_158_RoundKey_ce0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_pp0_stage2_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_flag00011001 );
    sensitive << ( ap_block_pp0_stage7_flag00011001 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_RoundKey_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( grp_SubBytes_fu_149_RoundKey_ce1 );
    sensitive << ( grp_KeyExpansion_fu_158_RoundKey_ce1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_pp0_stage2_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_flag00011001 );
    sensitive << ( ap_block_pp0_stage7_flag00011001 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state24 );
    sensitive << ( ap_CS_fsm_state25 );

    SC_METHOD(thread_RoundKey_we0);
    sensitive << ( grp_KeyExpansion_fu_158_RoundKey_we0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_RoundKey_we1);
    sensitive << ( grp_KeyExpansion_fu_158_RoundKey_we1 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage0);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_pp0_stage7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state21);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state22);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state23);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state24);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state25);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state26);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_NS_fsm_state17);
    sensitive << ( ap_NS_fsm );

    SC_METHOD(thread_ap_block_pp0_stage0_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011001);

    SC_METHOD(thread_ap_block_pp0_stage0_flag00011011);

    SC_METHOD(thread_ap_block_pp0_stage1_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage1_flag00011001);

    SC_METHOD(thread_ap_block_pp0_stage1_flag00011011);

    SC_METHOD(thread_ap_block_pp0_stage2_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage2_flag00011001);

    SC_METHOD(thread_ap_block_pp0_stage2_flag00011011);

    SC_METHOD(thread_ap_block_pp0_stage3_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage3_flag00011001);

    SC_METHOD(thread_ap_block_pp0_stage3_flag00011011);

    SC_METHOD(thread_ap_block_pp0_stage4_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage4_flag00011001);

    SC_METHOD(thread_ap_block_pp0_stage4_flag00011011);

    SC_METHOD(thread_ap_block_pp0_stage5_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage5_flag00011001);

    SC_METHOD(thread_ap_block_pp0_stage5_flag00011011);

    SC_METHOD(thread_ap_block_pp0_stage6_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage6_flag00011001);

    SC_METHOD(thread_ap_block_pp0_stage6_flag00011011);

    SC_METHOD(thread_ap_block_pp0_stage7_flag00000000);

    SC_METHOD(thread_ap_block_pp0_stage7_flag00011001);

    SC_METHOD(thread_ap_block_pp0_stage7_flag00011011);

    SC_METHOD(thread_ap_block_state10_pp0_stage4_iter0);

    SC_METHOD(thread_ap_block_state11_pp0_stage5_iter0);

    SC_METHOD(thread_ap_block_state12_pp0_stage6_iter0);

    SC_METHOD(thread_ap_block_state13_pp0_stage7_iter0);

    SC_METHOD(thread_ap_block_state14_pp0_stage0_iter1);

    SC_METHOD(thread_ap_block_state15_pp0_stage1_iter1);

    SC_METHOD(thread_ap_block_state16_pp0_stage2_iter1);

    SC_METHOD(thread_ap_block_state6_pp0_stage0_iter0);

    SC_METHOD(thread_ap_block_state7_pp0_stage1_iter0);

    SC_METHOD(thread_ap_block_state8_pp0_stage2_iter0);

    SC_METHOD(thread_ap_block_state9_pp0_stage3_iter0);

    SC_METHOD(thread_ap_condition_pp0_exit_iter0_state6);
    sensitive << ( exitcond_fu_302_p2 );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_ap_enable_pp0);
    sensitive << ( ap_idle_pp0 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_idle_pp0);
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_exitcond1_i_fu_173_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_i_reg_126 );

    SC_METHOD(thread_exitcond_fu_302_p2);
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( ap_block_pp0_stage0_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( round_phi_fu_141_p4 );

    SC_METHOD(thread_grp_KeyExpansion_fu_158_ap_start);
    sensitive << ( ap_reg_grp_KeyExpansion_fu_158_ap_start );

    SC_METHOD(thread_grp_SubBytes_fu_149_ap_start);
    sensitive << ( ap_reg_grp_SubBytes_fu_149_ap_start );

    SC_METHOD(thread_grp_SubBytes_fu_149_round);
    sensitive << ( exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_flag00000000 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( round_cast1_cast_fu_308_p1 );

    SC_METHOD(thread_i_fu_179_p2);
    sensitive << ( i_i_reg_126 );

    SC_METHOD(thread_i_i_cast2_fu_168_p1);
    sensitive << ( i_i_reg_126 );

    SC_METHOD(thread_round_cast1_cast_fu_308_p1);
    sensitive << ( round_reg_137 );

    SC_METHOD(thread_round_phi_fu_141_p4);
    sensitive << ( round_reg_137 );
    sensitive << ( exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage0 );
    sensitive << ( tmp_reg_373 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage0_flag00000000 );

    SC_METHOD(thread_state_address0);
    sensitive << ( state_addr_reg_339 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_reg_369 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( grp_SubBytes_fu_149_state_address0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage2_flag00000000 );
    sensitive << ( ap_block_pp0_stage1_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_flag00000000 );
    sensitive << ( ap_block_pp0_stage7_flag00000000 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_state_address1);
    sensitive << ( exitcond_reg_369 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( grp_SubBytes_fu_149_state_address1 );
    sensitive << ( ap_block_pp0_stage2_flag00000000 );
    sensitive << ( ap_block_pp0_stage1_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_flag00000000 );
    sensitive << ( ap_block_pp0_stage7_flag00000000 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_state_ce0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond_reg_369 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( grp_SubBytes_fu_149_state_ce0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage2_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_flag00011001 );
    sensitive << ( ap_block_pp0_stage7_flag00011001 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_state_ce1);
    sensitive << ( exitcond_reg_369 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( grp_SubBytes_fu_149_state_ce1 );
    sensitive << ( ap_block_pp0_stage2_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_flag00011001 );
    sensitive << ( ap_block_pp0_stage7_flag00011001 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_state_d0);
    sensitive << ( exitcond_reg_369 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( grp_SubBytes_fu_149_state_d0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage2_flag00000000 );
    sensitive << ( ap_block_pp0_stage1_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_flag00000000 );
    sensitive << ( ap_block_pp0_stage7_flag00000000 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );
    sensitive << ( tmp_118_i_fu_289_p5 );

    SC_METHOD(thread_state_d1);
    sensitive << ( exitcond_reg_369 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( grp_SubBytes_fu_149_state_d1 );
    sensitive << ( ap_block_pp0_stage2_flag00000000 );
    sensitive << ( ap_block_pp0_stage1_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_flag00000000 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_flag00000000 );
    sensitive << ( ap_block_pp0_stage7_flag00000000 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_state_we0);
    sensitive << ( exitcond_reg_369 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( grp_SubBytes_fu_149_state_we0 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_block_pp0_stage2_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_flag00011001 );
    sensitive << ( ap_block_pp0_stage7_flag00011001 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_state_we1);
    sensitive << ( exitcond_reg_369 );
    sensitive << ( ap_reg_pp0_iter1_exitcond_reg_369 );
    sensitive << ( ap_CS_fsm_pp0_stage1 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage1_flag00011001 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_CS_fsm_pp0_stage7 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( grp_SubBytes_fu_149_state_we1 );
    sensitive << ( ap_block_pp0_stage2_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage3 );
    sensitive << ( ap_block_pp0_stage3_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage4 );
    sensitive << ( ap_block_pp0_stage4_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage5 );
    sensitive << ( ap_block_pp0_stage5_flag00011001 );
    sensitive << ( ap_CS_fsm_pp0_stage6 );
    sensitive << ( ap_block_pp0_stage6_flag00011001 );
    sensitive << ( ap_block_pp0_stage7_flag00011001 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( ap_CS_fsm_state21 );
    sensitive << ( ap_CS_fsm_state22 );
    sensitive << ( ap_CS_fsm_state23 );
    sensitive << ( ap_CS_fsm_state26 );

    SC_METHOD(thread_sum3_1_i_cast_fu_218_p1);
    sensitive << ( sum3_1_i_fu_213_p2 );

    SC_METHOD(thread_sum3_1_i_fu_213_p2);
    sensitive << ( tmp_i_reg_328 );

    SC_METHOD(thread_sum3_2_i_cast_fu_228_p1);
    sensitive << ( sum3_2_i_fu_223_p2 );

    SC_METHOD(thread_sum3_2_i_fu_223_p2);
    sensitive << ( tmp_i_reg_328 );

    SC_METHOD(thread_sum3_i_cast_fu_208_p1);
    sensitive << ( sum3_i_fu_202_p2 );

    SC_METHOD(thread_sum3_i_fu_202_p2);
    sensitive << ( tmp_i_fu_189_p3 );

    SC_METHOD(thread_tmp_112_fu_185_p1);
    sensitive << ( i_i_reg_126 );

    SC_METHOD(thread_tmp_113_fu_233_p1);
    sensitive << ( state_q0 );

    SC_METHOD(thread_tmp_113_i_fu_242_p4);
    sensitive << ( state_q0 );

    SC_METHOD(thread_tmp_115_i_fu_257_p4);
    sensitive << ( state_q0 );

    SC_METHOD(thread_tmp_117_i_fu_273_p4);
    sensitive << ( state_q0 );

    SC_METHOD(thread_tmp_118_i_fu_289_p5);
    sensitive << ( tmp_84_3_i_fu_283_p2 );
    sensitive << ( tmp_84_2_i_fu_267_p2 );
    sensitive << ( tmp_84_1_i_fu_252_p2 );
    sensitive << ( tmp_84_i_fu_237_p2 );

    SC_METHOD(thread_tmp_84_1_i_fu_252_p2);
    sensitive << ( RoundKey_load_34_reg_354 );
    sensitive << ( tmp_113_i_fu_242_p4 );

    SC_METHOD(thread_tmp_84_2_i_fu_267_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( tmp_115_i_fu_257_p4 );

    SC_METHOD(thread_tmp_84_3_i_fu_283_p2);
    sensitive << ( RoundKey_q1 );
    sensitive << ( tmp_117_i_fu_273_p4 );

    SC_METHOD(thread_tmp_84_i_fu_237_p2);
    sensitive << ( RoundKey_load_reg_349 );
    sensitive << ( tmp_113_fu_233_p1 );

    SC_METHOD(thread_tmp_fu_313_p2);
    sensitive << ( round_reg_137 );

    SC_METHOD(thread_tmp_i_cast_fu_197_p1);
    sensitive << ( tmp_i_fu_189_p3 );

    SC_METHOD(thread_tmp_i_fu_189_p3);
    sensitive << ( tmp_112_fu_185_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( exitcond1_i_fu_173_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond_fu_302_p2 );
    sensitive << ( ap_enable_reg_pp0_iter0 );
    sensitive << ( ap_block_pp0_stage0_flag00011011 );
    sensitive << ( ap_enable_reg_pp0_iter1 );
    sensitive << ( ap_block_pp0_stage7_flag00011011 );
    sensitive << ( ap_block_pp0_stage2_flag00011011 );
    sensitive << ( ap_CS_fsm_pp0_stage2 );
    sensitive << ( grp_KeyExpansion_fu_158_ap_done );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_block_pp0_stage1_flag00011011 );
    sensitive << ( ap_block_pp0_stage3_flag00011011 );
    sensitive << ( ap_block_pp0_stage4_flag00011011 );
    sensitive << ( ap_block_pp0_stage5_flag00011011 );
    sensitive << ( ap_block_pp0_stage6_flag00011011 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "00000000000000000000001";
    ap_enable_reg_pp0_iter0 = SC_LOGIC_0;
    ap_enable_reg_pp0_iter1 = SC_LOGIC_0;
    ap_reg_grp_SubBytes_fu_149_ap_start = SC_LOGIC_0;
    ap_reg_grp_KeyExpansion_fu_158_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Cipher_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, state_address0, "(port)state_address0");
    sc_trace(mVcdFile, state_ce0, "(port)state_ce0");
    sc_trace(mVcdFile, state_we0, "(port)state_we0");
    sc_trace(mVcdFile, state_d0, "(port)state_d0");
    sc_trace(mVcdFile, state_q0, "(port)state_q0");
    sc_trace(mVcdFile, state_address1, "(port)state_address1");
    sc_trace(mVcdFile, state_ce1, "(port)state_ce1");
    sc_trace(mVcdFile, state_we1, "(port)state_we1");
    sc_trace(mVcdFile, state_d1, "(port)state_d1");
    sc_trace(mVcdFile, state_q1, "(port)state_q1");
    sc_trace(mVcdFile, Key_address0, "(port)Key_address0");
    sc_trace(mVcdFile, Key_ce0, "(port)Key_ce0");
    sc_trace(mVcdFile, Key_q0, "(port)Key_q0");
    sc_trace(mVcdFile, Key_address1, "(port)Key_address1");
    sc_trace(mVcdFile, Key_ce1, "(port)Key_ce1");
    sc_trace(mVcdFile, Key_q1, "(port)Key_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, round_reg_137, "round_reg_137");
    sc_trace(mVcdFile, exitcond1_i_fu_173_p2, "exitcond1_i_fu_173_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, i_fu_179_p2, "i_fu_179_p2");
    sc_trace(mVcdFile, i_reg_323, "i_reg_323");
    sc_trace(mVcdFile, tmp_i_fu_189_p3, "tmp_i_fu_189_p3");
    sc_trace(mVcdFile, tmp_i_reg_328, "tmp_i_reg_328");
    sc_trace(mVcdFile, state_addr_reg_339, "state_addr_reg_339");
    sc_trace(mVcdFile, RoundKey_q0, "RoundKey_q0");
    sc_trace(mVcdFile, RoundKey_load_reg_349, "RoundKey_load_reg_349");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, RoundKey_q1, "RoundKey_q1");
    sc_trace(mVcdFile, RoundKey_load_34_reg_354, "RoundKey_load_34_reg_354");
    sc_trace(mVcdFile, exitcond_fu_302_p2, "exitcond_fu_302_p2");
    sc_trace(mVcdFile, exitcond_reg_369, "exitcond_reg_369");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage0, "ap_CS_fsm_pp0_stage0");
    sc_trace(mVcdFile, ap_block_state6_pp0_stage0_iter0, "ap_block_state6_pp0_stage0_iter0");
    sc_trace(mVcdFile, ap_block_state14_pp0_stage0_iter1, "ap_block_state14_pp0_stage0_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011001, "ap_block_pp0_stage0_flag00011001");
    sc_trace(mVcdFile, ap_reg_pp0_iter1_exitcond_reg_369, "ap_reg_pp0_iter1_exitcond_reg_369");
    sc_trace(mVcdFile, tmp_fu_313_p2, "tmp_fu_313_p2");
    sc_trace(mVcdFile, tmp_reg_373, "tmp_reg_373");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage1, "ap_CS_fsm_pp0_stage1");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter0, "ap_enable_reg_pp0_iter0");
    sc_trace(mVcdFile, ap_block_state7_pp0_stage1_iter0, "ap_block_state7_pp0_stage1_iter0");
    sc_trace(mVcdFile, ap_block_state15_pp0_stage1_iter1, "ap_block_state15_pp0_stage1_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage1_flag00011001, "ap_block_pp0_stage1_flag00011001");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00011011, "ap_block_pp0_stage0_flag00011011");
    sc_trace(mVcdFile, ap_condition_pp0_exit_iter0_state6, "ap_condition_pp0_exit_iter0_state6");
    sc_trace(mVcdFile, ap_enable_reg_pp0_iter1, "ap_enable_reg_pp0_iter1");
    sc_trace(mVcdFile, ap_block_state13_pp0_stage7_iter0, "ap_block_state13_pp0_stage7_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage7_flag00011011, "ap_block_pp0_stage7_flag00011011");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage7, "ap_CS_fsm_pp0_stage7");
    sc_trace(mVcdFile, ap_block_state8_pp0_stage2_iter0, "ap_block_state8_pp0_stage2_iter0");
    sc_trace(mVcdFile, ap_block_state16_pp0_stage2_iter1, "ap_block_state16_pp0_stage2_iter1");
    sc_trace(mVcdFile, ap_block_pp0_stage2_flag00011011, "ap_block_pp0_stage2_flag00011011");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage2, "ap_CS_fsm_pp0_stage2");
    sc_trace(mVcdFile, RoundKey_address0, "RoundKey_address0");
    sc_trace(mVcdFile, RoundKey_ce0, "RoundKey_ce0");
    sc_trace(mVcdFile, RoundKey_we0, "RoundKey_we0");
    sc_trace(mVcdFile, RoundKey_address1, "RoundKey_address1");
    sc_trace(mVcdFile, RoundKey_ce1, "RoundKey_ce1");
    sc_trace(mVcdFile, RoundKey_we1, "RoundKey_we1");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_ap_start, "grp_SubBytes_fu_149_ap_start");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_ap_done, "grp_SubBytes_fu_149_ap_done");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_ap_idle, "grp_SubBytes_fu_149_ap_idle");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_ap_ready, "grp_SubBytes_fu_149_ap_ready");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_state_address0, "grp_SubBytes_fu_149_state_address0");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_state_ce0, "grp_SubBytes_fu_149_state_ce0");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_state_we0, "grp_SubBytes_fu_149_state_we0");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_state_d0, "grp_SubBytes_fu_149_state_d0");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_state_address1, "grp_SubBytes_fu_149_state_address1");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_state_ce1, "grp_SubBytes_fu_149_state_ce1");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_state_we1, "grp_SubBytes_fu_149_state_we1");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_state_d1, "grp_SubBytes_fu_149_state_d1");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_round, "grp_SubBytes_fu_149_round");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_RoundKey_address0, "grp_SubBytes_fu_149_RoundKey_address0");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_RoundKey_ce0, "grp_SubBytes_fu_149_RoundKey_ce0");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_RoundKey_address1, "grp_SubBytes_fu_149_RoundKey_address1");
    sc_trace(mVcdFile, grp_SubBytes_fu_149_RoundKey_ce1, "grp_SubBytes_fu_149_RoundKey_ce1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_158_ap_start, "grp_KeyExpansion_fu_158_ap_start");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_158_ap_done, "grp_KeyExpansion_fu_158_ap_done");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_158_ap_idle, "grp_KeyExpansion_fu_158_ap_idle");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_158_ap_ready, "grp_KeyExpansion_fu_158_ap_ready");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_158_RoundKey_address0, "grp_KeyExpansion_fu_158_RoundKey_address0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_158_RoundKey_ce0, "grp_KeyExpansion_fu_158_RoundKey_ce0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_158_RoundKey_we0, "grp_KeyExpansion_fu_158_RoundKey_we0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_158_RoundKey_d0, "grp_KeyExpansion_fu_158_RoundKey_d0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_158_RoundKey_address1, "grp_KeyExpansion_fu_158_RoundKey_address1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_158_RoundKey_ce1, "grp_KeyExpansion_fu_158_RoundKey_ce1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_158_RoundKey_we1, "grp_KeyExpansion_fu_158_RoundKey_we1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_158_RoundKey_d1, "grp_KeyExpansion_fu_158_RoundKey_d1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_158_Key_address0, "grp_KeyExpansion_fu_158_Key_address0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_158_Key_ce0, "grp_KeyExpansion_fu_158_Key_ce0");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_158_Key_address1, "grp_KeyExpansion_fu_158_Key_address1");
    sc_trace(mVcdFile, grp_KeyExpansion_fu_158_Key_ce1, "grp_KeyExpansion_fu_158_Key_ce1");
    sc_trace(mVcdFile, i_i_reg_126, "i_i_reg_126");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, round_phi_fu_141_p4, "round_phi_fu_141_p4");
    sc_trace(mVcdFile, ap_block_pp0_stage0_flag00000000, "ap_block_pp0_stage0_flag00000000");
    sc_trace(mVcdFile, ap_reg_grp_SubBytes_fu_149_ap_start, "ap_reg_grp_SubBytes_fu_149_ap_start");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_NS_fsm_state17, "ap_NS_fsm_state17");
    sc_trace(mVcdFile, ap_block_pp0_stage2_flag00000000, "ap_block_pp0_stage2_flag00000000");
    sc_trace(mVcdFile, ap_block_pp0_stage1_flag00000000, "ap_block_pp0_stage1_flag00000000");
    sc_trace(mVcdFile, ap_block_pp0_stage2_flag00011001, "ap_block_pp0_stage2_flag00011001");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage3, "ap_CS_fsm_pp0_stage3");
    sc_trace(mVcdFile, ap_block_state9_pp0_stage3_iter0, "ap_block_state9_pp0_stage3_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage3_flag00011001, "ap_block_pp0_stage3_flag00011001");
    sc_trace(mVcdFile, ap_block_pp0_stage3_flag00000000, "ap_block_pp0_stage3_flag00000000");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage4, "ap_CS_fsm_pp0_stage4");
    sc_trace(mVcdFile, ap_block_state10_pp0_stage4_iter0, "ap_block_state10_pp0_stage4_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage4_flag00011001, "ap_block_pp0_stage4_flag00011001");
    sc_trace(mVcdFile, ap_block_pp0_stage4_flag00000000, "ap_block_pp0_stage4_flag00000000");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage5, "ap_CS_fsm_pp0_stage5");
    sc_trace(mVcdFile, ap_block_state11_pp0_stage5_iter0, "ap_block_state11_pp0_stage5_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage5_flag00011001, "ap_block_pp0_stage5_flag00011001");
    sc_trace(mVcdFile, ap_block_pp0_stage5_flag00000000, "ap_block_pp0_stage5_flag00000000");
    sc_trace(mVcdFile, ap_CS_fsm_pp0_stage6, "ap_CS_fsm_pp0_stage6");
    sc_trace(mVcdFile, ap_block_state12_pp0_stage6_iter0, "ap_block_state12_pp0_stage6_iter0");
    sc_trace(mVcdFile, ap_block_pp0_stage6_flag00011001, "ap_block_pp0_stage6_flag00011001");
    sc_trace(mVcdFile, ap_block_pp0_stage6_flag00000000, "ap_block_pp0_stage6_flag00000000");
    sc_trace(mVcdFile, ap_block_pp0_stage7_flag00011001, "ap_block_pp0_stage7_flag00011001");
    sc_trace(mVcdFile, ap_block_pp0_stage7_flag00000000, "ap_block_pp0_stage7_flag00000000");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, ap_CS_fsm_state21, "ap_CS_fsm_state21");
    sc_trace(mVcdFile, ap_CS_fsm_state22, "ap_CS_fsm_state22");
    sc_trace(mVcdFile, ap_CS_fsm_state23, "ap_CS_fsm_state23");
    sc_trace(mVcdFile, ap_CS_fsm_state26, "ap_CS_fsm_state26");
    sc_trace(mVcdFile, round_cast1_cast_fu_308_p1, "round_cast1_cast_fu_308_p1");
    sc_trace(mVcdFile, ap_CS_fsm_state24, "ap_CS_fsm_state24");
    sc_trace(mVcdFile, ap_CS_fsm_state25, "ap_CS_fsm_state25");
    sc_trace(mVcdFile, ap_reg_grp_KeyExpansion_fu_158_ap_start, "ap_reg_grp_KeyExpansion_fu_158_ap_start");
    sc_trace(mVcdFile, tmp_i_cast_fu_197_p1, "tmp_i_cast_fu_197_p1");
    sc_trace(mVcdFile, i_i_cast2_fu_168_p1, "i_i_cast2_fu_168_p1");
    sc_trace(mVcdFile, sum3_i_cast_fu_208_p1, "sum3_i_cast_fu_208_p1");
    sc_trace(mVcdFile, sum3_1_i_cast_fu_218_p1, "sum3_1_i_cast_fu_218_p1");
    sc_trace(mVcdFile, sum3_2_i_cast_fu_228_p1, "sum3_2_i_cast_fu_228_p1");
    sc_trace(mVcdFile, tmp_118_i_fu_289_p5, "tmp_118_i_fu_289_p5");
    sc_trace(mVcdFile, tmp_112_fu_185_p1, "tmp_112_fu_185_p1");
    sc_trace(mVcdFile, sum3_i_fu_202_p2, "sum3_i_fu_202_p2");
    sc_trace(mVcdFile, sum3_1_i_fu_213_p2, "sum3_1_i_fu_213_p2");
    sc_trace(mVcdFile, sum3_2_i_fu_223_p2, "sum3_2_i_fu_223_p2");
    sc_trace(mVcdFile, tmp_113_fu_233_p1, "tmp_113_fu_233_p1");
    sc_trace(mVcdFile, tmp_113_i_fu_242_p4, "tmp_113_i_fu_242_p4");
    sc_trace(mVcdFile, tmp_115_i_fu_257_p4, "tmp_115_i_fu_257_p4");
    sc_trace(mVcdFile, tmp_117_i_fu_273_p4, "tmp_117_i_fu_273_p4");
    sc_trace(mVcdFile, tmp_84_3_i_fu_283_p2, "tmp_84_3_i_fu_283_p2");
    sc_trace(mVcdFile, tmp_84_2_i_fu_267_p2, "tmp_84_2_i_fu_267_p2");
    sc_trace(mVcdFile, tmp_84_1_i_fu_252_p2, "tmp_84_1_i_fu_252_p2");
    sc_trace(mVcdFile, tmp_84_i_fu_237_p2, "tmp_84_i_fu_237_p2");
    sc_trace(mVcdFile, ap_block_pp0_stage1_flag00011011, "ap_block_pp0_stage1_flag00011011");
    sc_trace(mVcdFile, ap_block_pp0_stage3_flag00011011, "ap_block_pp0_stage3_flag00011011");
    sc_trace(mVcdFile, ap_block_pp0_stage4_flag00011011, "ap_block_pp0_stage4_flag00011011");
    sc_trace(mVcdFile, ap_block_pp0_stage5_flag00011011, "ap_block_pp0_stage5_flag00011011");
    sc_trace(mVcdFile, ap_block_pp0_stage6_flag00011011, "ap_block_pp0_stage6_flag00011011");
    sc_trace(mVcdFile, ap_idle_pp0, "ap_idle_pp0");
    sc_trace(mVcdFile, ap_enable_pp0, "ap_enable_pp0");
#endif

    }
    mHdltvinHandle.open("Cipher.hdltvin.dat");
    mHdltvoutHandle.open("Cipher.hdltvout.dat");
}

Cipher::~Cipher() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete RoundKey_U;
    delete grp_SubBytes_fu_149;
    delete grp_KeyExpansion_fu_158;
}

void Cipher::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Cipher::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter0 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
             esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state6.read()))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                    esl_seteq<1,1,1>(exitcond1_i_fu_173_p2.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp0_iter0 = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_enable_reg_pp0_iter1 = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_condition_pp0_exit_iter0_state6.read()) && 
             ((esl_seteq<1,1,1>(ap_block_pp0_stage7_flag00011011.read(), ap_const_boolean_0) && 
               esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read())) || 
              (esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00011011.read(), ap_const_boolean_0) && 
               esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()))))) {
            ap_enable_reg_pp0_iter1 = (ap_condition_pp0_exit_iter0_state6.read() ^ ap_const_logic_1);
        } else if (((esl_seteq<1,1,1>(ap_block_pp0_stage7_flag00011011.read(), ap_const_boolean_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read())) || 
                    (esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00011011.read(), ap_const_boolean_0) && 
                     esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read())))) {
            ap_enable_reg_pp0_iter1 = ap_enable_reg_pp0_iter0.read();
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
                    esl_seteq<1,1,1>(exitcond1_i_fu_173_p2.read(), ap_const_lv1_1))) {
            ap_enable_reg_pp0_iter1 = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_KeyExpansion_fu_158_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_reg_grp_KeyExpansion_fu_158_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_KeyExpansion_fu_158_ap_ready.read())) {
            ap_reg_grp_KeyExpansion_fu_158_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_SubBytes_fu_149_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
              esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
              esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_fu_302_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_NS_fsm_state17.read()) && 
              ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0)) || 
               (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00000000.read(), ap_const_boolean_0)))))) {
            ap_reg_grp_SubBytes_fu_149_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_SubBytes_fu_149_ap_ready.read())) {
            ap_reg_grp_SubBytes_fu_149_ap_start = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        i_i_reg_126 = i_reg_323.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(grp_KeyExpansion_fu_158_ap_done.read(), ap_const_logic_1))) {
        i_i_reg_126 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(exitcond1_i_fu_173_p2.read(), ap_const_lv1_1))) {
        round_reg_137 = ap_const_lv4_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()))) {
        round_reg_137 = tmp_reg_373.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RoundKey_load_34_reg_354 = RoundKey_q1.read();
        RoundKey_load_reg_349 = RoundKey_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0))) {
        ap_reg_pp0_iter1_exitcond_reg_369 = exitcond_reg_369.read();
        exitcond_reg_369 = exitcond_fu_302_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_323 = i_fu_179_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond1_i_fu_173_p2.read(), ap_const_lv1_0))) {
        state_addr_reg_339 =  (sc_lv<2>) (i_i_cast2_fu_168_p1.read());
        tmp_i_reg_328 = tmp_i_fu_189_p3.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()))) {
        tmp_reg_373 = tmp_fu_313_p2.read();
    }
}

void Cipher::thread_Key_address0() {
    Key_address0 = grp_KeyExpansion_fu_158_Key_address0.read();
}

void Cipher::thread_Key_address1() {
    Key_address1 = grp_KeyExpansion_fu_158_Key_address1.read();
}

void Cipher::thread_Key_ce0() {
    Key_ce0 = grp_KeyExpansion_fu_158_Key_ce0.read();
}

void Cipher::thread_Key_ce1() {
    Key_ce1 = grp_KeyExpansion_fu_158_Key_ce1.read();
}

void Cipher::thread_RoundKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RoundKey_address0 =  (sc_lv<8>) (sum3_1_i_cast_fu_218_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_address0 =  (sc_lv<8>) (tmp_i_cast_fu_197_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_address0 = grp_KeyExpansion_fu_158_RoundKey_address0.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage3_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage4_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage5_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage6_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage7_flag00000000.read(), ap_const_boolean_0)) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00000000.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_reg_369.read())) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        RoundKey_address0 = grp_SubBytes_fu_149_RoundKey_address0.read();
    } else {
        RoundKey_address0 = "XXXXXXXX";
    }
}

void Cipher::thread_RoundKey_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RoundKey_address1 =  (sc_lv<8>) (sum3_2_i_cast_fu_228_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_address1 =  (sc_lv<8>) (sum3_i_cast_fu_208_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_address1 = grp_KeyExpansion_fu_158_RoundKey_address1.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage3_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage4_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage5_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage6_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage7_flag00000000.read(), ap_const_boolean_0)) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00000000.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_reg_369.read())) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        RoundKey_address1 = grp_SubBytes_fu_149_RoundKey_address1.read();
    } else {
        RoundKey_address1 = "XXXXXXXX";
    }
}

void Cipher::thread_RoundKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        RoundKey_ce0 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_ce0 = grp_KeyExpansion_fu_158_RoundKey_ce0.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage3_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage4_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage5_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage6_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage7_flag00011001.read(), ap_const_boolean_0)) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_reg_369.read())) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        RoundKey_ce0 = grp_SubBytes_fu_149_RoundKey_ce0.read();
    } else {
        RoundKey_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        RoundKey_ce1 = ap_const_logic_1;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_ce1 = grp_KeyExpansion_fu_158_RoundKey_ce1.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage3_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage4_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage5_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage6_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage7_flag00011001.read(), ap_const_boolean_0)) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_reg_369.read())) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state24.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state25.read()))) {
        RoundKey_ce1 = grp_SubBytes_fu_149_RoundKey_ce1.read();
    } else {
        RoundKey_ce1 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_we0 = grp_KeyExpansion_fu_158_RoundKey_we0.read();
    } else {
        RoundKey_we0 = ap_const_logic_0;
    }
}

void Cipher::thread_RoundKey_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_we1 = grp_KeyExpansion_fu_158_RoundKey_we1.read();
    } else {
        RoundKey_we1 = ap_const_logic_0;
    }
}

void Cipher::thread_ap_CS_fsm_pp0_stage0() {
    ap_CS_fsm_pp0_stage0 = ap_CS_fsm.read()[5];
}

void Cipher::thread_ap_CS_fsm_pp0_stage1() {
    ap_CS_fsm_pp0_stage1 = ap_CS_fsm.read()[6];
}

void Cipher::thread_ap_CS_fsm_pp0_stage2() {
    ap_CS_fsm_pp0_stage2 = ap_CS_fsm.read()[7];
}

void Cipher::thread_ap_CS_fsm_pp0_stage3() {
    ap_CS_fsm_pp0_stage3 = ap_CS_fsm.read()[8];
}

void Cipher::thread_ap_CS_fsm_pp0_stage4() {
    ap_CS_fsm_pp0_stage4 = ap_CS_fsm.read()[9];
}

void Cipher::thread_ap_CS_fsm_pp0_stage5() {
    ap_CS_fsm_pp0_stage5 = ap_CS_fsm.read()[10];
}

void Cipher::thread_ap_CS_fsm_pp0_stage6() {
    ap_CS_fsm_pp0_stage6 = ap_CS_fsm.read()[11];
}

void Cipher::thread_ap_CS_fsm_pp0_stage7() {
    ap_CS_fsm_pp0_stage7 = ap_CS_fsm.read()[12];
}

void Cipher::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Cipher::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[13];
}

void Cipher::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[14];
}

void Cipher::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[15];
}

void Cipher::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Cipher::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[16];
}

void Cipher::thread_ap_CS_fsm_state21() {
    ap_CS_fsm_state21 = ap_CS_fsm.read()[17];
}

void Cipher::thread_ap_CS_fsm_state22() {
    ap_CS_fsm_state22 = ap_CS_fsm.read()[18];
}

void Cipher::thread_ap_CS_fsm_state23() {
    ap_CS_fsm_state23 = ap_CS_fsm.read()[19];
}

void Cipher::thread_ap_CS_fsm_state24() {
    ap_CS_fsm_state24 = ap_CS_fsm.read()[20];
}

void Cipher::thread_ap_CS_fsm_state25() {
    ap_CS_fsm_state25 = ap_CS_fsm.read()[21];
}

void Cipher::thread_ap_CS_fsm_state26() {
    ap_CS_fsm_state26 = ap_CS_fsm.read()[22];
}

void Cipher::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Cipher::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void Cipher::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void Cipher::thread_ap_NS_fsm_state17() {
    ap_NS_fsm_state17 = ap_NS_fsm.read()[13];
}

void Cipher::thread_ap_block_pp0_stage0_flag00000000() {
    ap_block_pp0_stage0_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage0_flag00011001() {
    ap_block_pp0_stage0_flag00011001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage0_flag00011011() {
    ap_block_pp0_stage0_flag00011011 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage1_flag00000000() {
    ap_block_pp0_stage1_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage1_flag00011001() {
    ap_block_pp0_stage1_flag00011001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage1_flag00011011() {
    ap_block_pp0_stage1_flag00011011 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage2_flag00000000() {
    ap_block_pp0_stage2_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage2_flag00011001() {
    ap_block_pp0_stage2_flag00011001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage2_flag00011011() {
    ap_block_pp0_stage2_flag00011011 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage3_flag00000000() {
    ap_block_pp0_stage3_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage3_flag00011001() {
    ap_block_pp0_stage3_flag00011001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage3_flag00011011() {
    ap_block_pp0_stage3_flag00011011 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage4_flag00000000() {
    ap_block_pp0_stage4_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage4_flag00011001() {
    ap_block_pp0_stage4_flag00011001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage4_flag00011011() {
    ap_block_pp0_stage4_flag00011011 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage5_flag00000000() {
    ap_block_pp0_stage5_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage5_flag00011001() {
    ap_block_pp0_stage5_flag00011001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage5_flag00011011() {
    ap_block_pp0_stage5_flag00011011 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage6_flag00000000() {
    ap_block_pp0_stage6_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage6_flag00011001() {
    ap_block_pp0_stage6_flag00011001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage6_flag00011011() {
    ap_block_pp0_stage6_flag00011011 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage7_flag00000000() {
    ap_block_pp0_stage7_flag00000000 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage7_flag00011001() {
    ap_block_pp0_stage7_flag00011001 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_pp0_stage7_flag00011011() {
    ap_block_pp0_stage7_flag00011011 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_state10_pp0_stage4_iter0() {
    ap_block_state10_pp0_stage4_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_state11_pp0_stage5_iter0() {
    ap_block_state11_pp0_stage5_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_state12_pp0_stage6_iter0() {
    ap_block_state12_pp0_stage6_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_state13_pp0_stage7_iter0() {
    ap_block_state13_pp0_stage7_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_state14_pp0_stage0_iter1() {
    ap_block_state14_pp0_stage0_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_state15_pp0_stage1_iter1() {
    ap_block_state15_pp0_stage1_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_state16_pp0_stage2_iter1() {
    ap_block_state16_pp0_stage2_iter1 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_state6_pp0_stage0_iter0() {
    ap_block_state6_pp0_stage0_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_state7_pp0_stage1_iter0() {
    ap_block_state7_pp0_stage1_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_state8_pp0_stage2_iter0() {
    ap_block_state8_pp0_stage2_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_block_state9_pp0_stage3_iter0() {
    ap_block_state9_pp0_stage3_iter0 = !esl_seteq<1,1,1>(ap_const_boolean_1, ap_const_boolean_1);
}

void Cipher::thread_ap_condition_pp0_exit_iter0_state6() {
    if (esl_seteq<1,1,1>(exitcond_fu_302_p2.read(), ap_const_lv1_1)) {
        ap_condition_pp0_exit_iter0_state6 = ap_const_logic_1;
    } else {
        ap_condition_pp0_exit_iter0_state6 = ap_const_logic_0;
    }
}

void Cipher::thread_ap_done() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void Cipher::thread_ap_enable_pp0() {
    ap_enable_pp0 = (ap_idle_pp0.read() ^ ap_const_logic_1);
}

void Cipher::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Cipher::thread_ap_idle_pp0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter0.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_0, ap_enable_reg_pp0_iter1.read()))) {
        ap_idle_pp0 = ap_const_logic_1;
    } else {
        ap_idle_pp0 = ap_const_logic_0;
    }
}

void Cipher::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Cipher::thread_exitcond1_i_fu_173_p2() {
    exitcond1_i_fu_173_p2 = (!i_i_reg_126.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_126.read() == ap_const_lv3_4);
}

void Cipher::thread_exitcond_fu_302_p2() {
    exitcond_fu_302_p2 = (!round_phi_fu_141_p4.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(round_phi_fu_141_p4.read() == ap_const_lv4_A);
}

void Cipher::thread_grp_KeyExpansion_fu_158_ap_start() {
    grp_KeyExpansion_fu_158_ap_start = ap_reg_grp_KeyExpansion_fu_158_ap_start.read();
}

void Cipher::thread_grp_SubBytes_fu_149_ap_start() {
    grp_SubBytes_fu_149_ap_start = ap_reg_grp_SubBytes_fu_149_ap_start.read();
}

void Cipher::thread_grp_SubBytes_fu_149_round() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read())) {
        grp_SubBytes_fu_149_round = ap_const_lv6_A;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00000000.read(), ap_const_boolean_0))) {
        grp_SubBytes_fu_149_round = round_cast1_cast_fu_308_p1.read();
    } else {
        grp_SubBytes_fu_149_round =  (sc_lv<6>) ("XXXXXX");
    }
}

void Cipher::thread_i_fu_179_p2() {
    i_fu_179_p2 = (!i_i_reg_126.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(i_i_reg_126.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void Cipher::thread_i_i_cast2_fu_168_p1() {
    i_i_cast2_fu_168_p1 = esl_zext<32,3>(i_i_reg_126.read());
}

void Cipher::thread_round_cast1_cast_fu_308_p1() {
    round_cast1_cast_fu_308_p1 = esl_zext<6,4>(round_reg_137.read());
}

void Cipher::thread_round_phi_fu_141_p4() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage0.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
         esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00000000.read(), ap_const_boolean_0))) {
        round_phi_fu_141_p4 = tmp_reg_373.read();
    } else {
        round_phi_fu_141_p4 = round_reg_137.read();
    }
}

void Cipher::thread_state_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_address0 = state_addr_reg_339.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage3_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage4_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage5_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage6_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage7_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00000000.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_reg_369.read())) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        state_address0 = grp_SubBytes_fu_149_state_address0.read();
    } else {
        state_address0 =  (sc_lv<2>) ("XX");
    }
}

void Cipher::thread_state_address1() {
    state_address1 = grp_SubBytes_fu_149_state_address1.read();
}

void Cipher::thread_state_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        state_ce0 = ap_const_logic_1;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage3_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage4_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage5_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage6_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage7_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00011001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_reg_369.read())) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        state_ce0 = grp_SubBytes_fu_149_state_ce0.read();
    } else {
        state_ce0 = ap_const_logic_0;
    }
}

void Cipher::thread_state_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00011001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_flag00011001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_flag00011001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5_flag00011001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage6_flag00011001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage7_flag00011001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_reg_369.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        state_ce1 = grp_SubBytes_fu_149_state_ce1.read();
    } else {
        state_ce1 = ap_const_logic_0;
    }
}

void Cipher::thread_state_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_d0 = tmp_118_i_fu_289_p5.read();
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage3_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage4_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage5_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage6_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage7_flag00000000.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00000000.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_reg_369.read())) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        state_d0 = grp_SubBytes_fu_149_state_d0.read();
    } else {
        state_d0 =  (sc_lv<128>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void Cipher::thread_state_d1() {
    state_d1 = grp_SubBytes_fu_149_state_d1.read();
}

void Cipher::thread_state_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        state_we0 = ap_const_logic_1;
    } else if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage3_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage4_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage5_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage6_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage7_flag00011001.read(), ap_const_boolean_0)) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
                 esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
                 esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00011001.read(), ap_const_boolean_0) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_reg_369.read())) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        state_we0 = grp_SubBytes_fu_149_state_we0.read();
    } else {
        state_we0 = ap_const_logic_0;
    }
}

void Cipher::thread_state_we1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage1.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00011001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage3.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage3_flag00011001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage4.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage4_flag00011001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage5.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage5_flag00011001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage6.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage6_flag00011001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, exitcond_reg_369.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage7.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage7_flag00011001.read(), ap_const_boolean_0)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && 
          esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00011001.read(), ap_const_boolean_0) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, ap_reg_pp0_iter1_exitcond_reg_369.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state21.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state22.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state23.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state26.read()))) {
        state_we1 = grp_SubBytes_fu_149_state_we1.read();
    } else {
        state_we1 = ap_const_logic_0;
    }
}

void Cipher::thread_sum3_1_i_cast_fu_218_p1() {
    sum3_1_i_cast_fu_218_p1 = esl_zext<32,4>(sum3_1_i_fu_213_p2.read());
}

void Cipher::thread_sum3_1_i_fu_213_p2() {
    sum3_1_i_fu_213_p2 = (tmp_i_reg_328.read() | ap_const_lv4_2);
}

void Cipher::thread_sum3_2_i_cast_fu_228_p1() {
    sum3_2_i_cast_fu_228_p1 = esl_zext<32,4>(sum3_2_i_fu_223_p2.read());
}

void Cipher::thread_sum3_2_i_fu_223_p2() {
    sum3_2_i_fu_223_p2 = (tmp_i_reg_328.read() | ap_const_lv4_3);
}

void Cipher::thread_sum3_i_cast_fu_208_p1() {
    sum3_i_cast_fu_208_p1 = esl_zext<32,4>(sum3_i_fu_202_p2.read());
}

void Cipher::thread_sum3_i_fu_202_p2() {
    sum3_i_fu_202_p2 = (tmp_i_fu_189_p3.read() | ap_const_lv4_1);
}

void Cipher::thread_tmp_112_fu_185_p1() {
    tmp_112_fu_185_p1 = i_i_reg_126.read().range(2-1, 0);
}

void Cipher::thread_tmp_113_fu_233_p1() {
    tmp_113_fu_233_p1 = state_q0.read().range(32-1, 0);
}

void Cipher::thread_tmp_113_i_fu_242_p4() {
    tmp_113_i_fu_242_p4 = state_q0.read().range(63, 32);
}

void Cipher::thread_tmp_115_i_fu_257_p4() {
    tmp_115_i_fu_257_p4 = state_q0.read().range(95, 64);
}

void Cipher::thread_tmp_117_i_fu_273_p4() {
    tmp_117_i_fu_273_p4 = state_q0.read().range(127, 96);
}

void Cipher::thread_tmp_118_i_fu_289_p5() {
    tmp_118_i_fu_289_p5 = esl_concat<96,32>(esl_concat<64,32>(esl_concat<32,32>(tmp_84_3_i_fu_283_p2.read(), tmp_84_2_i_fu_267_p2.read()), tmp_84_1_i_fu_252_p2.read()), tmp_84_i_fu_237_p2.read());
}

void Cipher::thread_tmp_84_1_i_fu_252_p2() {
    tmp_84_1_i_fu_252_p2 = (RoundKey_load_34_reg_354.read() ^ tmp_113_i_fu_242_p4.read());
}

void Cipher::thread_tmp_84_2_i_fu_267_p2() {
    tmp_84_2_i_fu_267_p2 = (RoundKey_q0.read() ^ tmp_115_i_fu_257_p4.read());
}

void Cipher::thread_tmp_84_3_i_fu_283_p2() {
    tmp_84_3_i_fu_283_p2 = (RoundKey_q1.read() ^ tmp_117_i_fu_273_p4.read());
}

void Cipher::thread_tmp_84_i_fu_237_p2() {
    tmp_84_i_fu_237_p2 = (RoundKey_load_reg_349.read() ^ tmp_113_fu_233_p1.read());
}

void Cipher::thread_tmp_fu_313_p2() {
    tmp_fu_313_p2 = (!round_reg_137.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(round_reg_137.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void Cipher::thread_tmp_i_cast_fu_197_p1() {
    tmp_i_cast_fu_197_p1 = esl_zext<32,4>(tmp_i_fu_189_p3.read());
}

void Cipher::thread_tmp_i_fu_189_p3() {
    tmp_i_fu_189_p3 = esl_concat<2,2>(tmp_112_fu_185_p1.read(), ap_const_lv2_0);
}

void Cipher::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_KeyExpansion_fu_158_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(exitcond1_i_fu_173_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_fu_302_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter0.read()) && esl_seteq<1,1,1>(ap_block_pp0_stage0_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(exitcond_fu_302_p2.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter1.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            }
            break;
        case 64 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage1_flag00011011.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00011011.read(), ap_const_boolean_0) && !(esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0)))) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            } else if ((esl_seteq<1,1,1>(ap_block_pp0_stage2_flag00011011.read(), ap_const_boolean_0) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_pp0_stage2.read()) && esl_seteq<1,1,1>(ap_const_logic_1, ap_enable_reg_pp0_iter1.read()) && esl_seteq<1,1,1>(ap_enable_reg_pp0_iter0.read(), ap_const_logic_0))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            }
            break;
        case 256 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage3_flag00011011.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            }
            break;
        case 512 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage4_flag00011011.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            }
            break;
        case 1024 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage5_flag00011011.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            }
            break;
        case 2048 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage6_flag00011011.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            }
            break;
        case 4096 : 
            if (esl_seteq<1,1,1>(ap_block_pp0_stage7_flag00011011.read(), ap_const_boolean_0)) {
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            } else {
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            }
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<23>) ("XXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void Cipher::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_address0\" :  \"" << state_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_ce0\" :  \"" << state_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_we0\" :  \"" << state_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_d0\" :  \"" << state_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_q0\" :  \"" << state_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_address1\" :  \"" << state_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_ce1\" :  \"" << state_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_we1\" :  \"" << state_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"state_d1\" :  \"" << state_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"state_q1\" :  \"" << state_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Key_address0\" :  \"" << Key_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Key_ce0\" :  \"" << Key_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Key_q0\" :  \"" << Key_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Key_address1\" :  \"" << Key_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"Key_ce1\" :  \"" << Key_ce1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"Key_q1\" :  \"" << Key_q1.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

