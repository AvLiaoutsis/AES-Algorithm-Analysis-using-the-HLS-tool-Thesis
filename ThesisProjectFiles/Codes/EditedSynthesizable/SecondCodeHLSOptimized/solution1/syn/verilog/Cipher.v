// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Cipher,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7eg-ffvf1517-1l-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.573000,HLS_SYN_LAT=349,HLS_SYN_TPT=none,HLS_SYN_MEM=3,HLS_SYN_DSP=0,HLS_SYN_FF=80602,HLS_SYN_LUT=29631}" *)

module Cipher (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        Key_address0,
        Key_ce0,
        Key_q0,
        Key_address1,
        Key_ce1,
        Key_q1
);

parameter    ap_ST_fsm_state1 = 23'd1;
parameter    ap_ST_fsm_state2 = 23'd2;
parameter    ap_ST_fsm_state3 = 23'd4;
parameter    ap_ST_fsm_state4 = 23'd8;
parameter    ap_ST_fsm_state5 = 23'd16;
parameter    ap_ST_fsm_pp0_stage0 = 23'd32;
parameter    ap_ST_fsm_pp0_stage1 = 23'd64;
parameter    ap_ST_fsm_pp0_stage2 = 23'd128;
parameter    ap_ST_fsm_pp0_stage3 = 23'd256;
parameter    ap_ST_fsm_pp0_stage4 = 23'd512;
parameter    ap_ST_fsm_pp0_stage5 = 23'd1024;
parameter    ap_ST_fsm_pp0_stage6 = 23'd2048;
parameter    ap_ST_fsm_pp0_stage7 = 23'd4096;
parameter    ap_ST_fsm_state17 = 23'd8192;
parameter    ap_ST_fsm_state18 = 23'd16384;
parameter    ap_ST_fsm_state19 = 23'd32768;
parameter    ap_ST_fsm_state20 = 23'd65536;
parameter    ap_ST_fsm_state21 = 23'd131072;
parameter    ap_ST_fsm_state22 = 23'd262144;
parameter    ap_ST_fsm_state23 = 23'd524288;
parameter    ap_ST_fsm_state24 = 23'd1048576;
parameter    ap_ST_fsm_state25 = 23'd2097152;
parameter    ap_ST_fsm_state26 = 23'd4194304;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [1:0] state_address0;
output   state_ce0;
output   state_we0;
output  [127:0] state_d0;
input  [127:0] state_q0;
output  [1:0] state_address1;
output   state_ce1;
output   state_we1;
output  [127:0] state_d1;
input  [127:0] state_q1;
output  [4:0] Key_address0;
output   Key_ce0;
input  [31:0] Key_q0;
output  [4:0] Key_address1;
output   Key_ce1;
input  [31:0] Key_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[1:0] state_address0;
reg state_ce0;
reg state_we0;
reg[127:0] state_d0;
reg state_ce1;
reg state_we1;

(* fsm_encoding = "none" *) reg   [22:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] round_reg_137;
wire   [0:0] exitcond1_i_fu_173_p2;
wire    ap_CS_fsm_state3;
wire   [2:0] i_fu_179_p2;
reg   [2:0] i_reg_323;
wire   [3:0] tmp_i_fu_189_p3;
reg   [3:0] tmp_i_reg_328;
reg   [1:0] state_addr_reg_339;
wire   [31:0] RoundKey_q0;
reg   [31:0] RoundKey_load_reg_349;
wire    ap_CS_fsm_state4;
wire   [31:0] RoundKey_q1;
reg   [31:0] RoundKey_load_34_reg_354;
wire   [0:0] exitcond_fu_302_p2;
reg   [0:0] exitcond_reg_369;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state6_pp0_stage0_iter0;
wire    ap_block_state14_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_flag00011001;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_369;
wire   [3:0] tmp_fu_313_p2;
reg   [3:0] tmp_reg_373;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state7_pp0_stage1_iter0;
wire    ap_block_state15_pp0_stage1_iter1;
wire    ap_block_pp0_stage1_flag00011001;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state6;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state13_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_flag00011011;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state8_pp0_stage2_iter0;
wire    ap_block_state16_pp0_stage2_iter1;
wire    ap_block_pp0_stage2_flag00011011;
wire    ap_CS_fsm_pp0_stage2;
reg   [7:0] RoundKey_address0;
reg    RoundKey_ce0;
reg    RoundKey_we0;
reg   [7:0] RoundKey_address1;
reg    RoundKey_ce1;
reg    RoundKey_we1;
wire    grp_SubBytes_fu_149_ap_start;
wire    grp_SubBytes_fu_149_ap_done;
wire    grp_SubBytes_fu_149_ap_idle;
wire    grp_SubBytes_fu_149_ap_ready;
wire   [1:0] grp_SubBytes_fu_149_state_address0;
wire    grp_SubBytes_fu_149_state_ce0;
wire    grp_SubBytes_fu_149_state_we0;
wire   [127:0] grp_SubBytes_fu_149_state_d0;
wire   [1:0] grp_SubBytes_fu_149_state_address1;
wire    grp_SubBytes_fu_149_state_ce1;
wire    grp_SubBytes_fu_149_state_we1;
wire   [127:0] grp_SubBytes_fu_149_state_d1;
reg   [5:0] grp_SubBytes_fu_149_round;
wire   [7:0] grp_SubBytes_fu_149_RoundKey_address0;
wire    grp_SubBytes_fu_149_RoundKey_ce0;
wire   [7:0] grp_SubBytes_fu_149_RoundKey_address1;
wire    grp_SubBytes_fu_149_RoundKey_ce1;
wire    grp_KeyExpansion_fu_158_ap_start;
wire    grp_KeyExpansion_fu_158_ap_done;
wire    grp_KeyExpansion_fu_158_ap_idle;
wire    grp_KeyExpansion_fu_158_ap_ready;
wire   [7:0] grp_KeyExpansion_fu_158_RoundKey_address0;
wire    grp_KeyExpansion_fu_158_RoundKey_ce0;
wire    grp_KeyExpansion_fu_158_RoundKey_we0;
wire   [31:0] grp_KeyExpansion_fu_158_RoundKey_d0;
wire   [7:0] grp_KeyExpansion_fu_158_RoundKey_address1;
wire    grp_KeyExpansion_fu_158_RoundKey_ce1;
wire    grp_KeyExpansion_fu_158_RoundKey_we1;
wire   [31:0] grp_KeyExpansion_fu_158_RoundKey_d1;
wire   [4:0] grp_KeyExpansion_fu_158_Key_address0;
wire    grp_KeyExpansion_fu_158_Key_ce0;
wire   [4:0] grp_KeyExpansion_fu_158_Key_address1;
wire    grp_KeyExpansion_fu_158_Key_ce1;
reg   [2:0] i_i_reg_126;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state5;
reg   [3:0] round_phi_fu_141_p4;
wire    ap_block_pp0_stage0_flag00000000;
reg    ap_reg_grp_SubBytes_fu_149_ap_start;
reg   [22:0] ap_NS_fsm;
wire    ap_NS_fsm_state17;
wire    ap_block_pp0_stage2_flag00000000;
wire    ap_block_pp0_stage1_flag00000000;
wire    ap_block_pp0_stage2_flag00011001;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state9_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_flag00011001;
wire    ap_block_pp0_stage3_flag00000000;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state10_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_flag00011001;
wire    ap_block_pp0_stage4_flag00000000;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state11_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_flag00011001;
wire    ap_block_pp0_stage5_flag00000000;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state12_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_flag00011001;
wire    ap_block_pp0_stage6_flag00000000;
wire    ap_block_pp0_stage7_flag00011001;
wire    ap_block_pp0_stage7_flag00000000;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state26;
wire   [5:0] round_cast1_cast_fu_308_p1;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
reg    ap_reg_grp_KeyExpansion_fu_158_ap_start;
wire   [31:0] tmp_i_cast_fu_197_p1;
wire   [31:0] i_i_cast2_fu_168_p1;
wire   [31:0] sum3_i_cast_fu_208_p1;
wire   [31:0] sum3_1_i_cast_fu_218_p1;
wire   [31:0] sum3_2_i_cast_fu_228_p1;
wire   [127:0] tmp_118_i_fu_289_p5;
wire   [1:0] tmp_112_fu_185_p1;
wire   [3:0] sum3_i_fu_202_p2;
wire   [3:0] sum3_1_i_fu_213_p2;
wire   [3:0] sum3_2_i_fu_223_p2;
wire   [31:0] tmp_113_fu_233_p1;
wire   [31:0] tmp_113_i_fu_242_p4;
wire   [31:0] tmp_115_i_fu_257_p4;
wire   [31:0] tmp_117_i_fu_273_p4;
wire   [31:0] tmp_84_3_i_fu_283_p2;
wire   [31:0] tmp_84_2_i_fu_267_p2;
wire   [31:0] tmp_84_1_i_fu_252_p2;
wire   [31:0] tmp_84_i_fu_237_p2;
wire    ap_block_pp0_stage1_flag00011011;
wire    ap_block_pp0_stage3_flag00011011;
wire    ap_block_pp0_stage4_flag00011011;
wire    ap_block_pp0_stage5_flag00011011;
wire    ap_block_pp0_stage6_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 23'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_grp_SubBytes_fu_149_ap_start = 1'b0;
#0 ap_reg_grp_KeyExpansion_fu_158_ap_start = 1'b0;
end

Cipher_RoundKey #(
    .DataWidth( 32 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
RoundKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RoundKey_address0),
    .ce0(RoundKey_ce0),
    .we0(RoundKey_we0),
    .d0(grp_KeyExpansion_fu_158_RoundKey_d0),
    .q0(RoundKey_q0),
    .address1(RoundKey_address1),
    .ce1(RoundKey_ce1),
    .we1(RoundKey_we1),
    .d1(grp_KeyExpansion_fu_158_RoundKey_d1),
    .q1(RoundKey_q1)
);

SubBytes grp_SubBytes_fu_149(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_SubBytes_fu_149_ap_start),
    .ap_done(grp_SubBytes_fu_149_ap_done),
    .ap_idle(grp_SubBytes_fu_149_ap_idle),
    .ap_ready(grp_SubBytes_fu_149_ap_ready),
    .ap_ce(1'b1),
    .state_address0(grp_SubBytes_fu_149_state_address0),
    .state_ce0(grp_SubBytes_fu_149_state_ce0),
    .state_we0(grp_SubBytes_fu_149_state_we0),
    .state_d0(grp_SubBytes_fu_149_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_SubBytes_fu_149_state_address1),
    .state_ce1(grp_SubBytes_fu_149_state_ce1),
    .state_we1(grp_SubBytes_fu_149_state_we1),
    .state_d1(grp_SubBytes_fu_149_state_d1),
    .state_q1(state_q1),
    .round(grp_SubBytes_fu_149_round),
    .RoundKey_address0(grp_SubBytes_fu_149_RoundKey_address0),
    .RoundKey_ce0(grp_SubBytes_fu_149_RoundKey_ce0),
    .RoundKey_q0(RoundKey_q0),
    .RoundKey_address1(grp_SubBytes_fu_149_RoundKey_address1),
    .RoundKey_ce1(grp_SubBytes_fu_149_RoundKey_ce1),
    .RoundKey_q1(RoundKey_q1)
);

KeyExpansion grp_KeyExpansion_fu_158(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeyExpansion_fu_158_ap_start),
    .ap_done(grp_KeyExpansion_fu_158_ap_done),
    .ap_idle(grp_KeyExpansion_fu_158_ap_idle),
    .ap_ready(grp_KeyExpansion_fu_158_ap_ready),
    .RoundKey_address0(grp_KeyExpansion_fu_158_RoundKey_address0),
    .RoundKey_ce0(grp_KeyExpansion_fu_158_RoundKey_ce0),
    .RoundKey_we0(grp_KeyExpansion_fu_158_RoundKey_we0),
    .RoundKey_d0(grp_KeyExpansion_fu_158_RoundKey_d0),
    .RoundKey_q0(RoundKey_q0),
    .RoundKey_address1(grp_KeyExpansion_fu_158_RoundKey_address1),
    .RoundKey_ce1(grp_KeyExpansion_fu_158_RoundKey_ce1),
    .RoundKey_we1(grp_KeyExpansion_fu_158_RoundKey_we1),
    .RoundKey_d1(grp_KeyExpansion_fu_158_RoundKey_d1),
    .RoundKey_q1(RoundKey_q1),
    .Key_address0(grp_KeyExpansion_fu_158_Key_address0),
    .Key_ce0(grp_KeyExpansion_fu_158_Key_ce0),
    .Key_q0(Key_q0),
    .Key_address1(grp_KeyExpansion_fu_158_Key_address1),
    .Key_ce1(grp_KeyExpansion_fu_158_Key_ce1),
    .Key_q1(Key_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state6))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_173_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state6) & (((ap_block_pp0_stage7_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_block_pp0_stage2_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2))))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state6 ^ 1'b1);
        end else if ((((ap_block_pp0_stage7_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_block_pp0_stage2_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_173_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_KeyExpansion_fu_158_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_reg_grp_KeyExpansion_fu_158_ap_start <= 1'b1;
        end else if ((1'b1 == grp_KeyExpansion_fu_158_ap_ready)) begin
            ap_reg_grp_KeyExpansion_fu_158_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_SubBytes_fu_149_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_fu_302_p2)) | ((1'b1 == ap_NS_fsm_state17) & (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00000000 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage2_flag00000000 == 1'b0)))))) begin
            ap_reg_grp_SubBytes_fu_149_ap_start <= 1'b1;
        end else if ((1'b1 == grp_SubBytes_fu_149_ap_ready)) begin
            ap_reg_grp_SubBytes_fu_149_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_i_reg_126 <= i_reg_323;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_KeyExpansion_fu_158_ap_done == 1'b1))) begin
        i_i_reg_126 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_173_p2 == 1'd1))) begin
        round_reg_137 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        round_reg_137 <= tmp_reg_373;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_load_34_reg_354 <= RoundKey_q1;
        RoundKey_load_reg_349 <= RoundKey_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_reg_369 <= exitcond_reg_369;
        exitcond_reg_369 <= exitcond_fu_302_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_323 <= i_fu_179_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_173_p2 == 1'd0))) begin
        state_addr_reg_339 <= i_i_cast2_fu_168_p1;
        tmp_i_reg_328[3 : 2] <= tmp_i_fu_189_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_369))) begin
        tmp_reg_373 <= tmp_fu_313_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address0 = sum3_1_i_cast_fu_218_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_address0 = tmp_i_cast_fu_197_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_address0 = grp_KeyExpansion_fu_158_RoundKey_address0;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (ap_block_pp0_stage1_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_reg_369)) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state25))) begin
        RoundKey_address0 = grp_SubBytes_fu_149_RoundKey_address0;
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address1 = sum3_2_i_cast_fu_228_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_address1 = sum3_i_cast_fu_208_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_address1 = grp_KeyExpansion_fu_158_RoundKey_address1;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (ap_block_pp0_stage1_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage1_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_reg_369)) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state25))) begin
        RoundKey_address1 = grp_SubBytes_fu_149_RoundKey_address1;
    end else begin
        RoundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        RoundKey_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_ce0 = grp_KeyExpansion_fu_158_RoundKey_ce0;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_369)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_reg_369)) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state25))) begin
        RoundKey_ce0 = grp_SubBytes_fu_149_RoundKey_ce0;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        RoundKey_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_ce1 = grp_KeyExpansion_fu_158_RoundKey_ce1;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_369)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == ap_reg_pp0_iter1_exitcond_reg_369)) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state25))) begin
        RoundKey_ce1 = grp_SubBytes_fu_149_RoundKey_ce1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_we0 = grp_KeyExpansion_fu_158_RoundKey_we0;
    end else begin
        RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_we1 = grp_KeyExpansion_fu_158_RoundKey_we1;
    end else begin
        RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_302_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        grp_SubBytes_fu_149_round = 6'd10;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        grp_SubBytes_fu_149_round = round_cast1_cast_fu_308_p1;
    end else begin
        grp_SubBytes_fu_149_round = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        round_phi_fu_141_p4 = tmp_reg_373;
    end else begin
        round_phi_fu_141_p4 = round_reg_137;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        state_address0 = state_addr_reg_339;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (ap_block_pp0_stage1_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage2_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_reg_369)) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26))) begin
        state_address0 = grp_SubBytes_fu_149_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        state_ce0 = 1'b1;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_369)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_reg_369)) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26))) begin
        state_ce0 = grp_SubBytes_fu_149_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_369)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_reg_369)) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26))) begin
        state_ce1 = grp_SubBytes_fu_149_state_ce1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_d0 = tmp_118_i_fu_289_p5;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (ap_block_pp0_stage1_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage2_flag00000000 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_reg_369)) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26))) begin
        state_d0 = grp_SubBytes_fu_149_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_we0 = 1'b1;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_369)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_reg_369)) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26))) begin
        state_we0 = grp_SubBytes_fu_149_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_369)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_369) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage2_flag00011001 == 1'b0) & (1'd0 == ap_reg_pp0_iter1_exitcond_reg_369)) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26))) begin
        state_we1 = grp_SubBytes_fu_149_state_we1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_KeyExpansion_fu_158_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_173_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_fu_302_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_fu_302_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if (((ap_block_pp0_stage2_flag00011011 == 1'b0) & ~((ap_block_pp0_stage2_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_enable_reg_pp0_iter0 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else if (((ap_block_pp0_stage2_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((ap_block_pp0_stage4_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((ap_block_pp0_stage5_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((ap_block_pp0_stage7_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Key_address0 = grp_KeyExpansion_fu_158_Key_address0;

assign Key_address1 = grp_KeyExpansion_fu_158_Key_address1;

assign Key_ce0 = grp_KeyExpansion_fu_158_Key_ce0;

assign Key_ce1 = grp_KeyExpansion_fu_158_Key_ce1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_NS_fsm_state17 = ap_NS_fsm[32'd13];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond1_i_fu_173_p2 = ((i_i_reg_126 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_302_p2 = ((round_phi_fu_141_p4 == 4'd10) ? 1'b1 : 1'b0);

assign grp_KeyExpansion_fu_158_ap_start = ap_reg_grp_KeyExpansion_fu_158_ap_start;

assign grp_SubBytes_fu_149_ap_start = ap_reg_grp_SubBytes_fu_149_ap_start;

assign i_fu_179_p2 = (i_i_reg_126 + 3'd1);

assign i_i_cast2_fu_168_p1 = i_i_reg_126;

assign round_cast1_cast_fu_308_p1 = round_reg_137;

assign state_address1 = grp_SubBytes_fu_149_state_address1;

assign state_d1 = grp_SubBytes_fu_149_state_d1;

assign sum3_1_i_cast_fu_218_p1 = sum3_1_i_fu_213_p2;

assign sum3_1_i_fu_213_p2 = (tmp_i_reg_328 | 4'd2);

assign sum3_2_i_cast_fu_228_p1 = sum3_2_i_fu_223_p2;

assign sum3_2_i_fu_223_p2 = (tmp_i_reg_328 | 4'd3);

assign sum3_i_cast_fu_208_p1 = sum3_i_fu_202_p2;

assign sum3_i_fu_202_p2 = (tmp_i_fu_189_p3 | 4'd1);

assign tmp_112_fu_185_p1 = i_i_reg_126[1:0];

assign tmp_113_fu_233_p1 = state_q0[31:0];

assign tmp_113_i_fu_242_p4 = {{state_q0[63:32]}};

assign tmp_115_i_fu_257_p4 = {{state_q0[95:64]}};

assign tmp_117_i_fu_273_p4 = {{state_q0[127:96]}};

assign tmp_118_i_fu_289_p5 = {{{{tmp_84_3_i_fu_283_p2}, {tmp_84_2_i_fu_267_p2}}, {tmp_84_1_i_fu_252_p2}}, {tmp_84_i_fu_237_p2}};

assign tmp_84_1_i_fu_252_p2 = (RoundKey_load_34_reg_354 ^ tmp_113_i_fu_242_p4);

assign tmp_84_2_i_fu_267_p2 = (RoundKey_q0 ^ tmp_115_i_fu_257_p4);

assign tmp_84_3_i_fu_283_p2 = (RoundKey_q1 ^ tmp_117_i_fu_273_p4);

assign tmp_84_i_fu_237_p2 = (RoundKey_load_reg_349 ^ tmp_113_fu_233_p1);

assign tmp_fu_313_p2 = (round_reg_137 + 4'd1);

assign tmp_i_cast_fu_197_p1 = tmp_i_fu_189_p3;

assign tmp_i_fu_189_p3 = {{tmp_112_fu_185_p1}, {2'd0}};

always @ (posedge ap_clk) begin
    tmp_i_reg_328[1:0] <= 2'b00;
end

endmodule //Cipher
