// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module SubBytes (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        round,
        RoundKey_address0,
        RoundKey_ce0,
        RoundKey_q0
);

parameter    ap_ST_fsm_state1 = 26'd1;
parameter    ap_ST_fsm_state2 = 26'd2;
parameter    ap_ST_fsm_state3 = 26'd4;
parameter    ap_ST_fsm_state4 = 26'd8;
parameter    ap_ST_fsm_state5 = 26'd16;
parameter    ap_ST_fsm_state6 = 26'd32;
parameter    ap_ST_fsm_state7 = 26'd64;
parameter    ap_ST_fsm_state8 = 26'd128;
parameter    ap_ST_fsm_state9 = 26'd256;
parameter    ap_ST_fsm_state10 = 26'd512;
parameter    ap_ST_fsm_state11 = 26'd1024;
parameter    ap_ST_fsm_state12 = 26'd2048;
parameter    ap_ST_fsm_state13 = 26'd4096;
parameter    ap_ST_fsm_state14 = 26'd8192;
parameter    ap_ST_fsm_state15 = 26'd16384;
parameter    ap_ST_fsm_state16 = 26'd32768;
parameter    ap_ST_fsm_state17 = 26'd65536;
parameter    ap_ST_fsm_state18 = 26'd131072;
parameter    ap_ST_fsm_state19 = 26'd262144;
parameter    ap_ST_fsm_state20 = 26'd524288;
parameter    ap_ST_fsm_state21 = 26'd1048576;
parameter    ap_ST_fsm_state22 = 26'd2097152;
parameter    ap_ST_fsm_state23 = 26'd4194304;
parameter    ap_ST_fsm_state24 = 26'd8388608;
parameter    ap_ST_fsm_state25 = 26'd16777216;
parameter    ap_ST_fsm_state26 = 26'd33554432;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
input  [5:0] round;
output  [7:0] RoundKey_address0;
output   RoundKey_ce0;
input  [7:0] RoundKey_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[7:0] state_d1;
reg[7:0] RoundKey_address0;
reg RoundKey_ce0;

(* fsm_encoding = "none" *) reg   [25:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
reg   [7:0] reg_358;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state21;
reg   [7:0] reg_363;
wire    ap_CS_fsm_state11;
reg   [7:0] reg_370;
wire    ap_CS_fsm_state7;
wire   [5:0] tmp_3_cast_fu_385_p1;
reg   [5:0] tmp_3_cast_reg_928;
wire    ap_CS_fsm_state2;
wire   [2:0] a_1_fu_395_p2;
reg   [2:0] a_1_reg_936;
reg   [3:0] state_addr_12_reg_941;
wire    ap_CS_fsm_state3;
wire   [2:0] j_3_fu_421_p2;
reg   [2:0] j_3_reg_950;
wire    ap_CS_fsm_state4;
reg   [7:0] state_load_2_reg_960;
reg   [7:0] temp_1_reg_965;
wire    ap_CS_fsm_state8;
reg   [7:0] state_load_4_reg_970;
reg   [7:0] temp_2_reg_975;
wire    ap_CS_fsm_state9;
reg   [7:0] state_load_6_reg_980;
reg   [7:0] temp_3_reg_985;
wire    ap_CS_fsm_state10;
reg   [7:0] state_load_8_reg_990;
wire   [0:0] tmp_fu_435_p2;
reg   [0:0] tmp_reg_995;
wire    ap_CS_fsm_state16;
wire   [5:0] i_2_cast1_cast_fu_441_p1;
reg   [5:0] i_2_cast1_cast_reg_999;
wire    ap_CS_fsm_state17;
wire   [2:0] i_4_fu_451_p2;
reg   [2:0] i_4_reg_1007;
wire   [7:0] tmp_24_cast_fu_469_p1;
reg   [7:0] tmp_24_cast_reg_1012;
wire   [0:0] exitcond1_fu_445_p2;
reg   [3:0] state_addr_17_reg_1017;
wire    ap_CS_fsm_state18;
wire   [2:0] j_4_fu_501_p2;
reg   [2:0] j_4_reg_1026;
wire   [0:0] exitcond_fu_495_p2;
reg   [3:0] state_addr_13_reg_1036;
wire    ap_CS_fsm_state20;
reg   [3:0] state_addr_14_reg_1041;
reg   [3:0] state_addr_15_reg_1046;
reg   [3:0] state_addr_16_reg_1051;
wire   [2:0] i_3_fu_575_p2;
reg   [2:0] i_3_reg_1059;
wire   [7:0] tmp_11_fu_727_p2;
reg   [7:0] tmp_11_reg_1064;
wire    ap_CS_fsm_state22;
wire   [7:0] tmp_15_fu_767_p2;
reg   [7:0] tmp_15_reg_1069;
wire   [5:0] i_1_cast1_cast_fu_773_p1;
reg   [5:0] i_1_cast1_cast_reg_1074;
wire    ap_CS_fsm_state24;
wire   [2:0] i_5_fu_783_p2;
reg   [2:0] i_5_reg_1082;
wire   [7:0] tmp_25_cast_fu_801_p1;
reg   [7:0] tmp_25_cast_reg_1087;
wire   [0:0] exitcond3_fu_777_p2;
reg   [3:0] state_addr_18_reg_1092;
wire    ap_CS_fsm_state25;
wire   [2:0] j_5_fu_833_p2;
reg   [2:0] j_5_reg_1101;
wire   [0:0] exitcond2_fu_827_p2;
reg   [2:0] a_reg_274;
wire   [0:0] exitcond5_fu_415_p2;
reg   [2:0] j_reg_285;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond6_fu_389_p2;
reg   [2:0] i_2_reg_296;
reg   [2:0] j_2_reg_307;
wire    ap_CS_fsm_state19;
reg   [2:0] i_reg_318;
wire    ap_CS_fsm_state23;
reg   [2:0] i_1_reg_329;
wire   [0:0] exitcond4_fu_569_p2;
reg   [2:0] j_1_reg_340;
wire    ap_CS_fsm_state26;
wire   [31:0] tmp_7_cast_fu_410_p1;
wire   [31:0] num_assign_fu_427_p1;
wire   [31:0] tmp_30_cast_fu_490_p1;
wire   [31:0] sum_cast_fu_520_p1;
wire   [31:0] i_cast_fu_525_p1;
wire   [31:0] tmp_13_cast_fu_544_p1;
wire   [31:0] tmp_3_fu_549_p3;
wire   [31:0] tmp_22_cast_fu_564_p1;
wire   [31:0] tmp_34_cast_fu_822_p1;
wire   [31:0] sum1_cast_fu_857_p1;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire   [7:0] grp_fu_351_p2;
wire   [7:0] tmp_8_fu_633_p2;
wire   [7:0] tmp_5_fu_680_p2;
wire   [4:0] tmp_1_fu_377_p3;
wire   [5:0] j_cast_cast_fu_401_p1;
wire   [5:0] tmp_7_fu_405_p2;
wire   [4:0] tmp_2_fu_432_p1;
wire   [1:0] tmp_22_fu_457_p1;
wire   [3:0] tmp_16_fu_461_p3;
wire   [4:0] tmp_23_fu_473_p3;
wire   [5:0] tmp_29_cast_fu_481_p1;
wire   [5:0] tmp_24_fu_485_p2;
wire   [7:0] tmp9_fu_507_p3;
wire   [7:0] sum_fu_515_p2;
wire   [3:0] i_cast_cast_fu_534_p1;
wire   [3:0] tmp_s_fu_538_p2;
wire   [4:0] i_cast_cast3_fu_530_p1;
wire   [4:0] tmp_4_fu_558_p2;
wire   [7:0] Tm_fu_581_p2;
wire   [7:0] Tm_4_fu_587_p2;
wire   [0:0] tmp_9_fu_605_p3;
wire   [7:0] tmp_6_fu_599_p2;
wire   [7:0] tmp_5_cast_cast_fu_613_p3;
wire   [7:0] Tmp_fu_593_p2;
wire   [7:0] tmp2_fu_627_p2;
wire   [7:0] tmp1_fu_621_p2;
wire   [7:0] Tm_1_fu_640_p2;
wire   [0:0] tmp_12_fu_652_p3;
wire   [7:0] tmp_10_fu_646_p2;
wire   [7:0] tmp_11_cast_cast_fu_660_p3;
wire   [7:0] tmp4_fu_674_p2;
wire   [7:0] tmp3_fu_668_p2;
wire   [7:0] Tm_2_fu_687_p2;
wire   [0:0] tmp_14_fu_699_p3;
wire   [7:0] tmp_13_fu_693_p2;
wire   [7:0] tmp_16_cast_cast_fu_707_p3;
wire   [7:0] tmp6_fu_721_p2;
wire   [7:0] tmp5_fu_715_p2;
wire   [7:0] Tm_3_fu_733_p2;
wire   [0:0] tmp_21_fu_745_p3;
wire   [7:0] tmp_21_cast_cast_fu_753_p3;
wire   [7:0] tmp7_fu_761_p2;
wire   [7:0] tmp_19_fu_739_p2;
wire   [1:0] tmp_25_fu_789_p1;
wire   [3:0] tmp_17_fu_793_p3;
wire   [4:0] tmp_26_fu_805_p3;
wire   [5:0] tmp_33_cast_fu_813_p1;
wire   [5:0] tmp_27_fu_817_p2;
wire   [3:0] tmp_28_fu_839_p1;
wire   [7:0] tmp8_fu_842_p4;
wire   [7:0] sum1_fu_852_p2;
reg   [25:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 26'd1;
end

SubBytes_sbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond5_fu_415_p2))) begin
        a_reg_274 <= a_1_reg_936;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        a_reg_274 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & (1'd1 == exitcond4_fu_569_p2))) begin
        i_1_reg_329 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state25) & (1'd1 == exitcond2_fu_827_p2))) begin
        i_1_reg_329 <= i_5_reg_1082;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (tmp_fu_435_p2 == 1'd0))) begin
        i_2_reg_296 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state18) & (exitcond_fu_495_p2 == 1'd1))) begin
        i_2_reg_296 <= i_4_reg_1007;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & (tmp_fu_435_p2 == 1'd1))) begin
        i_reg_318 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        i_reg_318 <= i_3_reg_1059;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (tmp_reg_995 == 1'd1) & (1'd0 == exitcond3_fu_777_p2))) begin
        j_1_reg_340 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        j_1_reg_340 <= j_5_reg_1101;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (exitcond1_fu_445_p2 == 1'd0))) begin
        j_2_reg_307 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        j_2_reg_307 <= j_4_reg_1026;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond6_fu_389_p2))) begin
        j_reg_285 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_285 <= j_3_reg_950;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        reg_363 <= state_q0;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state21))) begin
        reg_363 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        reg_370 <= state_q1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        reg_370 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_1_reg_936 <= a_1_fu_395_p2;
        tmp_3_cast_reg_928[4 : 2] <= tmp_3_cast_fu_385_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (tmp_reg_995 == 1'd1))) begin
        i_1_cast1_cast_reg_1074[2 : 0] <= i_1_cast1_cast_fu_773_p1[2 : 0];
        i_5_reg_1082 <= i_5_fu_783_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state17)) begin
        i_2_cast1_cast_reg_999[2 : 0] <= i_2_cast1_cast_fu_441_p1[2 : 0];
        i_4_reg_1007 <= i_4_fu_451_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        i_3_reg_1059 <= i_3_fu_575_p2;
        state_addr_13_reg_1036[2 : 0] <= i_cast_fu_525_p1[2 : 0];
        state_addr_14_reg_1041 <= tmp_13_cast_fu_544_p1;
        state_addr_15_reg_1046[2 : 0] <= tmp_3_fu_549_p3[2 : 0];
        state_addr_16_reg_1051 <= tmp_22_cast_fu_564_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_3_reg_950 <= j_3_fu_421_p2;
        state_addr_12_reg_941 <= tmp_7_cast_fu_410_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        j_4_reg_1026 <= j_4_fu_501_p2;
        state_addr_17_reg_1017 <= tmp_30_cast_fu_490_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        j_5_reg_1101 <= j_5_fu_833_p2;
        state_addr_18_reg_1092 <= tmp_34_cast_fu_822_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state21))) begin
        reg_358 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        state_load_2_reg_960 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        state_load_4_reg_970 <= state_q1;
        temp_1_reg_965 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        state_load_6_reg_980 <= state_q1;
        temp_2_reg_975 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        state_load_8_reg_990 <= state_q1;
        temp_3_reg_985 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state22)) begin
        tmp_11_reg_1064 <= tmp_11_fu_727_p2;
        tmp_15_reg_1069 <= tmp_15_fu_767_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & (exitcond1_fu_445_p2 == 1'd0))) begin
        tmp_24_cast_reg_1012[3 : 2] <= tmp_24_cast_fu_469_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & (tmp_reg_995 == 1'd1) & (1'd0 == exitcond3_fu_777_p2))) begin
        tmp_25_cast_reg_1087[3 : 2] <= tmp_25_cast_fu_801_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        tmp_reg_995 <= tmp_fu_435_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        RoundKey_address0 = sum1_cast_fu_857_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        RoundKey_address0 = sum_cast_fu_520_p1;
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state25))) begin
        RoundKey_ce0 = 1'b1;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state24) & ((tmp_reg_995 == 1'd0) | (1'd1 == exitcond3_fu_777_p2))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state24) & ((tmp_reg_995 == 1'd0) | (1'd1 == exitcond3_fu_777_p2)))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        state_address0 = tmp_34_cast_fu_822_p1;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_address0 = state_addr_13_reg_1036;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23))) begin
        state_address0 = state_addr_15_reg_1046;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        state_address0 = i_cast_fu_525_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        state_address0 = tmp_30_cast_fu_490_p1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state16))) begin
        state_address0 = 32'd14;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state15))) begin
        state_address0 = 32'd12;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state14))) begin
        state_address0 = 32'd9;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state13))) begin
        state_address0 = 32'd8;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12))) begin
        state_address0 = 32'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = tmp_7_cast_fu_410_p1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state2))) begin
        state_address0 = 32'd4;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        state_address1 = state_addr_18_reg_1092;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_address1 = state_addr_14_reg_1041;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state23))) begin
        state_address1 = state_addr_16_reg_1051;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        state_address1 = tmp_13_cast_fu_544_p1;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        state_address1 = state_addr_17_reg_1017;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state16))) begin
        state_address1 = 32'd13;
    end else if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state15))) begin
        state_address1 = 32'd15;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state14))) begin
        state_address1 = 32'd11;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state13))) begin
        state_address1 = 32'd10;
    end else if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state12))) begin
        state_address1 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = state_addr_12_reg_941;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state2))) begin
        state_address1 = 32'd5;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        state_ce0 = 1'b1;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        state_d0 = tmp_11_reg_1064;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_d0 = tmp_8_fu_633_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_d0 = reg_370;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d0 = state_load_8_reg_990;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d0 = state_load_6_reg_980;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d0 = state_load_4_reg_970;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d0 = state_load_2_reg_960;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d0 = reg_363;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        state_d1 = tmp_15_reg_1069;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        state_d1 = tmp_5_fu_680_p2;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state26))) begin
        state_d1 = grp_fu_351_p2;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        state_d1 = temp_3_reg_985;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        state_d1 = reg_363;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        state_d1 = temp_2_reg_975;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        state_d1 = temp_1_reg_965;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        state_d1 = reg_358;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_d1 = reg_370;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        state_d1 = sbox_q0;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        state_we0 = 1'b1;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (1'd0 == exitcond6_fu_389_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond5_fu_415_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (tmp_fu_435_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (exitcond1_fu_445_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (exitcond_fu_495_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & (1'd1 == exitcond4_fu_569_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state24 : begin
            if (((1'b1 == ap_CS_fsm_state24) & ((tmp_reg_995 == 1'd0) | (1'd1 == exitcond3_fu_777_p2)))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state25 : begin
            if (((1'b1 == ap_CS_fsm_state25) & (1'd1 == exitcond2_fu_827_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Tm_1_fu_640_p2 = (state_q0 ^ reg_363);

assign Tm_2_fu_687_p2 = (state_q1 ^ state_q0);

assign Tm_3_fu_733_p2 = (state_q1 ^ reg_358);

assign Tm_4_fu_587_p2 = (state_q0 ^ Tm_fu_581_p2);

assign Tm_fu_581_p2 = (reg_363 ^ reg_358);

assign Tmp_fu_593_p2 = (state_q1 ^ Tm_4_fu_587_p2);

assign a_1_fu_395_p2 = (a_reg_274 + 3'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_445_p2 = ((i_2_reg_296 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_fu_827_p2 = ((j_1_reg_340 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond3_fu_777_p2 = ((i_1_reg_329 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond4_fu_569_p2 = ((i_reg_318 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond5_fu_415_p2 = ((j_reg_285 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond6_fu_389_p2 = ((a_reg_274 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_495_p2 = ((j_2_reg_307 == 3'd4) ? 1'b1 : 1'b0);

assign grp_fu_351_p2 = (state_q0 ^ RoundKey_q0);

assign i_1_cast1_cast_fu_773_p1 = i_1_reg_329;

assign i_2_cast1_cast_fu_441_p1 = i_2_reg_296;

assign i_3_fu_575_p2 = (i_reg_318 + 3'd1);

assign i_4_fu_451_p2 = (i_2_reg_296 + 3'd1);

assign i_5_fu_783_p2 = (i_1_reg_329 + 3'd1);

assign i_cast_cast3_fu_530_p1 = i_reg_318;

assign i_cast_cast_fu_534_p1 = i_reg_318;

assign i_cast_fu_525_p1 = i_reg_318;

assign j_3_fu_421_p2 = (j_reg_285 + 3'd1);

assign j_4_fu_501_p2 = (j_2_reg_307 + 3'd1);

assign j_5_fu_833_p2 = (j_1_reg_340 + 3'd1);

assign j_cast_cast_fu_401_p1 = j_reg_285;

assign num_assign_fu_427_p1 = state_q0;

assign sbox_address0 = num_assign_fu_427_p1;

assign sum1_cast_fu_857_p1 = sum1_fu_852_p2;

assign sum1_fu_852_p2 = (tmp8_fu_842_p4 + tmp_25_cast_reg_1087);

assign sum_cast_fu_520_p1 = sum_fu_515_p2;

assign sum_fu_515_p2 = (tmp9_fu_507_p3 + tmp_24_cast_reg_1012);

assign tmp1_fu_621_p2 = (reg_358 ^ tmp_6_fu_599_p2);

assign tmp2_fu_627_p2 = (tmp_5_cast_cast_fu_613_p3 ^ Tmp_fu_593_p2);

assign tmp3_fu_668_p2 = (reg_363 ^ tmp_10_fu_646_p2);

assign tmp4_fu_674_p2 = (tmp_11_cast_cast_fu_660_p3 ^ Tmp_fu_593_p2);

assign tmp5_fu_715_p2 = (state_q1 ^ Tm_fu_581_p2);

assign tmp6_fu_721_p2 = (tmp_13_fu_693_p2 ^ tmp_16_cast_cast_fu_707_p3);

assign tmp7_fu_761_p2 = (Tm_4_fu_587_p2 ^ tmp_21_cast_cast_fu_753_p3);

assign tmp8_fu_842_p4 = {{{tmp_28_fu_839_p1}, {1'd0}}, {j_1_reg_340}};

assign tmp9_fu_507_p3 = {{5'd20}, {j_2_reg_307}};

assign tmp_10_fu_646_p2 = Tm_1_fu_640_p2 << 8'd1;

assign tmp_11_cast_cast_fu_660_p3 = ((tmp_12_fu_652_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_11_fu_727_p2 = (tmp6_fu_721_p2 ^ tmp5_fu_715_p2);

assign tmp_12_fu_652_p3 = Tm_1_fu_640_p2[32'd7];

assign tmp_13_cast_fu_544_p1 = tmp_s_fu_538_p2;

assign tmp_13_fu_693_p2 = Tm_2_fu_687_p2 << 8'd1;

assign tmp_14_fu_699_p3 = Tm_2_fu_687_p2[32'd7];

assign tmp_15_fu_767_p2 = (tmp7_fu_761_p2 ^ tmp_19_fu_739_p2);

assign tmp_16_cast_cast_fu_707_p3 = ((tmp_14_fu_699_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_16_fu_461_p3 = {{tmp_22_fu_457_p1}, {2'd0}};

assign tmp_17_fu_793_p3 = {{tmp_25_fu_789_p1}, {2'd0}};

assign tmp_19_fu_739_p2 = Tm_3_fu_733_p2 << 8'd1;

assign tmp_1_fu_377_p3 = {{a_reg_274}, {2'd0}};

assign tmp_21_cast_cast_fu_753_p3 = ((tmp_21_fu_745_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_21_fu_745_p3 = Tm_3_fu_733_p2[32'd7];

assign tmp_22_cast_fu_564_p1 = tmp_4_fu_558_p2;

assign tmp_22_fu_457_p1 = i_2_reg_296[1:0];

assign tmp_23_fu_473_p3 = {{j_2_reg_307}, {2'd0}};

assign tmp_24_cast_fu_469_p1 = tmp_16_fu_461_p3;

assign tmp_24_fu_485_p2 = (i_2_cast1_cast_reg_999 + tmp_29_cast_fu_481_p1);

assign tmp_25_cast_fu_801_p1 = tmp_17_fu_793_p3;

assign tmp_25_fu_789_p1 = i_1_reg_329[1:0];

assign tmp_26_fu_805_p3 = {{j_1_reg_340}, {2'd0}};

assign tmp_27_fu_817_p2 = (i_1_cast1_cast_reg_1074 + tmp_33_cast_fu_813_p1);

assign tmp_28_fu_839_p1 = round[3:0];

assign tmp_29_cast_fu_481_p1 = tmp_23_fu_473_p3;

assign tmp_2_fu_432_p1 = round[4:0];

assign tmp_30_cast_fu_490_p1 = tmp_24_fu_485_p2;

assign tmp_33_cast_fu_813_p1 = tmp_26_fu_805_p3;

assign tmp_34_cast_fu_822_p1 = tmp_27_fu_817_p2;

assign tmp_3_cast_fu_385_p1 = tmp_1_fu_377_p3;

assign tmp_3_fu_549_p3 = {{29'd1}, {i_reg_318}};

assign tmp_4_fu_558_p2 = (i_cast_cast3_fu_530_p1 + 5'd12);

assign tmp_5_cast_cast_fu_613_p3 = ((tmp_9_fu_605_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_5_fu_680_p2 = (tmp4_fu_674_p2 ^ tmp3_fu_668_p2);

assign tmp_6_fu_599_p2 = Tm_fu_581_p2 << 8'd1;

assign tmp_7_cast_fu_410_p1 = tmp_7_fu_405_p2;

assign tmp_7_fu_405_p2 = (tmp_3_cast_reg_928 + j_cast_cast_fu_401_p1);

assign tmp_8_fu_633_p2 = (tmp2_fu_627_p2 ^ tmp1_fu_621_p2);

assign tmp_9_fu_605_p3 = Tm_fu_581_p2[32'd7];

assign tmp_fu_435_p2 = (($signed(tmp_2_fu_432_p1) < $signed(5'd10)) ? 1'b1 : 1'b0);

assign tmp_s_fu_538_p2 = (i_cast_cast_fu_534_p1 + 4'd4);

always @ (posedge ap_clk) begin
    tmp_3_cast_reg_928[1:0] <= 2'b00;
    tmp_3_cast_reg_928[5] <= 1'b0;
    i_2_cast1_cast_reg_999[5:3] <= 3'b000;
    tmp_24_cast_reg_1012[1:0] <= 2'b00;
    tmp_24_cast_reg_1012[7:4] <= 4'b0000;
    state_addr_13_reg_1036[3] <= 1'b0;
    state_addr_15_reg_1046[3] <= 1'b1;
    i_1_cast1_cast_reg_1074[5:3] <= 3'b000;
    tmp_25_cast_reg_1087[1:0] <= 2'b00;
    tmp_25_cast_reg_1087[7:4] <= 4'b0000;
end

endmodule //SubBytes
