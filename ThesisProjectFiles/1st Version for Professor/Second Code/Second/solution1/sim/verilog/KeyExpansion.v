// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module KeyExpansion (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        RoundKey_address0,
        RoundKey_ce0,
        RoundKey_we0,
        RoundKey_d0,
        RoundKey_q0,
        RoundKey_address1,
        RoundKey_ce1,
        RoundKey_we1,
        RoundKey_d1,
        RoundKey_q1,
        Key_address0,
        Key_ce0,
        Key_q0,
        Key_address1,
        Key_ce1,
        Key_q1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [7:0] RoundKey_address0;
output   RoundKey_ce0;
output   RoundKey_we0;
output  [7:0] RoundKey_d0;
input  [7:0] RoundKey_q0;
output  [7:0] RoundKey_address1;
output   RoundKey_ce1;
output   RoundKey_we1;
output  [7:0] RoundKey_d1;
input  [7:0] RoundKey_q1;
output  [4:0] Key_address0;
output   Key_ce0;
input  [7:0] Key_q0;
output  [4:0] Key_address1;
output   Key_ce1;
input  [7:0] Key_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[7:0] RoundKey_address0;
reg RoundKey_ce0;
reg RoundKey_we0;
reg[7:0] RoundKey_d0;
reg[7:0] RoundKey_address1;
reg RoundKey_ce1;
reg RoundKey_we1;
reg[7:0] RoundKey_d1;
reg[4:0] Key_address0;
reg Key_ce0;
reg[4:0] Key_address1;
reg Key_ce1;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [7:0] sbox_address0;
reg    sbox_ce0;
wire   [7:0] sbox_q0;
wire   [7:0] sbox_address1;
reg    sbox_ce1;
wire   [7:0] sbox_q1;
wire   [7:0] sbox_address2;
reg    sbox_ce2;
wire   [7:0] sbox_q2;
wire   [7:0] sbox_address3;
reg    sbox_ce3;
wire   [7:0] sbox_q3;
wire   [7:0] Rcon_address0;
reg    Rcon_ce0;
wire   [7:0] Rcon_q0;
wire   [2:0] tmp_23_fu_407_p2;
reg   [2:0] tmp_23_reg_772;
wire    ap_CS_fsm_state2;
wire   [3:0] tmp_fu_417_p3;
reg   [3:0] tmp_reg_777;
wire   [0:0] exitcond2_fu_401_p2;
wire   [31:0] tmp_cast_fu_425_p1;
reg   [31:0] tmp_cast_reg_783;
wire   [31:0] tmp_cast_37_fu_436_p1;
reg   [31:0] tmp_cast_37_reg_793;
wire   [31:0] tmp_32_cast_fu_446_p1;
reg   [31:0] tmp_32_cast_reg_803;
wire    ap_CS_fsm_state3;
wire   [31:0] tmp_33_cast_fu_456_p1;
reg   [31:0] tmp_33_cast_reg_813;
wire   [7:0] tmp_24_fu_467_p3;
reg   [7:0] tmp_24_reg_826;
wire    ap_CS_fsm_state5;
wire   [0:0] exitcond1_fu_461_p2;
wire   [31:0] tmp_35_cast_fu_475_p1;
reg   [31:0] tmp_35_cast_reg_838;
wire   [2:0] j_6_fu_485_p2;
reg   [2:0] j_6_reg_846;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_479_p2;
wire   [1:0] tmp_36_fu_511_p1;
reg   [1:0] tmp_36_reg_856;
wire   [0:0] tmp_25_fu_519_p2;
reg   [0:0] tmp_25_reg_863;
wire   [5:0] i_6_fu_580_p2;
reg   [5:0] i_6_reg_906;
wire   [7:0] temp_3_3_fu_615_p3;
wire    ap_CS_fsm_state7;
wire   [7:0] temp_3_4_fu_631_p3;
wire   [7:0] temp_3_7_fu_647_p3;
wire   [7:0] temp_3_9_fu_655_p3;
wire   [7:0] temp_3_1_43_fu_669_p3;
reg   [7:0] temp_3_1_43_reg_931;
wire    ap_CS_fsm_state8;
wire   [7:0] temp_2_1_44_fu_676_p3;
reg   [7:0] temp_2_1_44_reg_937;
wire   [7:0] temp_1_1_fu_683_p3;
reg   [7:0] temp_1_1_reg_943;
wire   [7:0] temp_0_2_fu_690_p3;
reg   [7:0] temp_0_2_reg_948;
wire   [7:0] tmp_27_fu_697_p2;
reg   [7:0] tmp_27_reg_953;
wire   [7:0] tmp_28_fu_703_p2;
reg   [7:0] tmp_28_reg_958;
wire   [7:0] tmp_30_fu_739_p2;
reg   [7:0] tmp_30_reg_973;
wire    ap_CS_fsm_state9;
wire   [7:0] tmp_32_fu_744_p2;
reg   [7:0] tmp_32_reg_978;
reg   [2:0] i_reg_275;
wire    ap_CS_fsm_state4;
reg   [7:0] temp_3_reg_286;
wire    ap_CS_fsm_state10;
reg   [7:0] temp_2_reg_298;
reg   [7:0] temp_1_reg_310;
reg   [7:0] temp_reg_322;
reg   [5:0] i_1_reg_334;
reg   [7:0] temp_3_1_reg_346;
reg   [7:0] temp_2_1_reg_357;
reg   [7:0] temp_3_5_reg_368;
reg   [7:0] temp_3_8_reg_379;
reg   [2:0] j_reg_390;
wire   [31:0] sum8_cast_fu_506_p1;
wire   [31:0] num_assign_fu_525_p1;
wire   [31:0] num_assign_1_fu_530_p1;
wire   [31:0] num_assign_2_fu_535_p1;
wire   [31:0] num_assign_3_fu_540_p1;
wire   [31:0] tmp_26_fu_555_p1;
wire   [31:0] sum_cast_fu_565_p1;
wire   [31:0] sum2_cast_fu_575_p1;
wire   [31:0] sum3_cast_fu_714_p1;
wire   [31:0] sum4_cast_fu_724_p1;
wire   [31:0] tmp_49_cast_fu_734_p1;
wire   [31:0] tmp_51_cast_fu_754_p1;
wire   [31:0] tmp_53_cast_fu_764_p1;
wire   [1:0] tmp_34_fu_413_p1;
wire   [3:0] tmp_s_fu_430_p2;
wire   [3:0] tmp_21_fu_441_p2;
wire   [3:0] tmp_22_fu_451_p2;
wire   [2:0] tmp20_fu_491_p2;
wire  signed [7:0] tmp29_cast_fu_497_p1;
wire   [7:0] sum8_fu_501_p2;
wire   [1:0] tmp_35_fu_515_p1;
wire   [3:0] p_lshr_f_cast_fu_545_p4;
wire   [7:0] sum_fu_560_p2;
wire   [7:0] sum2_fu_570_p2;
wire   [0:0] sel_tmp4_fu_596_p2;
wire   [0:0] sel_tmp2_fu_591_p2;
wire   [0:0] sel_tmp_fu_586_p2;
wire   [0:0] or_cond_fu_601_p2;
wire   [7:0] newSel_fu_607_p3;
wire   [7:0] newSel2_fu_623_p3;
wire   [7:0] temp_3_6_fu_639_p3;
wire   [7:0] temp_0_1_fu_663_p2;
wire   [7:0] sum3_fu_709_p2;
wire   [7:0] sum4_fu_719_p2;
wire   [7:0] tmp_29_fu_729_p2;
wire   [7:0] tmp_31_fu_749_p2;
wire   [7:0] tmp_33_fu_759_p2;
reg   [9:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
end

KeyExpansion_sbox #(
    .DataWidth( 8 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
sbox_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(sbox_address0),
    .ce0(sbox_ce0),
    .q0(sbox_q0),
    .address1(sbox_address1),
    .ce1(sbox_ce1),
    .q1(sbox_q1),
    .address2(sbox_address2),
    .ce2(sbox_ce2),
    .q2(sbox_q2),
    .address3(sbox_address3),
    .ce3(sbox_ce3),
    .q3(sbox_q3)
);

KeyExpansion_Rcon #(
    .DataWidth( 8 ),
    .AddressRange( 255 ),
    .AddressWidth( 8 ))
Rcon_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Rcon_address0),
    .ce0(Rcon_ce0),
    .q0(Rcon_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_401_p2 == 1'd1))) begin
        i_1_reg_334 <= 6'd4;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        i_1_reg_334 <= i_6_reg_906;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        i_reg_275 <= tmp_23_reg_772;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_275 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_390 <= j_6_reg_846;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_461_p2))) begin
        j_reg_390 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_2_1_reg_357 <= temp_3_4_fu_631_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_461_p2))) begin
        temp_2_1_reg_357 <= temp_2_reg_298;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_3_1_reg_346 <= temp_3_3_fu_615_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_461_p2))) begin
        temp_3_1_reg_346 <= temp_3_reg_286;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_3_5_reg_368 <= temp_3_7_fu_647_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_461_p2))) begin
        temp_3_5_reg_368 <= temp_1_reg_310;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        temp_3_8_reg_379 <= temp_3_9_fu_655_p3;
    end else if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_461_p2))) begin
        temp_3_8_reg_379 <= temp_reg_322;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_479_p2 == 1'd1))) begin
        i_6_reg_906 <= i_6_fu_580_p2;
        tmp_25_reg_863 <= tmp_25_fu_519_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_6_reg_846 <= j_6_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        temp_0_2_reg_948 <= temp_0_2_fu_690_p3;
        temp_1_1_reg_943 <= temp_1_1_fu_683_p3;
        temp_2_1_44_reg_937 <= temp_2_1_44_fu_676_p3;
        temp_3_1_43_reg_931 <= temp_3_1_43_fu_669_p3;
        tmp_27_reg_953 <= tmp_27_fu_697_p2;
        tmp_28_reg_958 <= tmp_28_fu_703_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        temp_1_reg_310 <= temp_1_1_reg_943;
        temp_2_reg_298 <= temp_2_1_44_reg_937;
        temp_3_reg_286 <= temp_3_1_43_reg_931;
        temp_reg_322 <= temp_0_2_reg_948;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        tmp_23_reg_772 <= tmp_23_fu_407_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (1'd0 == exitcond1_fu_461_p2))) begin
        tmp_24_reg_826[7 : 2] <= tmp_24_fu_467_p3[7 : 2];
        tmp_35_cast_reg_838[7 : 2] <= tmp_35_cast_fu_475_p1[7 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_30_reg_973 <= tmp_30_fu_739_p2;
        tmp_32_reg_978 <= tmp_32_fu_744_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_32_cast_reg_803[3 : 2] <= tmp_32_cast_fu_446_p1[3 : 2];
        tmp_33_cast_reg_813[3 : 2] <= tmp_33_cast_fu_456_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_479_p2))) begin
        tmp_36_reg_856 <= tmp_36_fu_511_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_401_p2 == 1'd0))) begin
        tmp_cast_37_reg_793[3 : 2] <= tmp_cast_37_fu_436_p1[3 : 2];
        tmp_cast_reg_783[3 : 2] <= tmp_cast_fu_425_p1[3 : 2];
        tmp_reg_777[3 : 2] <= tmp_fu_417_p3[3 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Key_address0 = tmp_32_cast_fu_446_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Key_address0 = tmp_cast_fu_425_p1;
    end else begin
        Key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Key_address1 = tmp_33_cast_fu_456_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        Key_address1 = tmp_cast_37_fu_436_p1;
    end else begin
        Key_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        Key_ce0 = 1'b1;
    end else begin
        Key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        Key_ce1 = 1'b1;
    end else begin
        Key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        Rcon_ce0 = 1'b1;
    end else begin
        Rcon_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_address0 = tmp_53_cast_fu_764_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_address0 = tmp_49_cast_fu_734_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_address0 = sum4_cast_fu_724_p1;
    end else if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_479_p2 == 1'd1))) begin
        RoundKey_address0 = sum_cast_fu_565_p1;
    end else if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_479_p2))) begin
        RoundKey_address0 = sum8_cast_fu_506_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address0 = tmp_32_cast_reg_803;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_address0 = tmp_cast_reg_783;
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_address1 = tmp_51_cast_fu_754_p1;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_address1 = tmp_35_cast_reg_838;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        RoundKey_address1 = sum3_cast_fu_714_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        RoundKey_address1 = sum2_cast_fu_575_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address1 = tmp_33_cast_reg_813;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        RoundKey_address1 = tmp_cast_37_reg_793;
    end else begin
        RoundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_479_p2)) | ((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_479_p2 == 1'd1)) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        RoundKey_ce0 = 1'b1;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        RoundKey_ce1 = 1'b1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_d0 = tmp_32_reg_978;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_d0 = tmp_28_reg_958;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        RoundKey_d0 = Key_q0;
    end else begin
        RoundKey_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        RoundKey_d1 = tmp_30_reg_973;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        RoundKey_d1 = tmp_27_reg_953;
    end else if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4))) begin
        RoundKey_d1 = Key_q1;
    end else begin
        RoundKey_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        RoundKey_we0 = 1'b1;
    end else begin
        RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state10))) begin
        RoundKey_we1 = 1'b1;
    end else begin
        RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_461_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_461_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_ce0 = 1'b1;
    end else begin
        sbox_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_ce1 = 1'b1;
    end else begin
        sbox_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_ce2 = 1'b1;
    end else begin
        sbox_ce2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        sbox_ce3 = 1'b1;
    end else begin
        sbox_ce3 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond2_fu_401_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond1_fu_461_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_479_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Rcon_address0 = tmp_26_fu_555_p1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_461_p2 = ((i_1_reg_334 == 6'd44) ? 1'b1 : 1'b0);

assign exitcond2_fu_401_p2 = ((i_reg_275 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_479_p2 = ((j_reg_390 == 3'd4) ? 1'b1 : 1'b0);

assign i_6_fu_580_p2 = (6'd1 + i_1_reg_334);

assign j_6_fu_485_p2 = (j_reg_390 + 3'd1);

assign newSel2_fu_623_p3 = ((sel_tmp_fu_586_p2[0:0] === 1'b1) ? RoundKey_q0 : temp_2_1_reg_357);

assign newSel_fu_607_p3 = ((sel_tmp_fu_586_p2[0:0] === 1'b1) ? temp_3_1_reg_346 : RoundKey_q0);

assign num_assign_1_fu_530_p1 = temp_2_1_reg_357;

assign num_assign_2_fu_535_p1 = temp_3_1_reg_346;

assign num_assign_3_fu_540_p1 = temp_3_8_reg_379;

assign num_assign_fu_525_p1 = temp_3_5_reg_368;

assign or_cond_fu_601_p2 = (sel_tmp4_fu_596_p2 | sel_tmp2_fu_591_p2);

assign p_lshr_f_cast_fu_545_p4 = {{i_1_reg_334[5:2]}};

assign sbox_address0 = num_assign_fu_525_p1;

assign sbox_address1 = num_assign_1_fu_530_p1;

assign sbox_address2 = num_assign_2_fu_535_p1;

assign sbox_address3 = num_assign_3_fu_540_p1;

assign sel_tmp2_fu_591_p2 = ((tmp_36_reg_856 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_596_p2 = ((tmp_36_reg_856 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_586_p2 = ((tmp_36_reg_856 == 2'd2) ? 1'b1 : 1'b0);

assign sum2_cast_fu_575_p1 = sum2_fu_570_p2;

assign sum2_fu_570_p2 = ($signed(8'd241) + $signed(tmp_24_reg_826));

assign sum3_cast_fu_714_p1 = sum3_fu_709_p2;

assign sum3_fu_709_p2 = ($signed(8'd242) + $signed(tmp_24_reg_826));

assign sum4_cast_fu_724_p1 = sum4_fu_719_p2;

assign sum4_fu_719_p2 = ($signed(8'd243) + $signed(tmp_24_reg_826));

assign sum8_cast_fu_506_p1 = sum8_fu_501_p2;

assign sum8_fu_501_p2 = ($signed(tmp29_cast_fu_497_p1) + $signed(tmp_24_reg_826));

assign sum_cast_fu_565_p1 = sum_fu_560_p2;

assign sum_fu_560_p2 = ($signed(8'd240) + $signed(tmp_24_reg_826));

assign temp_0_1_fu_663_p2 = (Rcon_q0 ^ sbox_q0);

assign temp_0_2_fu_690_p3 = ((tmp_25_reg_863[0:0] === 1'b1) ? temp_0_1_fu_663_p2 : temp_3_8_reg_379);

assign temp_1_1_fu_683_p3 = ((tmp_25_reg_863[0:0] === 1'b1) ? sbox_q1 : temp_3_5_reg_368);

assign temp_2_1_44_fu_676_p3 = ((tmp_25_reg_863[0:0] === 1'b1) ? sbox_q2 : temp_2_1_reg_357);

assign temp_3_1_43_fu_669_p3 = ((tmp_25_reg_863[0:0] === 1'b1) ? sbox_q3 : temp_3_1_reg_346);

assign temp_3_3_fu_615_p3 = ((or_cond_fu_601_p2[0:0] === 1'b1) ? temp_3_1_reg_346 : newSel_fu_607_p3);

assign temp_3_4_fu_631_p3 = ((or_cond_fu_601_p2[0:0] === 1'b1) ? temp_2_1_reg_357 : newSel2_fu_623_p3);

assign temp_3_6_fu_639_p3 = ((sel_tmp2_fu_591_p2[0:0] === 1'b1) ? RoundKey_q0 : temp_3_5_reg_368);

assign temp_3_7_fu_647_p3 = ((sel_tmp4_fu_596_p2[0:0] === 1'b1) ? temp_3_5_reg_368 : temp_3_6_fu_639_p3);

assign temp_3_9_fu_655_p3 = ((sel_tmp4_fu_596_p2[0:0] === 1'b1) ? RoundKey_q0 : temp_3_8_reg_379);

assign tmp20_fu_491_p2 = (j_reg_390 ^ 3'd4);

assign tmp29_cast_fu_497_p1 = $signed(tmp20_fu_491_p2);

assign tmp_21_fu_441_p2 = (tmp_reg_777 | 4'd2);

assign tmp_22_fu_451_p2 = (tmp_reg_777 | 4'd3);

assign tmp_23_fu_407_p2 = (i_reg_275 + 3'd1);

assign tmp_24_fu_467_p3 = {{i_1_reg_334}, {2'd0}};

assign tmp_25_fu_519_p2 = ((tmp_35_fu_515_p1 == 2'd0) ? 1'b1 : 1'b0);

assign tmp_26_fu_555_p1 = p_lshr_f_cast_fu_545_p4;

assign tmp_27_fu_697_p2 = (RoundKey_q0 ^ temp_0_2_fu_690_p3);

assign tmp_28_fu_703_p2 = (RoundKey_q1 ^ temp_1_1_fu_683_p3);

assign tmp_29_fu_729_p2 = (tmp_24_reg_826 | 8'd1);

assign tmp_30_fu_739_p2 = (RoundKey_q1 ^ temp_2_1_44_reg_937);

assign tmp_31_fu_749_p2 = (tmp_24_reg_826 | 8'd2);

assign tmp_32_cast_fu_446_p1 = tmp_21_fu_441_p2;

assign tmp_32_fu_744_p2 = (RoundKey_q0 ^ temp_3_1_43_reg_931);

assign tmp_33_cast_fu_456_p1 = tmp_22_fu_451_p2;

assign tmp_33_fu_759_p2 = (tmp_24_reg_826 | 8'd3);

assign tmp_34_fu_413_p1 = i_reg_275[1:0];

assign tmp_35_cast_fu_475_p1 = tmp_24_fu_467_p3;

assign tmp_35_fu_515_p1 = i_1_reg_334[1:0];

assign tmp_36_fu_511_p1 = j_reg_390[1:0];

assign tmp_49_cast_fu_734_p1 = tmp_29_fu_729_p2;

assign tmp_51_cast_fu_754_p1 = tmp_31_fu_749_p2;

assign tmp_53_cast_fu_764_p1 = tmp_33_fu_759_p2;

assign tmp_cast_37_fu_436_p1 = tmp_s_fu_430_p2;

assign tmp_cast_fu_425_p1 = tmp_fu_417_p3;

assign tmp_fu_417_p3 = {{tmp_34_fu_413_p1}, {2'd0}};

assign tmp_s_fu_430_p2 = (tmp_fu_417_p3 | 4'd1);

always @ (posedge ap_clk) begin
    tmp_reg_777[1:0] <= 2'b00;
    tmp_cast_reg_783[1:0] <= 2'b00;
    tmp_cast_reg_783[31:4] <= 28'b0000000000000000000000000000;
    tmp_cast_37_reg_793[1:0] <= 2'b01;
    tmp_cast_37_reg_793[31:4] <= 28'b0000000000000000000000000000;
    tmp_32_cast_reg_803[1:0] <= 2'b10;
    tmp_32_cast_reg_803[31:4] <= 28'b0000000000000000000000000000;
    tmp_33_cast_reg_813[1:0] <= 2'b11;
    tmp_33_cast_reg_813[31:4] <= 28'b0000000000000000000000000000;
    tmp_24_reg_826[1:0] <= 2'b00;
    tmp_35_cast_reg_838[1:0] <= 2'b00;
    tmp_35_cast_reg_838[31:8] <= 24'b000000000000000000000000;
end

endmodule //KeyExpansion
