// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Cipher,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7eg-ffvf1517-1l-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.297333,HLS_SYN_LAT=1776,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=977,HLS_SYN_LUT=1651}" *)

module Cipher (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        Key_address0,
        Key_ce0,
        Key_q0,
        Key_address1,
        Key_ce1,
        Key_q1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [7:0] state_d0;
input  [7:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [7:0] state_d1;
input  [7:0] state_q1;
output  [4:0] Key_address0;
output   Key_ce0;
input  [7:0] Key_q0;
output  [4:0] Key_address1;
output   Key_ce1;
input  [7:0] Key_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[7:0] state_d0;
reg state_ce1;
reg state_we1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] i_i_cast3_cast_fu_129_p1;
reg   [5:0] i_i_cast3_cast_reg_229;
wire    ap_CS_fsm_state3;
wire   [2:0] i_fu_139_p2;
reg   [2:0] i_reg_237;
wire   [3:0] tmp_i_fu_149_p3;
reg   [3:0] tmp_i_reg_242;
wire   [0:0] exitcond1_i_fu_133_p2;
reg   [3:0] state_addr_reg_247;
wire    ap_CS_fsm_state4;
wire   [2:0] j_fu_189_p2;
reg   [2:0] j_reg_255;
wire   [0:0] exitcond_i_fu_183_p2;
wire   [5:0] round_cast1_cast_fu_218_p1;
reg   [5:0] round_cast1_cast_reg_268;
wire    ap_CS_fsm_state6;
wire   [0:0] exitcond_fu_212_p2;
wire   [3:0] tmp_fu_223_p2;
reg   [3:0] tmp_reg_273;
reg   [7:0] RoundKey_address0;
reg    RoundKey_ce0;
reg    RoundKey_we0;
wire   [7:0] RoundKey_q0;
reg    RoundKey_ce1;
reg    RoundKey_we1;
wire   [7:0] RoundKey_q1;
wire    grp_KeyExpansion_fu_106_ap_start;
wire    grp_KeyExpansion_fu_106_ap_done;
wire    grp_KeyExpansion_fu_106_ap_idle;
wire    grp_KeyExpansion_fu_106_ap_ready;
wire   [7:0] grp_KeyExpansion_fu_106_RoundKey_address0;
wire    grp_KeyExpansion_fu_106_RoundKey_ce0;
wire    grp_KeyExpansion_fu_106_RoundKey_we0;
wire   [7:0] grp_KeyExpansion_fu_106_RoundKey_d0;
wire   [7:0] grp_KeyExpansion_fu_106_RoundKey_address1;
wire    grp_KeyExpansion_fu_106_RoundKey_ce1;
wire    grp_KeyExpansion_fu_106_RoundKey_we1;
wire   [7:0] grp_KeyExpansion_fu_106_RoundKey_d1;
wire   [4:0] grp_KeyExpansion_fu_106_Key_address0;
wire    grp_KeyExpansion_fu_106_Key_ce0;
wire   [4:0] grp_KeyExpansion_fu_106_Key_address1;
wire    grp_KeyExpansion_fu_106_Key_ce1;
wire    grp_SubBytes_fu_118_ap_start;
wire    grp_SubBytes_fu_118_ap_done;
wire    grp_SubBytes_fu_118_ap_idle;
wire    grp_SubBytes_fu_118_ap_ready;
wire   [3:0] grp_SubBytes_fu_118_state_address0;
wire    grp_SubBytes_fu_118_state_ce0;
wire    grp_SubBytes_fu_118_state_we0;
wire   [7:0] grp_SubBytes_fu_118_state_d0;
wire   [3:0] grp_SubBytes_fu_118_state_address1;
wire    grp_SubBytes_fu_118_state_ce1;
wire    grp_SubBytes_fu_118_state_we1;
wire   [7:0] grp_SubBytes_fu_118_state_d1;
reg   [5:0] grp_SubBytes_fu_118_round;
wire   [7:0] grp_SubBytes_fu_118_RoundKey_address0;
wire    grp_SubBytes_fu_118_RoundKey_ce0;
reg   [2:0] i_i_reg_73;
wire    ap_CS_fsm_state2;
reg   [2:0] j_i_reg_84;
wire    ap_CS_fsm_state5;
reg   [3:0] round_reg_95;
wire    ap_CS_fsm_state7;
reg    ap_reg_grp_KeyExpansion_fu_106_ap_start;
reg    ap_reg_grp_SubBytes_fu_118_ap_start;
wire    ap_CS_fsm_state8;
wire   [31:0] tmp_39_cast_fu_174_p1;
wire   [31:0] sum3_i_cast_fu_200_p1;
wire   [7:0] tmp_i_46_fu_205_p2;
wire   [1:0] tmp_38_fu_145_p1;
wire   [4:0] tmp_s_fu_157_p3;
wire   [5:0] tmp_38_cast_fu_165_p1;
wire   [5:0] tmp_34_fu_169_p2;
wire   [3:0] j_i_cast_fu_179_p1;
wire   [3:0] sum3_i_fu_195_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
#0 ap_reg_grp_KeyExpansion_fu_106_ap_start = 1'b0;
#0 ap_reg_grp_SubBytes_fu_118_ap_start = 1'b0;
end

Cipher_RoundKey #(
    .DataWidth( 8 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
RoundKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RoundKey_address0),
    .ce0(RoundKey_ce0),
    .we0(RoundKey_we0),
    .d0(grp_KeyExpansion_fu_106_RoundKey_d0),
    .q0(RoundKey_q0),
    .address1(grp_KeyExpansion_fu_106_RoundKey_address1),
    .ce1(RoundKey_ce1),
    .we1(RoundKey_we1),
    .d1(grp_KeyExpansion_fu_106_RoundKey_d1),
    .q1(RoundKey_q1)
);

KeyExpansion grp_KeyExpansion_fu_106(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeyExpansion_fu_106_ap_start),
    .ap_done(grp_KeyExpansion_fu_106_ap_done),
    .ap_idle(grp_KeyExpansion_fu_106_ap_idle),
    .ap_ready(grp_KeyExpansion_fu_106_ap_ready),
    .RoundKey_address0(grp_KeyExpansion_fu_106_RoundKey_address0),
    .RoundKey_ce0(grp_KeyExpansion_fu_106_RoundKey_ce0),
    .RoundKey_we0(grp_KeyExpansion_fu_106_RoundKey_we0),
    .RoundKey_d0(grp_KeyExpansion_fu_106_RoundKey_d0),
    .RoundKey_q0(RoundKey_q0),
    .RoundKey_address1(grp_KeyExpansion_fu_106_RoundKey_address1),
    .RoundKey_ce1(grp_KeyExpansion_fu_106_RoundKey_ce1),
    .RoundKey_we1(grp_KeyExpansion_fu_106_RoundKey_we1),
    .RoundKey_d1(grp_KeyExpansion_fu_106_RoundKey_d1),
    .RoundKey_q1(RoundKey_q1),
    .Key_address0(grp_KeyExpansion_fu_106_Key_address0),
    .Key_ce0(grp_KeyExpansion_fu_106_Key_ce0),
    .Key_q0(Key_q0),
    .Key_address1(grp_KeyExpansion_fu_106_Key_address1),
    .Key_ce1(grp_KeyExpansion_fu_106_Key_ce1),
    .Key_q1(Key_q1)
);

SubBytes grp_SubBytes_fu_118(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_SubBytes_fu_118_ap_start),
    .ap_done(grp_SubBytes_fu_118_ap_done),
    .ap_idle(grp_SubBytes_fu_118_ap_idle),
    .ap_ready(grp_SubBytes_fu_118_ap_ready),
    .state_address0(grp_SubBytes_fu_118_state_address0),
    .state_ce0(grp_SubBytes_fu_118_state_ce0),
    .state_we0(grp_SubBytes_fu_118_state_we0),
    .state_d0(grp_SubBytes_fu_118_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_SubBytes_fu_118_state_address1),
    .state_ce1(grp_SubBytes_fu_118_state_ce1),
    .state_we1(grp_SubBytes_fu_118_state_we1),
    .state_d1(grp_SubBytes_fu_118_state_d1),
    .state_q1(state_q1),
    .round(grp_SubBytes_fu_118_round),
    .RoundKey_address0(grp_SubBytes_fu_118_RoundKey_address0),
    .RoundKey_ce0(grp_SubBytes_fu_118_RoundKey_ce0),
    .RoundKey_q0(RoundKey_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_KeyExpansion_fu_106_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_reg_grp_KeyExpansion_fu_106_ap_start <= 1'b1;
        end else if ((1'b1 == grp_KeyExpansion_fu_106_ap_ready)) begin
            ap_reg_grp_KeyExpansion_fu_106_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_SubBytes_fu_118_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_212_p2)) | ((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_212_p2 == 1'd1)))) begin
            ap_reg_grp_SubBytes_fu_118_ap_start <= 1'b1;
        end else if ((1'b1 == grp_SubBytes_fu_118_ap_ready)) begin
            ap_reg_grp_SubBytes_fu_118_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (exitcond_i_fu_183_p2 == 1'd1))) begin
        i_i_reg_73 <= i_reg_237;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_KeyExpansion_fu_106_ap_done == 1'b1))) begin
        i_i_reg_73 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_133_p2 == 1'd0))) begin
        j_i_reg_84 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        j_i_reg_84 <= j_reg_255;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_133_p2 == 1'd1))) begin
        round_reg_95 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_state7) & (grp_SubBytes_fu_118_ap_done == 1'b1))) begin
        round_reg_95 <= tmp_reg_273;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_i_cast3_cast_reg_229[2 : 0] <= i_i_cast3_cast_fu_129_p1[2 : 0];
        i_reg_237 <= i_fu_139_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_255 <= j_fu_189_p2;
        state_addr_reg_247 <= tmp_39_cast_fu_174_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_212_p2))) begin
        round_cast1_cast_reg_268[3 : 0] <= round_cast1_cast_fu_218_p1[3 : 0];
        tmp_reg_273 <= tmp_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_133_p2 == 1'd0))) begin
        tmp_i_reg_242[3 : 2] <= tmp_i_fu_149_p3[3 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address0 = sum3_i_cast_fu_200_p1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        RoundKey_address0 = grp_SubBytes_fu_118_RoundKey_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_address0 = grp_KeyExpansion_fu_106_RoundKey_address0;
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        RoundKey_ce0 = grp_SubBytes_fu_118_RoundKey_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_ce0 = grp_KeyExpansion_fu_106_RoundKey_ce0;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_ce1 = grp_KeyExpansion_fu_106_RoundKey_ce1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_we0 = grp_KeyExpansion_fu_106_RoundKey_we0;
    end else begin
        RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_we1 = grp_KeyExpansion_fu_106_RoundKey_we1;
    end else begin
        RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((grp_SubBytes_fu_118_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((grp_SubBytes_fu_118_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_SubBytes_fu_118_round = 6'd10;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        grp_SubBytes_fu_118_round = round_cast1_cast_reg_268;
    end else begin
        grp_SubBytes_fu_118_round = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = state_addr_reg_247;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        state_address0 = tmp_39_cast_fu_174_p1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        state_address0 = grp_SubBytes_fu_118_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        state_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        state_ce0 = grp_SubBytes_fu_118_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        state_ce1 = grp_SubBytes_fu_118_state_ce1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_d0 = tmp_i_46_fu_205_p2;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        state_d0 = grp_SubBytes_fu_118_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        state_we0 = grp_SubBytes_fu_118_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        state_we1 = grp_SubBytes_fu_118_state_we1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_KeyExpansion_fu_106_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_133_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (exitcond_i_fu_183_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_212_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (grp_SubBytes_fu_118_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((grp_SubBytes_fu_118_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state8))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Key_address0 = grp_KeyExpansion_fu_106_Key_address0;

assign Key_address1 = grp_KeyExpansion_fu_106_Key_address1;

assign Key_ce0 = grp_KeyExpansion_fu_106_Key_ce0;

assign Key_ce1 = grp_KeyExpansion_fu_106_Key_ce1;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign exitcond1_i_fu_133_p2 = ((i_i_reg_73 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_212_p2 = ((round_reg_95 == 4'd10) ? 1'b1 : 1'b0);

assign exitcond_i_fu_183_p2 = ((j_i_reg_84 == 3'd4) ? 1'b1 : 1'b0);

assign grp_KeyExpansion_fu_106_ap_start = ap_reg_grp_KeyExpansion_fu_106_ap_start;

assign grp_SubBytes_fu_118_ap_start = ap_reg_grp_SubBytes_fu_118_ap_start;

assign i_fu_139_p2 = (i_i_reg_73 + 3'd1);

assign i_i_cast3_cast_fu_129_p1 = i_i_reg_73;

assign j_fu_189_p2 = (j_i_reg_84 + 3'd1);

assign j_i_cast_fu_179_p1 = j_i_reg_84;

assign round_cast1_cast_fu_218_p1 = round_reg_95;

assign state_address1 = grp_SubBytes_fu_118_state_address1;

assign state_d1 = grp_SubBytes_fu_118_state_d1;

assign sum3_i_cast_fu_200_p1 = sum3_i_fu_195_p2;

assign sum3_i_fu_195_p2 = (tmp_i_reg_242 + j_i_cast_fu_179_p1);

assign tmp_34_fu_169_p2 = (i_i_cast3_cast_reg_229 + tmp_38_cast_fu_165_p1);

assign tmp_38_cast_fu_165_p1 = tmp_s_fu_157_p3;

assign tmp_38_fu_145_p1 = i_i_reg_73[1:0];

assign tmp_39_cast_fu_174_p1 = tmp_34_fu_169_p2;

assign tmp_fu_223_p2 = (round_reg_95 + 4'd1);

assign tmp_i_46_fu_205_p2 = (state_q0 ^ RoundKey_q0);

assign tmp_i_fu_149_p3 = {{tmp_38_fu_145_p1}, {2'd0}};

assign tmp_s_fu_157_p3 = {{j_i_reg_84}, {2'd0}};

always @ (posedge ap_clk) begin
    i_i_cast3_cast_reg_229[5:3] <= 3'b000;
    tmp_i_reg_242[1:0] <= 2'b00;
    round_cast1_cast_reg_268[5:4] <= 2'b00;
end

endmodule //Cipher
