// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Cipher,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7eg-ffvf1517-1l-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.284000,HLS_SYN_LAT=509,HLS_SYN_TPT=none,HLS_SYN_MEM=5,HLS_SYN_DSP=0,HLS_SYN_FF=2474,HLS_SYN_LUT=4117}" *)

module Cipher (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        state_address0,
        state_ce0,
        state_we0,
        state_d0,
        state_q0,
        state_address1,
        state_ce1,
        state_we1,
        state_d1,
        state_q1,
        Key_address0,
        Key_ce0,
        Key_q0,
        Key_address1,
        Key_ce1,
        Key_q1
);

parameter    ap_ST_fsm_state1 = 54'd1;
parameter    ap_ST_fsm_state2 = 54'd2;
parameter    ap_ST_fsm_state3 = 54'd4;
parameter    ap_ST_fsm_state4 = 54'd8;
parameter    ap_ST_fsm_state5 = 54'd16;
parameter    ap_ST_fsm_state6 = 54'd32;
parameter    ap_ST_fsm_pp0_stage0 = 54'd64;
parameter    ap_ST_fsm_pp0_stage1 = 54'd128;
parameter    ap_ST_fsm_pp0_stage2 = 54'd256;
parameter    ap_ST_fsm_pp0_stage3 = 54'd512;
parameter    ap_ST_fsm_pp0_stage4 = 54'd1024;
parameter    ap_ST_fsm_pp0_stage5 = 54'd2048;
parameter    ap_ST_fsm_pp0_stage6 = 54'd4096;
parameter    ap_ST_fsm_pp0_stage7 = 54'd8192;
parameter    ap_ST_fsm_pp0_stage8 = 54'd16384;
parameter    ap_ST_fsm_pp0_stage9 = 54'd32768;
parameter    ap_ST_fsm_pp0_stage10 = 54'd65536;
parameter    ap_ST_fsm_pp0_stage11 = 54'd131072;
parameter    ap_ST_fsm_pp0_stage12 = 54'd262144;
parameter    ap_ST_fsm_pp0_stage13 = 54'd524288;
parameter    ap_ST_fsm_pp0_stage14 = 54'd1048576;
parameter    ap_ST_fsm_pp0_stage15 = 54'd2097152;
parameter    ap_ST_fsm_pp0_stage16 = 54'd4194304;
parameter    ap_ST_fsm_pp0_stage17 = 54'd8388608;
parameter    ap_ST_fsm_pp0_stage18 = 54'd16777216;
parameter    ap_ST_fsm_pp0_stage19 = 54'd33554432;
parameter    ap_ST_fsm_pp0_stage20 = 54'd67108864;
parameter    ap_ST_fsm_pp0_stage21 = 54'd134217728;
parameter    ap_ST_fsm_pp0_stage22 = 54'd268435456;
parameter    ap_ST_fsm_pp0_stage23 = 54'd536870912;
parameter    ap_ST_fsm_state32 = 54'd1073741824;
parameter    ap_ST_fsm_state33 = 54'd2147483648;
parameter    ap_ST_fsm_state34 = 54'd4294967296;
parameter    ap_ST_fsm_state35 = 54'd8589934592;
parameter    ap_ST_fsm_state36 = 54'd17179869184;
parameter    ap_ST_fsm_state37 = 54'd34359738368;
parameter    ap_ST_fsm_state38 = 54'd68719476736;
parameter    ap_ST_fsm_state39 = 54'd137438953472;
parameter    ap_ST_fsm_state40 = 54'd274877906944;
parameter    ap_ST_fsm_state41 = 54'd549755813888;
parameter    ap_ST_fsm_state42 = 54'd1099511627776;
parameter    ap_ST_fsm_state43 = 54'd2199023255552;
parameter    ap_ST_fsm_state44 = 54'd4398046511104;
parameter    ap_ST_fsm_state45 = 54'd8796093022208;
parameter    ap_ST_fsm_state46 = 54'd17592186044416;
parameter    ap_ST_fsm_state47 = 54'd35184372088832;
parameter    ap_ST_fsm_state48 = 54'd70368744177664;
parameter    ap_ST_fsm_state49 = 54'd140737488355328;
parameter    ap_ST_fsm_state50 = 54'd281474976710656;
parameter    ap_ST_fsm_state51 = 54'd562949953421312;
parameter    ap_ST_fsm_state52 = 54'd1125899906842624;
parameter    ap_ST_fsm_state53 = 54'd2251799813685248;
parameter    ap_ST_fsm_state54 = 54'd4503599627370496;
parameter    ap_ST_fsm_state55 = 54'd9007199254740992;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] state_address0;
output   state_ce0;
output   state_we0;
output  [31:0] state_d0;
input  [31:0] state_q0;
output  [3:0] state_address1;
output   state_ce1;
output   state_we1;
output  [31:0] state_d1;
input  [31:0] state_q1;
output  [4:0] Key_address0;
output   Key_ce0;
input  [31:0] Key_q0;
output  [4:0] Key_address1;
output   Key_ce1;
input  [31:0] Key_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] state_address0;
reg state_ce0;
reg state_we0;
reg[31:0] state_d0;
reg[3:0] state_address1;
reg state_ce1;
reg state_we1;
reg[31:0] state_d1;

(* fsm_encoding = "none" *) reg   [53:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [3:0] round_reg_157;
reg   [31:0] reg_192;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
reg   [31:0] reg_196;
reg   [3:0] state_addr_reg_334;
wire    ap_CS_fsm_state3;
reg   [3:0] state_addr_16_reg_339;
reg   [3:0] state_addr_17_reg_344;
reg   [3:0] state_addr_18_reg_349;
wire   [0:0] exitcond1_i_fu_258_p2;
wire   [2:0] i_fu_264_p2;
reg   [2:0] i_reg_358;
wire   [1:0] tmp_52_fu_270_p1;
reg   [1:0] tmp_52_reg_363;
wire   [3:0] tmp_i_fu_274_p3;
reg   [3:0] tmp_i_reg_368;
wire   [0:0] exitcond_fu_317_p2;
reg   [0:0] exitcond_reg_394;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state7_pp0_stage0_iter0;
wire    ap_block_state31_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_flag00011001;
wire   [3:0] tmp_fu_328_p2;
reg   [3:0] tmp_reg_398;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_state8_pp0_stage1_iter0;
wire    ap_block_pp0_stage1_flag00011001;
wire    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state7;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_state30_pp0_stage23_iter0;
wire    ap_block_pp0_stage23_flag00011011;
wire    ap_CS_fsm_pp0_stage23;
reg   [7:0] RoundKey_address0;
reg    RoundKey_ce0;
reg    RoundKey_we0;
wire   [31:0] RoundKey_q0;
reg   [7:0] RoundKey_address1;
reg    RoundKey_ce1;
reg    RoundKey_we1;
wire   [31:0] RoundKey_q1;
wire    grp_SubBytes_fu_169_ap_start;
wire    grp_SubBytes_fu_169_ap_done;
wire    grp_SubBytes_fu_169_ap_idle;
wire    grp_SubBytes_fu_169_ap_ready;
wire   [3:0] grp_SubBytes_fu_169_state_address0;
wire    grp_SubBytes_fu_169_state_ce0;
wire    grp_SubBytes_fu_169_state_we0;
wire   [31:0] grp_SubBytes_fu_169_state_d0;
wire   [3:0] grp_SubBytes_fu_169_state_address1;
wire    grp_SubBytes_fu_169_state_ce1;
wire    grp_SubBytes_fu_169_state_we1;
wire   [31:0] grp_SubBytes_fu_169_state_d1;
reg   [5:0] grp_SubBytes_fu_169_round;
wire   [7:0] grp_SubBytes_fu_169_RoundKey_address0;
wire    grp_SubBytes_fu_169_RoundKey_ce0;
wire   [7:0] grp_SubBytes_fu_169_RoundKey_address1;
wire    grp_SubBytes_fu_169_RoundKey_ce1;
wire    grp_KeyExpansion_fu_180_ap_start;
wire    grp_KeyExpansion_fu_180_ap_done;
wire    grp_KeyExpansion_fu_180_ap_idle;
wire    grp_KeyExpansion_fu_180_ap_ready;
wire   [7:0] grp_KeyExpansion_fu_180_RoundKey_address0;
wire    grp_KeyExpansion_fu_180_RoundKey_ce0;
wire    grp_KeyExpansion_fu_180_RoundKey_we0;
wire   [31:0] grp_KeyExpansion_fu_180_RoundKey_d0;
wire   [7:0] grp_KeyExpansion_fu_180_RoundKey_address1;
wire    grp_KeyExpansion_fu_180_RoundKey_ce1;
wire    grp_KeyExpansion_fu_180_RoundKey_we1;
wire   [31:0] grp_KeyExpansion_fu_180_RoundKey_d1;
wire   [4:0] grp_KeyExpansion_fu_180_Key_address0;
wire    grp_KeyExpansion_fu_180_Key_ce0;
wire   [4:0] grp_KeyExpansion_fu_180_Key_address1;
wire    grp_KeyExpansion_fu_180_Key_ce1;
reg   [2:0] i_i_reg_146;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state6;
reg   [3:0] round_phi_fu_161_p4;
wire    ap_block_pp0_stage0_flag00000000;
reg    ap_reg_grp_SubBytes_fu_169_ap_start;
reg   [53:0] ap_NS_fsm;
wire    ap_NS_fsm_state32;
wire    ap_block_pp0_stage1_flag00000000;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_state9_pp0_stage2_iter0;
wire    ap_block_pp0_stage2_flag00011001;
wire    ap_block_pp0_stage2_flag00000000;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_state10_pp0_stage3_iter0;
wire    ap_block_pp0_stage3_flag00011001;
wire    ap_block_pp0_stage3_flag00000000;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_state11_pp0_stage4_iter0;
wire    ap_block_pp0_stage4_flag00011001;
wire    ap_block_pp0_stage4_flag00000000;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_state12_pp0_stage5_iter0;
wire    ap_block_pp0_stage5_flag00011001;
wire    ap_block_pp0_stage5_flag00000000;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_state13_pp0_stage6_iter0;
wire    ap_block_pp0_stage6_flag00011001;
wire    ap_block_pp0_stage6_flag00000000;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_state14_pp0_stage7_iter0;
wire    ap_block_pp0_stage7_flag00011001;
wire    ap_block_pp0_stage7_flag00000000;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_state15_pp0_stage8_iter0;
wire    ap_block_pp0_stage8_flag00011001;
wire    ap_block_pp0_stage8_flag00000000;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_state16_pp0_stage9_iter0;
wire    ap_block_pp0_stage9_flag00011001;
wire    ap_block_pp0_stage9_flag00000000;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_state17_pp0_stage10_iter0;
wire    ap_block_pp0_stage10_flag00011001;
wire    ap_block_pp0_stage10_flag00000000;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_state18_pp0_stage11_iter0;
wire    ap_block_pp0_stage11_flag00011001;
wire    ap_block_pp0_stage11_flag00000000;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_state19_pp0_stage12_iter0;
wire    ap_block_pp0_stage12_flag00011001;
wire    ap_block_pp0_stage12_flag00000000;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_state20_pp0_stage13_iter0;
wire    ap_block_pp0_stage13_flag00011001;
wire    ap_block_pp0_stage13_flag00000000;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_state21_pp0_stage14_iter0;
wire    ap_block_pp0_stage14_flag00011001;
wire    ap_block_pp0_stage14_flag00000000;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_state22_pp0_stage15_iter0;
wire    ap_block_pp0_stage15_flag00011001;
wire    ap_block_pp0_stage15_flag00000000;
wire    ap_CS_fsm_pp0_stage16;
wire    ap_block_state23_pp0_stage16_iter0;
wire    ap_block_pp0_stage16_flag00011001;
wire    ap_block_pp0_stage16_flag00000000;
wire    ap_CS_fsm_pp0_stage17;
wire    ap_block_state24_pp0_stage17_iter0;
wire    ap_block_pp0_stage17_flag00011001;
wire    ap_block_pp0_stage17_flag00000000;
wire    ap_CS_fsm_pp0_stage18;
wire    ap_block_state25_pp0_stage18_iter0;
wire    ap_block_pp0_stage18_flag00011001;
wire    ap_block_pp0_stage18_flag00000000;
wire    ap_CS_fsm_pp0_stage19;
wire    ap_block_state26_pp0_stage19_iter0;
wire    ap_block_pp0_stage19_flag00011001;
wire    ap_block_pp0_stage19_flag00000000;
wire    ap_CS_fsm_pp0_stage20;
wire    ap_block_state27_pp0_stage20_iter0;
wire    ap_block_pp0_stage20_flag00011001;
wire    ap_block_pp0_stage20_flag00000000;
wire    ap_CS_fsm_pp0_stage21;
wire    ap_block_state28_pp0_stage21_iter0;
wire    ap_block_pp0_stage21_flag00011001;
wire    ap_block_pp0_stage21_flag00000000;
wire    ap_CS_fsm_pp0_stage22;
wire    ap_block_state29_pp0_stage22_iter0;
wire    ap_block_pp0_stage22_flag00011001;
wire    ap_block_pp0_stage22_flag00000000;
wire    ap_block_pp0_stage23_flag00011001;
wire    ap_block_pp0_stage23_flag00000000;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state50;
wire    ap_CS_fsm_state51;
wire    ap_CS_fsm_state52;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire   [5:0] round_cast1_cast_fu_323_p1;
reg    ap_reg_grp_KeyExpansion_fu_180_ap_start;
wire   [31:0] i_i_cast2_fu_214_p1;
wire   [31:0] tmp_52_cast_fu_233_p1;
wire   [31:0] tmp_50_fu_238_p3;
wire   [31:0] tmp_54_cast_fu_253_p1;
wire   [31:0] tmp_i_cast_fu_281_p1;
wire   [31:0] sum3_i_cast_fu_292_p1;
wire   [31:0] sum3_1_i_cast_fu_302_p1;
wire   [31:0] sum3_2_i_cast_fu_312_p1;
wire   [31:0] grp_fu_200_p2;
wire   [31:0] grp_fu_207_p2;
wire   [3:0] i_i_cast2_cast_fu_223_p1;
wire   [3:0] tmp_49_fu_227_p2;
wire   [4:0] i_i_cast2_cast1_fu_219_p1;
wire   [4:0] tmp_51_fu_247_p2;
wire   [3:0] sum3_i_fu_286_p2;
wire   [3:0] sum3_1_i_fu_297_p2;
wire   [3:0] sum3_2_i_fu_307_p2;
wire    ap_block_pp0_stage1_flag00011011;
wire    ap_block_pp0_stage2_flag00011011;
wire    ap_block_pp0_stage3_flag00011011;
wire    ap_block_pp0_stage4_flag00011011;
wire    ap_block_pp0_stage5_flag00011011;
wire    ap_block_pp0_stage6_flag00011011;
wire    ap_block_pp0_stage7_flag00011011;
wire    ap_block_pp0_stage8_flag00011011;
wire    ap_block_pp0_stage9_flag00011011;
wire    ap_block_pp0_stage10_flag00011011;
wire    ap_block_pp0_stage11_flag00011011;
wire    ap_block_pp0_stage12_flag00011011;
wire    ap_block_pp0_stage13_flag00011011;
wire    ap_block_pp0_stage14_flag00011011;
wire    ap_block_pp0_stage15_flag00011011;
wire    ap_block_pp0_stage16_flag00011011;
wire    ap_block_pp0_stage17_flag00011011;
wire    ap_block_pp0_stage18_flag00011011;
wire    ap_block_pp0_stage19_flag00011011;
wire    ap_block_pp0_stage20_flag00011011;
wire    ap_block_pp0_stage21_flag00011011;
wire    ap_block_pp0_stage22_flag00011011;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 54'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_reg_grp_SubBytes_fu_169_ap_start = 1'b0;
#0 ap_reg_grp_KeyExpansion_fu_180_ap_start = 1'b0;
end

Cipher_RoundKey #(
    .DataWidth( 32 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
RoundKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RoundKey_address0),
    .ce0(RoundKey_ce0),
    .we0(RoundKey_we0),
    .d0(grp_KeyExpansion_fu_180_RoundKey_d0),
    .q0(RoundKey_q0),
    .address1(RoundKey_address1),
    .ce1(RoundKey_ce1),
    .we1(RoundKey_we1),
    .d1(grp_KeyExpansion_fu_180_RoundKey_d1),
    .q1(RoundKey_q1)
);

SubBytes grp_SubBytes_fu_169(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_SubBytes_fu_169_ap_start),
    .ap_done(grp_SubBytes_fu_169_ap_done),
    .ap_idle(grp_SubBytes_fu_169_ap_idle),
    .ap_ready(grp_SubBytes_fu_169_ap_ready),
    .state_address0(grp_SubBytes_fu_169_state_address0),
    .state_ce0(grp_SubBytes_fu_169_state_ce0),
    .state_we0(grp_SubBytes_fu_169_state_we0),
    .state_d0(grp_SubBytes_fu_169_state_d0),
    .state_q0(state_q0),
    .state_address1(grp_SubBytes_fu_169_state_address1),
    .state_ce1(grp_SubBytes_fu_169_state_ce1),
    .state_we1(grp_SubBytes_fu_169_state_we1),
    .state_d1(grp_SubBytes_fu_169_state_d1),
    .state_q1(state_q1),
    .round(grp_SubBytes_fu_169_round),
    .RoundKey_address0(grp_SubBytes_fu_169_RoundKey_address0),
    .RoundKey_ce0(grp_SubBytes_fu_169_RoundKey_ce0),
    .RoundKey_q0(RoundKey_q0),
    .RoundKey_address1(grp_SubBytes_fu_169_RoundKey_address1),
    .RoundKey_ce1(grp_SubBytes_fu_169_RoundKey_ce1),
    .RoundKey_q1(RoundKey_q1),
    .ap_ce(1'b1)
);

KeyExpansion grp_KeyExpansion_fu_180(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeyExpansion_fu_180_ap_start),
    .ap_done(grp_KeyExpansion_fu_180_ap_done),
    .ap_idle(grp_KeyExpansion_fu_180_ap_idle),
    .ap_ready(grp_KeyExpansion_fu_180_ap_ready),
    .RoundKey_address0(grp_KeyExpansion_fu_180_RoundKey_address0),
    .RoundKey_ce0(grp_KeyExpansion_fu_180_RoundKey_ce0),
    .RoundKey_we0(grp_KeyExpansion_fu_180_RoundKey_we0),
    .RoundKey_d0(grp_KeyExpansion_fu_180_RoundKey_d0),
    .RoundKey_q0(RoundKey_q0),
    .RoundKey_address1(grp_KeyExpansion_fu_180_RoundKey_address1),
    .RoundKey_ce1(grp_KeyExpansion_fu_180_RoundKey_ce1),
    .RoundKey_we1(grp_KeyExpansion_fu_180_RoundKey_we1),
    .RoundKey_d1(grp_KeyExpansion_fu_180_RoundKey_d1),
    .RoundKey_q1(RoundKey_q1),
    .Key_address0(grp_KeyExpansion_fu_180_Key_address0),
    .Key_ce0(grp_KeyExpansion_fu_180_Key_ce0),
    .Key_q0(Key_q0),
    .Key_address1(grp_KeyExpansion_fu_180_Key_address1),
    .Key_ce1(grp_KeyExpansion_fu_180_Key_ce1),
    .Key_q1(Key_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state7))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_258_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state7) & (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0)) | ((ap_block_pp0_stage23_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage23))))) begin
            ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state7 ^ 1'b1);
        end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0)) | ((ap_block_pp0_stage23_flag00011011 == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage23)))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_258_p2 == 1'd1))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_KeyExpansion_fu_180_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_reg_grp_KeyExpansion_fu_180_ap_start <= 1'b1;
        end else if ((1'b1 == grp_KeyExpansion_fu_180_ap_ready)) begin
            ap_reg_grp_KeyExpansion_fu_180_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_SubBytes_fu_169_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_fu_317_p2)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_NS_fsm_state32)))) begin
            ap_reg_grp_SubBytes_fu_169_ap_start <= 1'b1;
        end else if ((1'b1 == grp_SubBytes_fu_169_ap_ready)) begin
            ap_reg_grp_SubBytes_fu_169_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_i_reg_146 <= i_reg_358;
    end else if (((1'b1 == ap_CS_fsm_state2) & (grp_KeyExpansion_fu_180_ap_done == 1'b1))) begin
        i_i_reg_146 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_258_p2 == 1'd1))) begin
        round_reg_157 <= 4'd1;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_enable_reg_pp0_iter1))) begin
        round_reg_157 <= tmp_reg_398;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        exitcond_reg_394 <= exitcond_fu_317_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_358 <= i_fu_264_p2;
        state_addr_16_reg_339 <= tmp_52_cast_fu_233_p1;
        state_addr_17_reg_344[2 : 0] <= tmp_50_fu_238_p3[2 : 0];
        state_addr_18_reg_349 <= tmp_54_cast_fu_253_p1;
        state_addr_reg_334[2 : 0] <= i_i_cast2_fu_214_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        reg_192 <= state_q0;
        reg_196 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_258_p2 == 1'd0))) begin
        tmp_52_reg_363 <= tmp_52_fu_270_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_i_reg_368[3 : 2] <= tmp_i_fu_274_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_394))) begin
        tmp_reg_398 <= tmp_fu_328_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        RoundKey_address0 = sum3_1_i_cast_fu_302_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address0 = tmp_i_cast_fu_281_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_address0 = grp_KeyExpansion_fu_180_RoundKey_address0;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (ap_block_pp0_stage1_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00000000 == 1'b0)) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40))) begin
        RoundKey_address0 = grp_SubBytes_fu_169_RoundKey_address0;
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        RoundKey_address1 = sum3_2_i_cast_fu_312_p1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address1 = sum3_i_cast_fu_292_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_address1 = grp_KeyExpansion_fu_180_RoundKey_address1;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (ap_block_pp0_stage1_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00000000 == 1'b0)) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40))) begin
        RoundKey_address1 = grp_SubBytes_fu_169_RoundKey_address1;
    end else begin
        RoundKey_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        RoundKey_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_ce0 = grp_KeyExpansion_fu_180_RoundKey_ce0;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_394)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40))) begin
        RoundKey_ce0 = grp_SubBytes_fu_169_RoundKey_ce0;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        RoundKey_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_ce1 = grp_KeyExpansion_fu_180_RoundKey_ce1;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_394)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40))) begin
        RoundKey_ce1 = grp_SubBytes_fu_169_RoundKey_ce1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_we0 = grp_KeyExpansion_fu_180_RoundKey_we0;
    end else begin
        RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        RoundKey_we1 = grp_KeyExpansion_fu_180_RoundKey_we1;
    end else begin
        RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_317_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state7 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state7 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state55)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state32)) begin
        grp_SubBytes_fu_169_round = 6'd10;
    end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (ap_block_pp0_stage1_flag00000000 == 1'b0))) begin
        grp_SubBytes_fu_169_round = round_cast1_cast_fu_323_p1;
    end else begin
        grp_SubBytes_fu_169_round = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0))) begin
        round_phi_fu_161_p4 = tmp_reg_398;
    end else begin
        round_phi_fu_161_p4 = round_reg_157;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address0 = state_addr_reg_334;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        state_address0 = state_addr_17_reg_344;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address0 = i_i_cast2_fu_214_p1;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (ap_block_pp0_stage1_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_block_pp0_stage15_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage16) & (ap_block_pp0_stage16_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage17) & (ap_block_pp0_stage17_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_block_pp0_stage18_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage21) & (ap_block_pp0_stage21_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage22) & (ap_block_pp0_stage22_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00000000 == 1'b0)) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state55))) begin
        state_address0 = grp_SubBytes_fu_169_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        state_address1 = state_addr_16_reg_339;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6))) begin
        state_address1 = state_addr_18_reg_349;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        state_address1 = tmp_52_cast_fu_233_p1;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (ap_block_pp0_stage1_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_block_pp0_stage15_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage16) & (ap_block_pp0_stage16_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage17) & (ap_block_pp0_stage17_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_block_pp0_stage18_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage21) & (ap_block_pp0_stage21_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage22) & (ap_block_pp0_stage22_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00000000 == 1'b0)) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state55))) begin
        state_address1 = grp_SubBytes_fu_169_state_address1;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        state_ce0 = 1'b1;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_394)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_block_pp0_stage15_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage16) & (ap_block_pp0_stage16_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage17) & (ap_block_pp0_stage17_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_block_pp0_stage18_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage21) & (ap_block_pp0_stage21_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage22) & (ap_block_pp0_stage22_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state55))) begin
        state_ce0 = grp_SubBytes_fu_169_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state6))) begin
        state_ce1 = 1'b1;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_394)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_block_pp0_stage15_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage16) & (ap_block_pp0_stage16_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage17) & (ap_block_pp0_stage17_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_block_pp0_stage18_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage21) & (ap_block_pp0_stage21_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage22) & (ap_block_pp0_stage22_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state55))) begin
        state_ce1 = grp_SubBytes_fu_169_state_ce1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        state_d0 = grp_fu_200_p2;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (ap_block_pp0_stage1_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_block_pp0_stage15_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage16) & (ap_block_pp0_stage16_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage17) & (ap_block_pp0_stage17_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_block_pp0_stage18_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage21) & (ap_block_pp0_stage21_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage22) & (ap_block_pp0_stage22_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00000000 == 1'b0)) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state55))) begin
        state_d0 = grp_SubBytes_fu_169_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        state_d1 = grp_fu_207_p2;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (ap_block_pp0_stage1_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_block_pp0_stage15_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage16) & (ap_block_pp0_stage16_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage17) & (ap_block_pp0_stage17_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_block_pp0_stage18_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage21) & (ap_block_pp0_stage21_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage22) & (ap_block_pp0_stage22_flag00000000 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00000000 == 1'b0)) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state55))) begin
        state_d1 = grp_SubBytes_fu_169_state_d1;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        state_we0 = 1'b1;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_394)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_block_pp0_stage15_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage16) & (ap_block_pp0_stage16_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage17) & (ap_block_pp0_stage17_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_block_pp0_stage18_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage21) & (ap_block_pp0_stage21_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage22) & (ap_block_pp0_stage22_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state55))) begin
        state_we0 = grp_SubBytes_fu_169_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        state_we1 = 1'b1;
    end else if ((((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage1_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_394)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_enable_reg_pp0_iter1)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage2) & (ap_block_pp0_stage2_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage3) & (ap_block_pp0_stage3_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage4) & (ap_block_pp0_stage4_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_block_pp0_stage5_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage6) & (ap_block_pp0_stage6_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage7) & (ap_block_pp0_stage7_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage8) & (ap_block_pp0_stage8_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage9) & (ap_block_pp0_stage9_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage10) & (ap_block_pp0_stage10_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage11) & (ap_block_pp0_stage11_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage12) & (ap_block_pp0_stage12_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage13) & (ap_block_pp0_stage13_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage14) & (ap_block_pp0_stage14_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage15) & (ap_block_pp0_stage15_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage16) & (ap_block_pp0_stage16_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage17) & (ap_block_pp0_stage17_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage18) & (ap_block_pp0_stage18_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage19) & (ap_block_pp0_stage19_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage20) & (ap_block_pp0_stage20_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage21) & (ap_block_pp0_stage21_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage22) & (ap_block_pp0_stage22_flag00011001 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_reg_394) & (1'b1 == ap_CS_fsm_pp0_stage23) & (ap_block_pp0_stage23_flag00011001 == 1'b0)) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state55))) begin
        state_we1 = grp_SubBytes_fu_169_state_we1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (grp_KeyExpansion_fu_180_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (exitcond1_i_fu_258_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (((ap_block_pp0_stage0_flag00011011 == 1'b0) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_fu_317_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (exitcond_fu_317_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((ap_block_pp0_stage1_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((ap_block_pp0_stage2_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((ap_block_pp0_stage3_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((ap_block_pp0_stage4_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((ap_block_pp0_stage5_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((ap_block_pp0_stage6_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((ap_block_pp0_stage7_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((ap_block_pp0_stage8_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((ap_block_pp0_stage9_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((ap_block_pp0_stage10_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((ap_block_pp0_stage11_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((ap_block_pp0_stage12_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((ap_block_pp0_stage13_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((ap_block_pp0_stage14_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((ap_block_pp0_stage15_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_pp0_stage16 : begin
            if ((ap_block_pp0_stage16_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage16;
            end
        end
        ap_ST_fsm_pp0_stage17 : begin
            if ((ap_block_pp0_stage17_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage17;
            end
        end
        ap_ST_fsm_pp0_stage18 : begin
            if ((ap_block_pp0_stage18_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage18;
            end
        end
        ap_ST_fsm_pp0_stage19 : begin
            if ((ap_block_pp0_stage19_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage19;
            end
        end
        ap_ST_fsm_pp0_stage20 : begin
            if ((ap_block_pp0_stage20_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage20;
            end
        end
        ap_ST_fsm_pp0_stage21 : begin
            if ((ap_block_pp0_stage21_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage21;
            end
        end
        ap_ST_fsm_pp0_stage22 : begin
            if ((ap_block_pp0_stage22_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage22;
            end
        end
        ap_ST_fsm_pp0_stage23 : begin
            if ((ap_block_pp0_stage23_flag00011011 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage23;
            end
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            ap_NS_fsm = ap_ST_fsm_state54;
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Key_address0 = grp_KeyExpansion_fu_180_Key_address0;

assign Key_address1 = grp_KeyExpansion_fu_180_Key_address1;

assign Key_ce0 = grp_KeyExpansion_fu_180_Key_ce0;

assign Key_ce1 = grp_KeyExpansion_fu_180_Key_ce1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_pp0_stage16 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_pp0_stage17 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_pp0_stage18 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_pp0_stage19 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage20 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_pp0_stage21 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_pp0_stage22 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_pp0_stage23 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_NS_fsm_state32 = ap_NS_fsm[32'd30];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage16_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage17_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage18_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage19_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage20_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage21_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage22_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage23_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_flag00000000 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_flag00011001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_flag00011011 = ~(1'b1 == 1'b1);

assign ap_block_state10_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state13_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state16_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state22_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state23_pp0_stage16_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state24_pp0_stage17_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state25_pp0_stage18_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state26_pp0_stage19_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state27_pp0_stage20_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage21_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage22_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage23_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign exitcond1_i_fu_258_p2 = ((i_i_reg_146 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_317_p2 = ((round_phi_fu_161_p4 == 4'd10) ? 1'b1 : 1'b0);

assign grp_KeyExpansion_fu_180_ap_start = ap_reg_grp_KeyExpansion_fu_180_ap_start;

assign grp_SubBytes_fu_169_ap_start = ap_reg_grp_SubBytes_fu_169_ap_start;

assign grp_fu_200_p2 = (reg_192 ^ RoundKey_q0);

assign grp_fu_207_p2 = (reg_196 ^ RoundKey_q1);

assign i_fu_264_p2 = (i_i_reg_146 + 3'd1);

assign i_i_cast2_cast1_fu_219_p1 = i_i_reg_146;

assign i_i_cast2_cast_fu_223_p1 = i_i_reg_146;

assign i_i_cast2_fu_214_p1 = i_i_reg_146;

assign round_cast1_cast_fu_323_p1 = round_reg_157;

assign sum3_1_i_cast_fu_302_p1 = sum3_1_i_fu_297_p2;

assign sum3_1_i_fu_297_p2 = (tmp_i_reg_368 | 4'd2);

assign sum3_2_i_cast_fu_312_p1 = sum3_2_i_fu_307_p2;

assign sum3_2_i_fu_307_p2 = (tmp_i_reg_368 | 4'd3);

assign sum3_i_cast_fu_292_p1 = sum3_i_fu_286_p2;

assign sum3_i_fu_286_p2 = (tmp_i_fu_274_p3 | 4'd1);

assign tmp_49_fu_227_p2 = (i_i_cast2_cast_fu_223_p1 + 4'd4);

assign tmp_50_fu_238_p3 = {{29'd1}, {i_i_reg_146}};

assign tmp_51_fu_247_p2 = (i_i_cast2_cast1_fu_219_p1 + 5'd12);

assign tmp_52_cast_fu_233_p1 = tmp_49_fu_227_p2;

assign tmp_52_fu_270_p1 = i_i_reg_146[1:0];

assign tmp_54_cast_fu_253_p1 = tmp_51_fu_247_p2;

assign tmp_fu_328_p2 = (round_reg_157 + 4'd1);

assign tmp_i_cast_fu_281_p1 = tmp_i_fu_274_p3;

assign tmp_i_fu_274_p3 = {{tmp_52_reg_363}, {2'd0}};

always @ (posedge ap_clk) begin
    state_addr_reg_334[3] <= 1'b0;
    state_addr_17_reg_344[3] <= 1'b1;
    tmp_i_reg_368[1:0] <= 2'b00;
end

endmodule //Cipher
