-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KeyExpansion is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce0 : OUT STD_LOGIC;
    RoundKey_we0 : OUT STD_LOGIC;
    RoundKey_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    RoundKey_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    RoundKey_address1 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce1 : OUT STD_LOGIC;
    RoundKey_we1 : OUT STD_LOGIC;
    RoundKey_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    RoundKey_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    Key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    Key_ce0 : OUT STD_LOGIC;
    Key_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Key_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    Key_ce1 : OUT STD_LOGIC;
    Key_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of KeyExpansion is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv8_FC : STD_LOGIC_VECTOR (7 downto 0) := "11111100";
    constant ap_const_lv8_FD : STD_LOGIC_VECTOR (7 downto 0) := "11111101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_FE : STD_LOGIC_VECTOR (7 downto 0) := "11111110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv8_F0 : STD_LOGIC_VECTOR (7 downto 0) := "11110000";
    constant ap_const_lv8_F1 : STD_LOGIC_VECTOR (7 downto 0) := "11110001";
    constant ap_const_lv8_F2 : STD_LOGIC_VECTOR (7 downto 0) := "11110010";
    constant ap_const_lv8_F3 : STD_LOGIC_VECTOR (7 downto 0) := "11110011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_2 : STD_LOGIC_VECTOR (7 downto 0) := "00000010";
    constant ap_const_lv8_3 : STD_LOGIC_VECTOR (7 downto 0) := "00000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_ce0 : STD_LOGIC;
    signal sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rcon_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rcon_ce0 : STD_LOGIC;
    signal Rcon_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_s_fu_561_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_s_reg_897 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal exitcond1_fu_551_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_reg_921 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_lshr_f_cast_reg_929 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_fu_607_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_934 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_0_3_fu_613_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_0_3_reg_939 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal temp_1_fu_617_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_1_reg_945 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_2_fu_646_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_2_reg_965 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal temp_3_fu_650_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_3_reg_970 : STD_LOGIC_VECTOR (7 downto 0);
    signal sbox_load_reg_976 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_19_fu_708_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_19_reg_1006 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_fu_718_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_21_reg_1011 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_24_fu_772_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_24_reg_1031 : STD_LOGIC_VECTOR (31 downto 0);
    signal RoundKey_load_5_reg_1036 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_reg_540 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal sum8_cast_fu_575_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum8_1_cast_fu_586_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum8_2_cast_fu_626_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum8_3_cast_fu_636_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_assign_fu_641_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_assign_s_fu_654_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_659_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_cast_fu_668_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum1_cast_fu_678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_assign_1_fu_683_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_cast_fu_729_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum3_cast_fu_739_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal num_assign_2_fu_748_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_fu_744_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_cast_fu_763_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_cast_fu_789_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_cast_fu_809_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_27_fu_798_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum8_fu_569_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum8_1_fu_580_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_47_fu_557_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal sum8_2_fu_621_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum8_3_fu_631_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum_fu_663_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum1_fu_673_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_0_fu_687_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_0_2_fu_698_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_18_fu_704_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_2_fu_692_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_20_fu_714_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum2_fu_724_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum3_fu_734_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_22_fu_758_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_2_2_fu_752_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_23_fu_768_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_fu_784_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal temp_3_2_fu_778_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_794_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_fu_804_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);

    component KeyExpansion_sbox IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component KeyExpansion_Rcon IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    sbox_U : component KeyExpansion_sbox
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sbox_address0,
        ce0 => sbox_ce0,
        q0 => sbox_q0);

    Rcon_U : component KeyExpansion_Rcon
    generic map (
        DataWidth => 8,
        AddressRange => 255,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Rcon_address0,
        ce0 => Rcon_ce0,
        q0 => Rcon_q0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_1_reg_540_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                i_1_reg_540 <= ap_const_lv6_4;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
                i_1_reg_540 <= i_reg_934;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                RoundKey_load_5_reg_1036 <= RoundKey_q1;
                tmp_24_reg_1031 <= tmp_24_fu_772_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond1_fu_551_p2 = ap_const_lv1_0))) then
                i_reg_934 <= i_fu_607_p2;
                p_lshr_f_cast_reg_929 <= i_1_reg_540(5 downto 2);
                tmp_2_reg_921 <= tmp_2_fu_591_p2;
                    tmp_s_reg_897(7 downto 2) <= tmp_s_fu_561_p3(7 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_reg_921 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                sbox_load_reg_976 <= sbox_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                temp_0_3_reg_939 <= temp_0_3_fu_613_p1;
                temp_1_reg_945 <= temp_1_fu_617_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                temp_2_reg_965 <= temp_2_fu_646_p1;
                temp_3_reg_970 <= temp_3_fu_650_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then
                tmp_19_reg_1006 <= tmp_19_fu_708_p2;
                tmp_21_reg_1011 <= tmp_21_fu_718_p2;
            end if;
        end if;
    end process;
    tmp_s_reg_897(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state10, exitcond1_fu_551_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond1_fu_551_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;

    Key_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Key_address0 <= ap_const_lv32_E(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Key_address0 <= ap_const_lv32_C(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Key_address0 <= ap_const_lv32_A(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Key_address0 <= ap_const_lv32_8(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Key_address0 <= ap_const_lv32_6(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Key_address0 <= ap_const_lv32_4(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Key_address0 <= ap_const_lv32_2(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            Key_address0 <= ap_const_lv32_0(5 - 1 downto 0);
        else 
            Key_address0 <= "XXXXX";
        end if; 
    end process;


    Key_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Key_address1 <= ap_const_lv32_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            Key_address1 <= ap_const_lv32_D(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            Key_address1 <= ap_const_lv32_B(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            Key_address1 <= ap_const_lv32_9(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Key_address1 <= ap_const_lv32_7(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            Key_address1 <= ap_const_lv32_5(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            Key_address1 <= ap_const_lv32_3(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            Key_address1 <= ap_const_lv32_1(5 - 1 downto 0);
        else 
            Key_address1 <= "XXXXX";
        end if; 
    end process;


    Key_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            Key_ce0 <= ap_const_logic_1;
        else 
            Key_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Key_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            Key_ce1 <= ap_const_logic_1;
        else 
            Key_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Rcon_address0 <= tmp_15_fu_659_p1(8 - 1 downto 0);

    Rcon_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            Rcon_ce0 <= ap_const_logic_1;
        else 
            Rcon_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_address0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state9, sum8_cast_fu_575_p1, sum8_2_cast_fu_626_p1, sum_cast_fu_668_p1, sum2_cast_fu_729_p1, tmp_cast_fu_744_p1, tmp_25_cast_fu_789_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            RoundKey_address0 <= tmp_25_cast_fu_789_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            RoundKey_address0 <= tmp_cast_fu_744_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            RoundKey_address0 <= sum2_cast_fu_729_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            RoundKey_address0 <= sum_cast_fu_668_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            RoundKey_address0 <= sum8_2_cast_fu_626_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            RoundKey_address0 <= sum8_cast_fu_575_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            RoundKey_address0 <= ap_const_lv32_E(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            RoundKey_address0 <= ap_const_lv32_C(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            RoundKey_address0 <= ap_const_lv32_A(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RoundKey_address0 <= ap_const_lv32_8(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            RoundKey_address0 <= ap_const_lv32_6(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            RoundKey_address0 <= ap_const_lv32_4(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_address0 <= ap_const_lv32_2(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            RoundKey_address0 <= ap_const_lv32_0(8 - 1 downto 0);
        else 
            RoundKey_address0 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_address1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state9, sum8_1_cast_fu_586_p1, sum8_3_cast_fu_636_p1, sum1_cast_fu_678_p1, sum3_cast_fu_739_p1, tmp_22_cast_fu_763_p1, tmp_28_cast_fu_809_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            RoundKey_address1 <= tmp_28_cast_fu_809_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            RoundKey_address1 <= tmp_22_cast_fu_763_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            RoundKey_address1 <= sum3_cast_fu_739_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            RoundKey_address1 <= sum1_cast_fu_678_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            RoundKey_address1 <= sum8_3_cast_fu_636_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            RoundKey_address1 <= sum8_1_cast_fu_586_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            RoundKey_address1 <= ap_const_lv32_F(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            RoundKey_address1 <= ap_const_lv32_D(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            RoundKey_address1 <= ap_const_lv32_B(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            RoundKey_address1 <= ap_const_lv32_9(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            RoundKey_address1 <= ap_const_lv32_7(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            RoundKey_address1 <= ap_const_lv32_5(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_address1 <= ap_const_lv32_3(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            RoundKey_address1 <= ap_const_lv32_1(8 - 1 downto 0);
        else 
            RoundKey_address1 <= "XXXXXXXX";
        end if; 
    end process;


    RoundKey_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            RoundKey_ce0 <= ap_const_logic_1;
        else 
            RoundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            RoundKey_ce1 <= ap_const_logic_1;
        else 
            RoundKey_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_d0_assign_proc : process(Key_q0, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_19_reg_1006, ap_CS_fsm_state14, tmp_24_reg_1031, ap_CS_fsm_state15, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            RoundKey_d0 <= tmp_24_reg_1031;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            RoundKey_d0 <= tmp_19_reg_1006;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            RoundKey_d0 <= Key_q0;
        else 
            RoundKey_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    RoundKey_d1_assign_proc : process(Key_q1, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, tmp_21_reg_1011, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state9, tmp_27_fu_798_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            RoundKey_d1 <= tmp_27_fu_798_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            RoundKey_d1 <= tmp_21_reg_1011;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            RoundKey_d1 <= Key_q1;
        else 
            RoundKey_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    RoundKey_we0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            RoundKey_we0 <= ap_const_logic_1;
        else 
            RoundKey_we0 <= ap_const_logic_0;
        end if; 
    end process;


    RoundKey_we1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            RoundKey_we1 <= ap_const_logic_1;
        else 
            RoundKey_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_551_p2 <= "1" when (i_1_reg_540 = ap_const_lv6_2C) else "0";
    i_fu_607_p2 <= std_logic_vector(unsigned(ap_const_lv6_1) + unsigned(i_1_reg_540));
    num_assign_1_fu_683_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_3_reg_970),32));
    num_assign_2_fu_748_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_0_3_reg_939),32));
    num_assign_fu_641_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_1_fu_617_p1),32));
    num_assign_s_fu_654_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_2_fu_646_p1),32));

    sbox_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, num_assign_fu_641_p1, num_assign_s_fu_654_p1, num_assign_1_fu_683_p1, num_assign_2_fu_748_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            sbox_address0 <= num_assign_2_fu_748_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sbox_address0 <= num_assign_1_fu_683_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            sbox_address0 <= num_assign_s_fu_654_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            sbox_address0 <= num_assign_fu_641_p1(8 - 1 downto 0);
        else 
            sbox_address0 <= "XXXXXXXX";
        end if; 
    end process;


    sbox_ce0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            sbox_ce0 <= ap_const_logic_1;
        else 
            sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sum1_cast_fu_678_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum1_fu_673_p2),32));
    sum1_fu_673_p2 <= std_logic_vector(signed(ap_const_lv8_F1) + signed(tmp_s_reg_897));
    sum2_cast_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_724_p2),32));
    sum2_fu_724_p2 <= std_logic_vector(signed(ap_const_lv8_F2) + signed(tmp_s_reg_897));
    sum3_cast_fu_739_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_fu_734_p2),32));
    sum3_fu_734_p2 <= std_logic_vector(signed(ap_const_lv8_F3) + signed(tmp_s_reg_897));
    sum8_1_cast_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_1_fu_580_p2),32));
    sum8_1_fu_580_p2 <= std_logic_vector(signed(ap_const_lv8_FD) + signed(tmp_s_fu_561_p3));
    sum8_2_cast_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_2_fu_621_p2),32));
    sum8_2_fu_621_p2 <= std_logic_vector(signed(ap_const_lv8_FE) + signed(tmp_s_reg_897));
    sum8_3_cast_fu_636_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_3_fu_631_p2),32));
    sum8_3_fu_631_p2 <= std_logic_vector(signed(ap_const_lv8_FF) + signed(tmp_s_reg_897));
    sum8_cast_fu_575_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum8_fu_569_p2),32));
    sum8_fu_569_p2 <= std_logic_vector(signed(ap_const_lv8_FC) + signed(tmp_s_fu_561_p3));
    sum_cast_fu_668_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_663_p2),32));
    sum_fu_663_p2 <= std_logic_vector(signed(ap_const_lv8_F0) + signed(tmp_s_reg_897));
    temp_0_2_fu_698_p3 <= 
        temp_0_fu_687_p2 when (tmp_2_reg_921(0) = '1') else 
        temp_0_3_reg_939;
    temp_0_3_fu_613_p1 <= RoundKey_q0(8 - 1 downto 0);
    temp_0_fu_687_p2 <= (Rcon_q0 xor sbox_load_reg_976);
    temp_1_2_fu_692_p3 <= 
        sbox_q0 when (tmp_2_reg_921(0) = '1') else 
        temp_1_reg_945;
    temp_1_fu_617_p1 <= RoundKey_q1(8 - 1 downto 0);
    temp_2_2_fu_752_p3 <= 
        sbox_q0 when (tmp_2_reg_921(0) = '1') else 
        temp_2_reg_965;
    temp_2_fu_646_p1 <= RoundKey_q0(8 - 1 downto 0);
    temp_3_2_fu_778_p3 <= 
        sbox_q0 when (tmp_2_reg_921(0) = '1') else 
        temp_3_reg_970;
    temp_3_fu_650_p1 <= RoundKey_q1(8 - 1 downto 0);
    tmp_15_fu_659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_lshr_f_cast_reg_929),32));
    tmp_18_fu_704_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_0_2_fu_698_p3),32));
    tmp_19_fu_708_p2 <= (RoundKey_q0 xor tmp_18_fu_704_p1);
    tmp_20_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_1_2_fu_692_p3),32));
    tmp_21_fu_718_p2 <= (RoundKey_q1 xor tmp_20_fu_714_p1);
    tmp_22_cast_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_22_fu_758_p2),32));
    tmp_22_fu_758_p2 <= (tmp_s_reg_897 or ap_const_lv8_1);
    tmp_23_fu_768_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_2_2_fu_752_p3),32));
    tmp_24_fu_772_p2 <= (RoundKey_q0 xor tmp_23_fu_768_p1);
    tmp_25_cast_fu_789_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_25_fu_784_p2),32));
    tmp_25_fu_784_p2 <= (tmp_s_reg_897 or ap_const_lv8_2);
    tmp_26_fu_794_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_3_2_fu_778_p3),32));
    tmp_27_fu_798_p2 <= (RoundKey_load_5_reg_1036 xor tmp_26_fu_794_p1);
    tmp_28_cast_fu_809_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_28_fu_804_p2),32));
    tmp_28_fu_804_p2 <= (tmp_s_reg_897 or ap_const_lv8_3);
    tmp_2_fu_591_p2 <= "1" when (tmp_47_fu_557_p1 = ap_const_lv2_0) else "0";
    tmp_47_fu_557_p1 <= i_1_reg_540(2 - 1 downto 0);
    tmp_cast_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_897),32));
    tmp_s_fu_561_p3 <= (i_1_reg_540 & ap_const_lv2_0);
end behav;
