// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "KeyExpansion.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic KeyExpansion::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic KeyExpansion::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> KeyExpansion::ap_ST_fsm_state1 = "1";
const sc_lv<16> KeyExpansion::ap_ST_fsm_state2 = "10";
const sc_lv<16> KeyExpansion::ap_ST_fsm_state3 = "100";
const sc_lv<16> KeyExpansion::ap_ST_fsm_state4 = "1000";
const sc_lv<16> KeyExpansion::ap_ST_fsm_state5 = "10000";
const sc_lv<16> KeyExpansion::ap_ST_fsm_state6 = "100000";
const sc_lv<16> KeyExpansion::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> KeyExpansion::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> KeyExpansion::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> KeyExpansion::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> KeyExpansion::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> KeyExpansion::ap_ST_fsm_state12 = "100000000000";
const sc_lv<16> KeyExpansion::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<16> KeyExpansion::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<16> KeyExpansion::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<16> KeyExpansion::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> KeyExpansion::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> KeyExpansion::ap_const_lv32_1 = "1";
const sc_lv<32> KeyExpansion::ap_const_lv32_2 = "10";
const sc_lv<32> KeyExpansion::ap_const_lv32_3 = "11";
const sc_lv<32> KeyExpansion::ap_const_lv32_4 = "100";
const sc_lv<32> KeyExpansion::ap_const_lv32_5 = "101";
const sc_lv<32> KeyExpansion::ap_const_lv32_6 = "110";
const sc_lv<32> KeyExpansion::ap_const_lv32_7 = "111";
const sc_lv<32> KeyExpansion::ap_const_lv32_9 = "1001";
const sc_lv<1> KeyExpansion::ap_const_lv1_0 = "0";
const sc_lv<32> KeyExpansion::ap_const_lv32_A = "1010";
const sc_lv<1> KeyExpansion::ap_const_lv1_1 = "1";
const sc_lv<32> KeyExpansion::ap_const_lv32_B = "1011";
const sc_lv<32> KeyExpansion::ap_const_lv32_C = "1100";
const sc_lv<32> KeyExpansion::ap_const_lv32_D = "1101";
const sc_lv<32> KeyExpansion::ap_const_lv32_E = "1110";
const sc_lv<6> KeyExpansion::ap_const_lv6_4 = "100";
const sc_lv<32> KeyExpansion::ap_const_lv32_8 = "1000";
const sc_lv<32> KeyExpansion::ap_const_lv32_F = "1111";
const sc_lv<6> KeyExpansion::ap_const_lv6_2C = "101100";
const sc_lv<2> KeyExpansion::ap_const_lv2_0 = "00";
const sc_lv<8> KeyExpansion::ap_const_lv8_FC = "11111100";
const sc_lv<8> KeyExpansion::ap_const_lv8_FD = "11111101";
const sc_lv<6> KeyExpansion::ap_const_lv6_1 = "1";
const sc_lv<8> KeyExpansion::ap_const_lv8_FE = "11111110";
const sc_lv<8> KeyExpansion::ap_const_lv8_FF = "11111111";
const sc_lv<8> KeyExpansion::ap_const_lv8_F0 = "11110000";
const sc_lv<8> KeyExpansion::ap_const_lv8_F1 = "11110001";
const sc_lv<8> KeyExpansion::ap_const_lv8_F2 = "11110010";
const sc_lv<8> KeyExpansion::ap_const_lv8_F3 = "11110011";
const sc_lv<8> KeyExpansion::ap_const_lv8_1 = "1";
const sc_lv<8> KeyExpansion::ap_const_lv8_2 = "10";
const sc_lv<8> KeyExpansion::ap_const_lv8_3 = "11";
const bool KeyExpansion::ap_const_boolean_1 = true;

KeyExpansion::KeyExpansion(sc_module_name name) : sc_module(name), mVcdFile(0) {
    sbox_U = new KeyExpansion_sbox("sbox_U");
    sbox_U->clk(ap_clk);
    sbox_U->reset(ap_rst);
    sbox_U->address0(sbox_address0);
    sbox_U->ce0(sbox_ce0);
    sbox_U->q0(sbox_q0);
    Rcon_U = new KeyExpansion_Rcon("Rcon_U");
    Rcon_U->clk(ap_clk);
    Rcon_U->reset(ap_rst);
    Rcon_U->address0(Rcon_address0);
    Rcon_U->ce0(Rcon_ce0);
    Rcon_U->q0(Rcon_q0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Key_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_Key_address1);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_Key_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_Key_ce1);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_Rcon_address0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_15_fu_659_p1 );

    SC_METHOD(thread_Rcon_ce0);
    sensitive << ( ap_CS_fsm_state12 );

    SC_METHOD(thread_RoundKey_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( sum8_cast_fu_575_p1 );
    sensitive << ( sum8_2_cast_fu_626_p1 );
    sensitive << ( sum_cast_fu_668_p1 );
    sensitive << ( sum2_cast_fu_729_p1 );
    sensitive << ( tmp_cast_fu_744_p1 );
    sensitive << ( tmp_25_cast_fu_789_p1 );

    SC_METHOD(thread_RoundKey_address1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( sum8_1_cast_fu_586_p1 );
    sensitive << ( sum8_3_cast_fu_636_p1 );
    sensitive << ( sum1_cast_fu_678_p1 );
    sensitive << ( sum3_cast_fu_739_p1 );
    sensitive << ( tmp_22_cast_fu_763_p1 );
    sensitive << ( tmp_28_cast_fu_809_p1 );

    SC_METHOD(thread_RoundKey_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_RoundKey_ce1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_RoundKey_d0);
    sensitive << ( Key_q0 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_19_reg_1006 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( tmp_24_reg_1031 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_RoundKey_d1);
    sensitive << ( Key_q1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( tmp_21_reg_1011 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( tmp_27_fu_798_p2 );

    SC_METHOD(thread_RoundKey_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_RoundKey_we1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_exitcond1_fu_551_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( i_1_reg_540 );

    SC_METHOD(thread_i_fu_607_p2);
    sensitive << ( i_1_reg_540 );

    SC_METHOD(thread_num_assign_1_fu_683_p1);
    sensitive << ( temp_3_reg_970 );

    SC_METHOD(thread_num_assign_2_fu_748_p1);
    sensitive << ( temp_0_3_reg_939 );

    SC_METHOD(thread_num_assign_fu_641_p1);
    sensitive << ( temp_1_fu_617_p1 );

    SC_METHOD(thread_num_assign_s_fu_654_p1);
    sensitive << ( temp_2_fu_646_p1 );

    SC_METHOD(thread_sbox_address0);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( num_assign_fu_641_p1 );
    sensitive << ( num_assign_s_fu_654_p1 );
    sensitive << ( num_assign_1_fu_683_p1 );
    sensitive << ( num_assign_2_fu_748_p1 );

    SC_METHOD(thread_sbox_ce0);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_sum1_cast_fu_678_p1);
    sensitive << ( sum1_fu_673_p2 );

    SC_METHOD(thread_sum1_fu_673_p2);
    sensitive << ( tmp_s_reg_897 );

    SC_METHOD(thread_sum2_cast_fu_729_p1);
    sensitive << ( sum2_fu_724_p2 );

    SC_METHOD(thread_sum2_fu_724_p2);
    sensitive << ( tmp_s_reg_897 );

    SC_METHOD(thread_sum3_cast_fu_739_p1);
    sensitive << ( sum3_fu_734_p2 );

    SC_METHOD(thread_sum3_fu_734_p2);
    sensitive << ( tmp_s_reg_897 );

    SC_METHOD(thread_sum8_1_cast_fu_586_p1);
    sensitive << ( sum8_1_fu_580_p2 );

    SC_METHOD(thread_sum8_1_fu_580_p2);
    sensitive << ( tmp_s_fu_561_p3 );

    SC_METHOD(thread_sum8_2_cast_fu_626_p1);
    sensitive << ( sum8_2_fu_621_p2 );

    SC_METHOD(thread_sum8_2_fu_621_p2);
    sensitive << ( tmp_s_reg_897 );

    SC_METHOD(thread_sum8_3_cast_fu_636_p1);
    sensitive << ( sum8_3_fu_631_p2 );

    SC_METHOD(thread_sum8_3_fu_631_p2);
    sensitive << ( tmp_s_reg_897 );

    SC_METHOD(thread_sum8_cast_fu_575_p1);
    sensitive << ( sum8_fu_569_p2 );

    SC_METHOD(thread_sum8_fu_569_p2);
    sensitive << ( tmp_s_fu_561_p3 );

    SC_METHOD(thread_sum_cast_fu_668_p1);
    sensitive << ( sum_fu_663_p2 );

    SC_METHOD(thread_sum_fu_663_p2);
    sensitive << ( tmp_s_reg_897 );

    SC_METHOD(thread_temp_0_2_fu_698_p3);
    sensitive << ( tmp_2_reg_921 );
    sensitive << ( temp_0_3_reg_939 );
    sensitive << ( temp_0_fu_687_p2 );

    SC_METHOD(thread_temp_0_3_fu_613_p1);
    sensitive << ( RoundKey_q0 );

    SC_METHOD(thread_temp_0_fu_687_p2);
    sensitive << ( Rcon_q0 );
    sensitive << ( sbox_load_reg_976 );

    SC_METHOD(thread_temp_1_2_fu_692_p3);
    sensitive << ( sbox_q0 );
    sensitive << ( tmp_2_reg_921 );
    sensitive << ( temp_1_reg_945 );

    SC_METHOD(thread_temp_1_fu_617_p1);
    sensitive << ( RoundKey_q1 );

    SC_METHOD(thread_temp_2_2_fu_752_p3);
    sensitive << ( sbox_q0 );
    sensitive << ( tmp_2_reg_921 );
    sensitive << ( temp_2_reg_965 );

    SC_METHOD(thread_temp_2_fu_646_p1);
    sensitive << ( RoundKey_q0 );

    SC_METHOD(thread_temp_3_2_fu_778_p3);
    sensitive << ( sbox_q0 );
    sensitive << ( tmp_2_reg_921 );
    sensitive << ( temp_3_reg_970 );

    SC_METHOD(thread_temp_3_fu_650_p1);
    sensitive << ( RoundKey_q1 );

    SC_METHOD(thread_tmp_15_fu_659_p1);
    sensitive << ( p_lshr_f_cast_reg_929 );

    SC_METHOD(thread_tmp_18_fu_704_p1);
    sensitive << ( temp_0_2_fu_698_p3 );

    SC_METHOD(thread_tmp_19_fu_708_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( tmp_18_fu_704_p1 );

    SC_METHOD(thread_tmp_20_fu_714_p1);
    sensitive << ( temp_1_2_fu_692_p3 );

    SC_METHOD(thread_tmp_21_fu_718_p2);
    sensitive << ( RoundKey_q1 );
    sensitive << ( tmp_20_fu_714_p1 );

    SC_METHOD(thread_tmp_22_cast_fu_763_p1);
    sensitive << ( tmp_22_fu_758_p2 );

    SC_METHOD(thread_tmp_22_fu_758_p2);
    sensitive << ( tmp_s_reg_897 );

    SC_METHOD(thread_tmp_23_fu_768_p1);
    sensitive << ( temp_2_2_fu_752_p3 );

    SC_METHOD(thread_tmp_24_fu_772_p2);
    sensitive << ( RoundKey_q0 );
    sensitive << ( tmp_23_fu_768_p1 );

    SC_METHOD(thread_tmp_25_cast_fu_789_p1);
    sensitive << ( tmp_25_fu_784_p2 );

    SC_METHOD(thread_tmp_25_fu_784_p2);
    sensitive << ( tmp_s_reg_897 );

    SC_METHOD(thread_tmp_26_fu_794_p1);
    sensitive << ( temp_3_2_fu_778_p3 );

    SC_METHOD(thread_tmp_27_fu_798_p2);
    sensitive << ( RoundKey_load_5_reg_1036 );
    sensitive << ( tmp_26_fu_794_p1 );

    SC_METHOD(thread_tmp_28_cast_fu_809_p1);
    sensitive << ( tmp_28_fu_804_p2 );

    SC_METHOD(thread_tmp_28_fu_804_p2);
    sensitive << ( tmp_s_reg_897 );

    SC_METHOD(thread_tmp_2_fu_591_p2);
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond1_fu_551_p2 );
    sensitive << ( tmp_47_fu_557_p1 );

    SC_METHOD(thread_tmp_47_fu_557_p1);
    sensitive << ( i_1_reg_540 );

    SC_METHOD(thread_tmp_cast_fu_744_p1);
    sensitive << ( tmp_s_reg_897 );

    SC_METHOD(thread_tmp_s_fu_561_p3);
    sensitive << ( i_1_reg_540 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond1_fu_551_p2 );

    ap_CS_fsm = "0000000000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "KeyExpansion_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, RoundKey_address0, "(port)RoundKey_address0");
    sc_trace(mVcdFile, RoundKey_ce0, "(port)RoundKey_ce0");
    sc_trace(mVcdFile, RoundKey_we0, "(port)RoundKey_we0");
    sc_trace(mVcdFile, RoundKey_d0, "(port)RoundKey_d0");
    sc_trace(mVcdFile, RoundKey_q0, "(port)RoundKey_q0");
    sc_trace(mVcdFile, RoundKey_address1, "(port)RoundKey_address1");
    sc_trace(mVcdFile, RoundKey_ce1, "(port)RoundKey_ce1");
    sc_trace(mVcdFile, RoundKey_we1, "(port)RoundKey_we1");
    sc_trace(mVcdFile, RoundKey_d1, "(port)RoundKey_d1");
    sc_trace(mVcdFile, RoundKey_q1, "(port)RoundKey_q1");
    sc_trace(mVcdFile, Key_address0, "(port)Key_address0");
    sc_trace(mVcdFile, Key_ce0, "(port)Key_ce0");
    sc_trace(mVcdFile, Key_q0, "(port)Key_q0");
    sc_trace(mVcdFile, Key_address1, "(port)Key_address1");
    sc_trace(mVcdFile, Key_ce1, "(port)Key_ce1");
    sc_trace(mVcdFile, Key_q1, "(port)Key_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, sbox_address0, "sbox_address0");
    sc_trace(mVcdFile, sbox_ce0, "sbox_ce0");
    sc_trace(mVcdFile, sbox_q0, "sbox_q0");
    sc_trace(mVcdFile, Rcon_address0, "Rcon_address0");
    sc_trace(mVcdFile, Rcon_ce0, "Rcon_ce0");
    sc_trace(mVcdFile, Rcon_q0, "Rcon_q0");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, tmp_s_fu_561_p3, "tmp_s_fu_561_p3");
    sc_trace(mVcdFile, tmp_s_reg_897, "tmp_s_reg_897");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, exitcond1_fu_551_p2, "exitcond1_fu_551_p2");
    sc_trace(mVcdFile, tmp_2_fu_591_p2, "tmp_2_fu_591_p2");
    sc_trace(mVcdFile, tmp_2_reg_921, "tmp_2_reg_921");
    sc_trace(mVcdFile, p_lshr_f_cast_reg_929, "p_lshr_f_cast_reg_929");
    sc_trace(mVcdFile, i_fu_607_p2, "i_fu_607_p2");
    sc_trace(mVcdFile, i_reg_934, "i_reg_934");
    sc_trace(mVcdFile, temp_0_3_fu_613_p1, "temp_0_3_fu_613_p1");
    sc_trace(mVcdFile, temp_0_3_reg_939, "temp_0_3_reg_939");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, temp_1_fu_617_p1, "temp_1_fu_617_p1");
    sc_trace(mVcdFile, temp_1_reg_945, "temp_1_reg_945");
    sc_trace(mVcdFile, temp_2_fu_646_p1, "temp_2_fu_646_p1");
    sc_trace(mVcdFile, temp_2_reg_965, "temp_2_reg_965");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, temp_3_fu_650_p1, "temp_3_fu_650_p1");
    sc_trace(mVcdFile, temp_3_reg_970, "temp_3_reg_970");
    sc_trace(mVcdFile, sbox_load_reg_976, "sbox_load_reg_976");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, tmp_19_fu_708_p2, "tmp_19_fu_708_p2");
    sc_trace(mVcdFile, tmp_19_reg_1006, "tmp_19_reg_1006");
    sc_trace(mVcdFile, tmp_21_fu_718_p2, "tmp_21_fu_718_p2");
    sc_trace(mVcdFile, tmp_21_reg_1011, "tmp_21_reg_1011");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, tmp_24_fu_772_p2, "tmp_24_fu_772_p2");
    sc_trace(mVcdFile, tmp_24_reg_1031, "tmp_24_reg_1031");
    sc_trace(mVcdFile, RoundKey_load_5_reg_1036, "RoundKey_load_5_reg_1036");
    sc_trace(mVcdFile, i_1_reg_540, "i_1_reg_540");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, sum8_cast_fu_575_p1, "sum8_cast_fu_575_p1");
    sc_trace(mVcdFile, sum8_1_cast_fu_586_p1, "sum8_1_cast_fu_586_p1");
    sc_trace(mVcdFile, sum8_2_cast_fu_626_p1, "sum8_2_cast_fu_626_p1");
    sc_trace(mVcdFile, sum8_3_cast_fu_636_p1, "sum8_3_cast_fu_636_p1");
    sc_trace(mVcdFile, num_assign_fu_641_p1, "num_assign_fu_641_p1");
    sc_trace(mVcdFile, num_assign_s_fu_654_p1, "num_assign_s_fu_654_p1");
    sc_trace(mVcdFile, tmp_15_fu_659_p1, "tmp_15_fu_659_p1");
    sc_trace(mVcdFile, sum_cast_fu_668_p1, "sum_cast_fu_668_p1");
    sc_trace(mVcdFile, sum1_cast_fu_678_p1, "sum1_cast_fu_678_p1");
    sc_trace(mVcdFile, num_assign_1_fu_683_p1, "num_assign_1_fu_683_p1");
    sc_trace(mVcdFile, sum2_cast_fu_729_p1, "sum2_cast_fu_729_p1");
    sc_trace(mVcdFile, sum3_cast_fu_739_p1, "sum3_cast_fu_739_p1");
    sc_trace(mVcdFile, num_assign_2_fu_748_p1, "num_assign_2_fu_748_p1");
    sc_trace(mVcdFile, tmp_cast_fu_744_p1, "tmp_cast_fu_744_p1");
    sc_trace(mVcdFile, tmp_22_cast_fu_763_p1, "tmp_22_cast_fu_763_p1");
    sc_trace(mVcdFile, tmp_25_cast_fu_789_p1, "tmp_25_cast_fu_789_p1");
    sc_trace(mVcdFile, tmp_28_cast_fu_809_p1, "tmp_28_cast_fu_809_p1");
    sc_trace(mVcdFile, tmp_27_fu_798_p2, "tmp_27_fu_798_p2");
    sc_trace(mVcdFile, sum8_fu_569_p2, "sum8_fu_569_p2");
    sc_trace(mVcdFile, sum8_1_fu_580_p2, "sum8_1_fu_580_p2");
    sc_trace(mVcdFile, tmp_47_fu_557_p1, "tmp_47_fu_557_p1");
    sc_trace(mVcdFile, sum8_2_fu_621_p2, "sum8_2_fu_621_p2");
    sc_trace(mVcdFile, sum8_3_fu_631_p2, "sum8_3_fu_631_p2");
    sc_trace(mVcdFile, sum_fu_663_p2, "sum_fu_663_p2");
    sc_trace(mVcdFile, sum1_fu_673_p2, "sum1_fu_673_p2");
    sc_trace(mVcdFile, temp_0_fu_687_p2, "temp_0_fu_687_p2");
    sc_trace(mVcdFile, temp_0_2_fu_698_p3, "temp_0_2_fu_698_p3");
    sc_trace(mVcdFile, tmp_18_fu_704_p1, "tmp_18_fu_704_p1");
    sc_trace(mVcdFile, temp_1_2_fu_692_p3, "temp_1_2_fu_692_p3");
    sc_trace(mVcdFile, tmp_20_fu_714_p1, "tmp_20_fu_714_p1");
    sc_trace(mVcdFile, sum2_fu_724_p2, "sum2_fu_724_p2");
    sc_trace(mVcdFile, sum3_fu_734_p2, "sum3_fu_734_p2");
    sc_trace(mVcdFile, tmp_22_fu_758_p2, "tmp_22_fu_758_p2");
    sc_trace(mVcdFile, temp_2_2_fu_752_p3, "temp_2_2_fu_752_p3");
    sc_trace(mVcdFile, tmp_23_fu_768_p1, "tmp_23_fu_768_p1");
    sc_trace(mVcdFile, tmp_25_fu_784_p2, "tmp_25_fu_784_p2");
    sc_trace(mVcdFile, temp_3_2_fu_778_p3, "temp_3_2_fu_778_p3");
    sc_trace(mVcdFile, tmp_26_fu_794_p1, "tmp_26_fu_794_p1");
    sc_trace(mVcdFile, tmp_28_fu_804_p2, "tmp_28_fu_804_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

KeyExpansion::~KeyExpansion() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete sbox_U;
    delete Rcon_U;
}

void KeyExpansion::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        i_1_reg_540 = ap_const_lv6_4;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        i_1_reg_540 = i_reg_934.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        RoundKey_load_5_reg_1036 = RoundKey_q1.read();
        tmp_24_reg_1031 = tmp_24_fu_772_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(exitcond1_fu_551_p2.read(), ap_const_lv1_0))) {
        i_reg_934 = i_fu_607_p2.read();
        p_lshr_f_cast_reg_929 = i_1_reg_540.read().range(5, 2);
        tmp_2_reg_921 = tmp_2_fu_591_p2.read();
        tmp_s_reg_897 = tmp_s_fu_561_p3.read();
    }
    if ((esl_seteq<1,1,1>(tmp_2_reg_921.read(), ap_const_lv1_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()))) {
        sbox_load_reg_976 = sbox_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        temp_0_3_reg_939 = temp_0_3_fu_613_p1.read();
        temp_1_reg_945 = temp_1_fu_617_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        temp_2_reg_965 = temp_2_fu_646_p1.read();
        temp_3_reg_970 = temp_3_fu_650_p1.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        tmp_19_reg_1006 = tmp_19_fu_708_p2.read();
        tmp_21_reg_1011 = tmp_21_fu_718_p2.read();
    }
}

void KeyExpansion::thread_Key_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        Key_address0 =  (sc_lv<5>) (ap_const_lv32_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        Key_address0 =  (sc_lv<5>) (ap_const_lv32_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        Key_address0 =  (sc_lv<5>) (ap_const_lv32_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        Key_address0 =  (sc_lv<5>) (ap_const_lv32_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        Key_address0 =  (sc_lv<5>) (ap_const_lv32_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Key_address0 =  (sc_lv<5>) (ap_const_lv32_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Key_address0 =  (sc_lv<5>) (ap_const_lv32_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        Key_address0 =  (sc_lv<5>) (ap_const_lv32_0);
    } else {
        Key_address0 = "XXXXX";
    }
}

void KeyExpansion::thread_Key_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        Key_address1 =  (sc_lv<5>) (ap_const_lv32_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        Key_address1 =  (sc_lv<5>) (ap_const_lv32_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        Key_address1 =  (sc_lv<5>) (ap_const_lv32_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        Key_address1 =  (sc_lv<5>) (ap_const_lv32_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        Key_address1 =  (sc_lv<5>) (ap_const_lv32_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        Key_address1 =  (sc_lv<5>) (ap_const_lv32_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        Key_address1 =  (sc_lv<5>) (ap_const_lv32_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) {
        Key_address1 =  (sc_lv<5>) (ap_const_lv32_1);
    } else {
        Key_address1 = "XXXXX";
    }
}

void KeyExpansion::thread_Key_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        Key_ce0 = ap_const_logic_1;
    } else {
        Key_ce0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_Key_ce1() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
          esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1)) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()))) {
        Key_ce1 = ap_const_logic_1;
    } else {
        Key_ce1 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_Rcon_address0() {
    Rcon_address0 =  (sc_lv<8>) (tmp_15_fu_659_p1.read());
}

void KeyExpansion::thread_Rcon_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        Rcon_ce0 = ap_const_logic_1;
    } else {
        Rcon_ce0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_RoundKey_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        RoundKey_address0 =  (sc_lv<8>) (tmp_25_cast_fu_789_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        RoundKey_address0 =  (sc_lv<8>) (tmp_cast_fu_744_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        RoundKey_address0 =  (sc_lv<8>) (sum2_cast_fu_729_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        RoundKey_address0 =  (sc_lv<8>) (sum_cast_fu_668_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        RoundKey_address0 =  (sc_lv<8>) (sum8_2_cast_fu_626_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        RoundKey_address0 =  (sc_lv<8>) (sum8_cast_fu_575_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        RoundKey_address0 =  (sc_lv<8>) (ap_const_lv32_E);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        RoundKey_address0 =  (sc_lv<8>) (ap_const_lv32_C);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        RoundKey_address0 =  (sc_lv<8>) (ap_const_lv32_A);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        RoundKey_address0 =  (sc_lv<8>) (ap_const_lv32_8);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_address0 =  (sc_lv<8>) (ap_const_lv32_6);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RoundKey_address0 =  (sc_lv<8>) (ap_const_lv32_4);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_address0 =  (sc_lv<8>) (ap_const_lv32_2);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_address0 =  (sc_lv<8>) (ap_const_lv32_0);
    } else {
        RoundKey_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_RoundKey_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        RoundKey_address1 =  (sc_lv<8>) (tmp_28_cast_fu_809_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        RoundKey_address1 =  (sc_lv<8>) (tmp_22_cast_fu_763_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        RoundKey_address1 =  (sc_lv<8>) (sum3_cast_fu_739_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        RoundKey_address1 =  (sc_lv<8>) (sum1_cast_fu_678_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        RoundKey_address1 =  (sc_lv<8>) (sum8_3_cast_fu_636_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        RoundKey_address1 =  (sc_lv<8>) (sum8_1_cast_fu_586_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        RoundKey_address1 =  (sc_lv<8>) (ap_const_lv32_F);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        RoundKey_address1 =  (sc_lv<8>) (ap_const_lv32_D);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        RoundKey_address1 =  (sc_lv<8>) (ap_const_lv32_B);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        RoundKey_address1 =  (sc_lv<8>) (ap_const_lv32_9);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        RoundKey_address1 =  (sc_lv<8>) (ap_const_lv32_7);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        RoundKey_address1 =  (sc_lv<8>) (ap_const_lv32_5);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        RoundKey_address1 =  (sc_lv<8>) (ap_const_lv32_3);
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        RoundKey_address1 =  (sc_lv<8>) (ap_const_lv32_1);
    } else {
        RoundKey_address1 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_RoundKey_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        RoundKey_ce0 = ap_const_logic_1;
    } else {
        RoundKey_ce0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_RoundKey_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        RoundKey_ce1 = ap_const_logic_1;
    } else {
        RoundKey_ce1 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_RoundKey_d0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        RoundKey_d0 = tmp_24_reg_1031.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        RoundKey_d0 = tmp_19_reg_1006.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        RoundKey_d0 = Key_q0.read();
    } else {
        RoundKey_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void KeyExpansion::thread_RoundKey_d1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        RoundKey_d1 = tmp_27_fu_798_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        RoundKey_d1 = tmp_21_reg_1011.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        RoundKey_d1 = Key_q1.read();
    } else {
        RoundKey_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void KeyExpansion::thread_RoundKey_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        RoundKey_we0 = ap_const_logic_1;
    } else {
        RoundKey_we0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_RoundKey_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        RoundKey_we1 = ap_const_logic_1;
    } else {
        RoundKey_we1 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void KeyExpansion::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void KeyExpansion::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void KeyExpansion::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void KeyExpansion::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void KeyExpansion::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void KeyExpansion::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void KeyExpansion::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void KeyExpansion::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void KeyExpansion::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void KeyExpansion::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void KeyExpansion::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void KeyExpansion::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void KeyExpansion::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void KeyExpansion::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void KeyExpansion::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void KeyExpansion::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void KeyExpansion::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void KeyExpansion::thread_ap_ready() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void KeyExpansion::thread_exitcond1_fu_551_p2() {
    exitcond1_fu_551_p2 = (!i_1_reg_540.read().is_01() || !ap_const_lv6_2C.is_01())? sc_lv<1>(): sc_lv<1>(i_1_reg_540.read() == ap_const_lv6_2C);
}

void KeyExpansion::thread_i_fu_607_p2() {
    i_fu_607_p2 = (!ap_const_lv6_1.is_01() || !i_1_reg_540.read().is_01())? sc_lv<6>(): (sc_biguint<6>(ap_const_lv6_1) + sc_biguint<6>(i_1_reg_540.read()));
}

void KeyExpansion::thread_num_assign_1_fu_683_p1() {
    num_assign_1_fu_683_p1 = esl_zext<32,8>(temp_3_reg_970.read());
}

void KeyExpansion::thread_num_assign_2_fu_748_p1() {
    num_assign_2_fu_748_p1 = esl_zext<32,8>(temp_0_3_reg_939.read());
}

void KeyExpansion::thread_num_assign_fu_641_p1() {
    num_assign_fu_641_p1 = esl_zext<32,8>(temp_1_fu_617_p1.read());
}

void KeyExpansion::thread_num_assign_s_fu_654_p1() {
    num_assign_s_fu_654_p1 = esl_zext<32,8>(temp_2_fu_646_p1.read());
}

void KeyExpansion::thread_sbox_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read())) {
        sbox_address0 =  (sc_lv<8>) (num_assign_2_fu_748_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        sbox_address0 =  (sc_lv<8>) (num_assign_1_fu_683_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        sbox_address0 =  (sc_lv<8>) (num_assign_s_fu_654_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        sbox_address0 =  (sc_lv<8>) (num_assign_fu_641_p1.read());
    } else {
        sbox_address0 =  (sc_lv<8>) ("XXXXXXXX");
    }
}

void KeyExpansion::thread_sbox_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()))) {
        sbox_ce0 = ap_const_logic_1;
    } else {
        sbox_ce0 = ap_const_logic_0;
    }
}

void KeyExpansion::thread_sum1_cast_fu_678_p1() {
    sum1_cast_fu_678_p1 = esl_zext<32,8>(sum1_fu_673_p2.read());
}

void KeyExpansion::thread_sum1_fu_673_p2() {
    sum1_fu_673_p2 = (!ap_const_lv8_F1.is_01() || !tmp_s_reg_897.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_F1) + sc_biguint<8>(tmp_s_reg_897.read()));
}

void KeyExpansion::thread_sum2_cast_fu_729_p1() {
    sum2_cast_fu_729_p1 = esl_zext<32,8>(sum2_fu_724_p2.read());
}

void KeyExpansion::thread_sum2_fu_724_p2() {
    sum2_fu_724_p2 = (!ap_const_lv8_F2.is_01() || !tmp_s_reg_897.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_F2) + sc_biguint<8>(tmp_s_reg_897.read()));
}

void KeyExpansion::thread_sum3_cast_fu_739_p1() {
    sum3_cast_fu_739_p1 = esl_zext<32,8>(sum3_fu_734_p2.read());
}

void KeyExpansion::thread_sum3_fu_734_p2() {
    sum3_fu_734_p2 = (!ap_const_lv8_F3.is_01() || !tmp_s_reg_897.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_F3) + sc_biguint<8>(tmp_s_reg_897.read()));
}

void KeyExpansion::thread_sum8_1_cast_fu_586_p1() {
    sum8_1_cast_fu_586_p1 = esl_zext<32,8>(sum8_1_fu_580_p2.read());
}

void KeyExpansion::thread_sum8_1_fu_580_p2() {
    sum8_1_fu_580_p2 = (!ap_const_lv8_FD.is_01() || !tmp_s_fu_561_p3.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FD) + sc_biguint<8>(tmp_s_fu_561_p3.read()));
}

void KeyExpansion::thread_sum8_2_cast_fu_626_p1() {
    sum8_2_cast_fu_626_p1 = esl_zext<32,8>(sum8_2_fu_621_p2.read());
}

void KeyExpansion::thread_sum8_2_fu_621_p2() {
    sum8_2_fu_621_p2 = (!ap_const_lv8_FE.is_01() || !tmp_s_reg_897.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FE) + sc_biguint<8>(tmp_s_reg_897.read()));
}

void KeyExpansion::thread_sum8_3_cast_fu_636_p1() {
    sum8_3_cast_fu_636_p1 = esl_zext<32,8>(sum8_3_fu_631_p2.read());
}

void KeyExpansion::thread_sum8_3_fu_631_p2() {
    sum8_3_fu_631_p2 = (!ap_const_lv8_FF.is_01() || !tmp_s_reg_897.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FF) + sc_biguint<8>(tmp_s_reg_897.read()));
}

void KeyExpansion::thread_sum8_cast_fu_575_p1() {
    sum8_cast_fu_575_p1 = esl_zext<32,8>(sum8_fu_569_p2.read());
}

void KeyExpansion::thread_sum8_fu_569_p2() {
    sum8_fu_569_p2 = (!ap_const_lv8_FC.is_01() || !tmp_s_fu_561_p3.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_FC) + sc_biguint<8>(tmp_s_fu_561_p3.read()));
}

void KeyExpansion::thread_sum_cast_fu_668_p1() {
    sum_cast_fu_668_p1 = esl_zext<32,8>(sum_fu_663_p2.read());
}

void KeyExpansion::thread_sum_fu_663_p2() {
    sum_fu_663_p2 = (!ap_const_lv8_F0.is_01() || !tmp_s_reg_897.read().is_01())? sc_lv<8>(): (sc_bigint<8>(ap_const_lv8_F0) + sc_biguint<8>(tmp_s_reg_897.read()));
}

void KeyExpansion::thread_temp_0_2_fu_698_p3() {
    temp_0_2_fu_698_p3 = (!tmp_2_reg_921.read()[0].is_01())? sc_lv<8>(): ((tmp_2_reg_921.read()[0].to_bool())? temp_0_fu_687_p2.read(): temp_0_3_reg_939.read());
}

void KeyExpansion::thread_temp_0_3_fu_613_p1() {
    temp_0_3_fu_613_p1 = RoundKey_q0.read().range(8-1, 0);
}

void KeyExpansion::thread_temp_0_fu_687_p2() {
    temp_0_fu_687_p2 = (Rcon_q0.read() ^ sbox_load_reg_976.read());
}

void KeyExpansion::thread_temp_1_2_fu_692_p3() {
    temp_1_2_fu_692_p3 = (!tmp_2_reg_921.read()[0].is_01())? sc_lv<8>(): ((tmp_2_reg_921.read()[0].to_bool())? sbox_q0.read(): temp_1_reg_945.read());
}

void KeyExpansion::thread_temp_1_fu_617_p1() {
    temp_1_fu_617_p1 = RoundKey_q1.read().range(8-1, 0);
}

void KeyExpansion::thread_temp_2_2_fu_752_p3() {
    temp_2_2_fu_752_p3 = (!tmp_2_reg_921.read()[0].is_01())? sc_lv<8>(): ((tmp_2_reg_921.read()[0].to_bool())? sbox_q0.read(): temp_2_reg_965.read());
}

void KeyExpansion::thread_temp_2_fu_646_p1() {
    temp_2_fu_646_p1 = RoundKey_q0.read().range(8-1, 0);
}

void KeyExpansion::thread_temp_3_2_fu_778_p3() {
    temp_3_2_fu_778_p3 = (!tmp_2_reg_921.read()[0].is_01())? sc_lv<8>(): ((tmp_2_reg_921.read()[0].to_bool())? sbox_q0.read(): temp_3_reg_970.read());
}

void KeyExpansion::thread_temp_3_fu_650_p1() {
    temp_3_fu_650_p1 = RoundKey_q1.read().range(8-1, 0);
}

void KeyExpansion::thread_tmp_15_fu_659_p1() {
    tmp_15_fu_659_p1 = esl_zext<32,4>(p_lshr_f_cast_reg_929.read());
}

void KeyExpansion::thread_tmp_18_fu_704_p1() {
    tmp_18_fu_704_p1 = esl_zext<32,8>(temp_0_2_fu_698_p3.read());
}

void KeyExpansion::thread_tmp_19_fu_708_p2() {
    tmp_19_fu_708_p2 = (RoundKey_q0.read() ^ tmp_18_fu_704_p1.read());
}

void KeyExpansion::thread_tmp_20_fu_714_p1() {
    tmp_20_fu_714_p1 = esl_zext<32,8>(temp_1_2_fu_692_p3.read());
}

void KeyExpansion::thread_tmp_21_fu_718_p2() {
    tmp_21_fu_718_p2 = (RoundKey_q1.read() ^ tmp_20_fu_714_p1.read());
}

void KeyExpansion::thread_tmp_22_cast_fu_763_p1() {
    tmp_22_cast_fu_763_p1 = esl_zext<32,8>(tmp_22_fu_758_p2.read());
}

void KeyExpansion::thread_tmp_22_fu_758_p2() {
    tmp_22_fu_758_p2 = (tmp_s_reg_897.read() | ap_const_lv8_1);
}

void KeyExpansion::thread_tmp_23_fu_768_p1() {
    tmp_23_fu_768_p1 = esl_zext<32,8>(temp_2_2_fu_752_p3.read());
}

void KeyExpansion::thread_tmp_24_fu_772_p2() {
    tmp_24_fu_772_p2 = (RoundKey_q0.read() ^ tmp_23_fu_768_p1.read());
}

void KeyExpansion::thread_tmp_25_cast_fu_789_p1() {
    tmp_25_cast_fu_789_p1 = esl_zext<32,8>(tmp_25_fu_784_p2.read());
}

void KeyExpansion::thread_tmp_25_fu_784_p2() {
    tmp_25_fu_784_p2 = (tmp_s_reg_897.read() | ap_const_lv8_2);
}

void KeyExpansion::thread_tmp_26_fu_794_p1() {
    tmp_26_fu_794_p1 = esl_zext<32,8>(temp_3_2_fu_778_p3.read());
}

void KeyExpansion::thread_tmp_27_fu_798_p2() {
    tmp_27_fu_798_p2 = (RoundKey_load_5_reg_1036.read() ^ tmp_26_fu_794_p1.read());
}

void KeyExpansion::thread_tmp_28_cast_fu_809_p1() {
    tmp_28_cast_fu_809_p1 = esl_zext<32,8>(tmp_28_fu_804_p2.read());
}

void KeyExpansion::thread_tmp_28_fu_804_p2() {
    tmp_28_fu_804_p2 = (tmp_s_reg_897.read() | ap_const_lv8_3);
}

void KeyExpansion::thread_tmp_2_fu_591_p2() {
    tmp_2_fu_591_p2 = (!tmp_47_fu_557_p1.read().is_01() || !ap_const_lv2_0.is_01())? sc_lv<1>(): sc_lv<1>(tmp_47_fu_557_p1.read() == ap_const_lv2_0);
}

void KeyExpansion::thread_tmp_47_fu_557_p1() {
    tmp_47_fu_557_p1 = i_1_reg_540.read().range(2-1, 0);
}

void KeyExpansion::thread_tmp_cast_fu_744_p1() {
    tmp_cast_fu_744_p1 = esl_zext<32,8>(tmp_s_reg_897.read());
}

void KeyExpansion::thread_tmp_s_fu_561_p3() {
    tmp_s_fu_561_p3 = esl_concat<6,2>(i_1_reg_540.read(), ap_const_lv2_0);
}

void KeyExpansion::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(exitcond1_fu_551_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state11;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
            break;
    }
}

}

