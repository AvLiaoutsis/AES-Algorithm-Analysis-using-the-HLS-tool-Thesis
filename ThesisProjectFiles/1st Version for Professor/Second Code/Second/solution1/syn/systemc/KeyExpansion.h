// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _KeyExpansion_HH_
#define _KeyExpansion_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "KeyExpansion_sbox.h"
#include "KeyExpansion_Rcon.h"

namespace ap_rtl {

struct KeyExpansion : public sc_module {
    // Port declarations 22
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<8> > RoundKey_address0;
    sc_out< sc_logic > RoundKey_ce0;
    sc_out< sc_logic > RoundKey_we0;
    sc_out< sc_lv<32> > RoundKey_d0;
    sc_in< sc_lv<32> > RoundKey_q0;
    sc_out< sc_lv<8> > RoundKey_address1;
    sc_out< sc_logic > RoundKey_ce1;
    sc_out< sc_logic > RoundKey_we1;
    sc_out< sc_lv<32> > RoundKey_d1;
    sc_in< sc_lv<32> > RoundKey_q1;
    sc_out< sc_lv<5> > Key_address0;
    sc_out< sc_logic > Key_ce0;
    sc_in< sc_lv<32> > Key_q0;
    sc_out< sc_lv<5> > Key_address1;
    sc_out< sc_logic > Key_ce1;
    sc_in< sc_lv<32> > Key_q1;


    // Module declarations
    KeyExpansion(sc_module_name name);
    SC_HAS_PROCESS(KeyExpansion);

    ~KeyExpansion();

    sc_trace_file* mVcdFile;

    KeyExpansion_sbox* sbox_U;
    KeyExpansion_Rcon* Rcon_U;
    sc_signal< sc_lv<16> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<8> > sbox_address0;
    sc_signal< sc_logic > sbox_ce0;
    sc_signal< sc_lv<8> > sbox_q0;
    sc_signal< sc_lv<8> > Rcon_address0;
    sc_signal< sc_logic > Rcon_ce0;
    sc_signal< sc_lv<8> > Rcon_q0;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<8> > tmp_s_fu_561_p3;
    sc_signal< sc_lv<8> > tmp_s_reg_897;
    sc_signal< sc_logic > ap_CS_fsm_state10;
    sc_signal< sc_lv<1> > exitcond1_fu_551_p2;
    sc_signal< sc_lv<1> > tmp_2_fu_591_p2;
    sc_signal< sc_lv<1> > tmp_2_reg_921;
    sc_signal< sc_lv<4> > p_lshr_f_cast_reg_929;
    sc_signal< sc_lv<6> > i_fu_607_p2;
    sc_signal< sc_lv<6> > i_reg_934;
    sc_signal< sc_lv<8> > temp_0_3_fu_613_p1;
    sc_signal< sc_lv<8> > temp_0_3_reg_939;
    sc_signal< sc_logic > ap_CS_fsm_state11;
    sc_signal< sc_lv<8> > temp_1_fu_617_p1;
    sc_signal< sc_lv<8> > temp_1_reg_945;
    sc_signal< sc_lv<8> > temp_2_fu_646_p1;
    sc_signal< sc_lv<8> > temp_2_reg_965;
    sc_signal< sc_logic > ap_CS_fsm_state12;
    sc_signal< sc_lv<8> > temp_3_fu_650_p1;
    sc_signal< sc_lv<8> > temp_3_reg_970;
    sc_signal< sc_lv<8> > sbox_load_reg_976;
    sc_signal< sc_logic > ap_CS_fsm_state13;
    sc_signal< sc_lv<32> > tmp_19_fu_708_p2;
    sc_signal< sc_lv<32> > tmp_19_reg_1006;
    sc_signal< sc_lv<32> > tmp_21_fu_718_p2;
    sc_signal< sc_lv<32> > tmp_21_reg_1011;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<32> > tmp_24_fu_772_p2;
    sc_signal< sc_lv<32> > tmp_24_reg_1031;
    sc_signal< sc_lv<32> > RoundKey_load_5_reg_1036;
    sc_signal< sc_lv<6> > i_1_reg_540;
    sc_signal< sc_logic > ap_CS_fsm_state15;
    sc_signal< sc_logic > ap_CS_fsm_state9;
    sc_signal< sc_lv<32> > sum8_cast_fu_575_p1;
    sc_signal< sc_lv<32> > sum8_1_cast_fu_586_p1;
    sc_signal< sc_lv<32> > sum8_2_cast_fu_626_p1;
    sc_signal< sc_lv<32> > sum8_3_cast_fu_636_p1;
    sc_signal< sc_lv<32> > num_assign_fu_641_p1;
    sc_signal< sc_lv<32> > num_assign_s_fu_654_p1;
    sc_signal< sc_lv<32> > tmp_15_fu_659_p1;
    sc_signal< sc_lv<32> > sum_cast_fu_668_p1;
    sc_signal< sc_lv<32> > sum1_cast_fu_678_p1;
    sc_signal< sc_lv<32> > num_assign_1_fu_683_p1;
    sc_signal< sc_lv<32> > sum2_cast_fu_729_p1;
    sc_signal< sc_lv<32> > sum3_cast_fu_739_p1;
    sc_signal< sc_lv<32> > num_assign_2_fu_748_p1;
    sc_signal< sc_lv<32> > tmp_cast_fu_744_p1;
    sc_signal< sc_lv<32> > tmp_22_cast_fu_763_p1;
    sc_signal< sc_lv<32> > tmp_25_cast_fu_789_p1;
    sc_signal< sc_lv<32> > tmp_28_cast_fu_809_p1;
    sc_signal< sc_lv<32> > tmp_27_fu_798_p2;
    sc_signal< sc_lv<8> > sum8_fu_569_p2;
    sc_signal< sc_lv<8> > sum8_1_fu_580_p2;
    sc_signal< sc_lv<2> > tmp_47_fu_557_p1;
    sc_signal< sc_lv<8> > sum8_2_fu_621_p2;
    sc_signal< sc_lv<8> > sum8_3_fu_631_p2;
    sc_signal< sc_lv<8> > sum_fu_663_p2;
    sc_signal< sc_lv<8> > sum1_fu_673_p2;
    sc_signal< sc_lv<8> > temp_0_fu_687_p2;
    sc_signal< sc_lv<8> > temp_0_2_fu_698_p3;
    sc_signal< sc_lv<32> > tmp_18_fu_704_p1;
    sc_signal< sc_lv<8> > temp_1_2_fu_692_p3;
    sc_signal< sc_lv<32> > tmp_20_fu_714_p1;
    sc_signal< sc_lv<8> > sum2_fu_724_p2;
    sc_signal< sc_lv<8> > sum3_fu_734_p2;
    sc_signal< sc_lv<8> > tmp_22_fu_758_p2;
    sc_signal< sc_lv<8> > temp_2_2_fu_752_p3;
    sc_signal< sc_lv<32> > tmp_23_fu_768_p1;
    sc_signal< sc_lv<8> > tmp_25_fu_784_p2;
    sc_signal< sc_lv<8> > temp_3_2_fu_778_p3;
    sc_signal< sc_lv<32> > tmp_26_fu_794_p1;
    sc_signal< sc_lv<8> > tmp_28_fu_804_p2;
    sc_signal< sc_logic > ap_CS_fsm_state16;
    sc_signal< sc_lv<16> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<16> ap_ST_fsm_state1;
    static const sc_lv<16> ap_ST_fsm_state2;
    static const sc_lv<16> ap_ST_fsm_state3;
    static const sc_lv<16> ap_ST_fsm_state4;
    static const sc_lv<16> ap_ST_fsm_state5;
    static const sc_lv<16> ap_ST_fsm_state6;
    static const sc_lv<16> ap_ST_fsm_state7;
    static const sc_lv<16> ap_ST_fsm_state8;
    static const sc_lv<16> ap_ST_fsm_state9;
    static const sc_lv<16> ap_ST_fsm_state10;
    static const sc_lv<16> ap_ST_fsm_state11;
    static const sc_lv<16> ap_ST_fsm_state12;
    static const sc_lv<16> ap_ST_fsm_state13;
    static const sc_lv<16> ap_ST_fsm_state14;
    static const sc_lv<16> ap_ST_fsm_state15;
    static const sc_lv<16> ap_ST_fsm_state16;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<32> ap_const_lv32_9;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_A;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_B;
    static const sc_lv<32> ap_const_lv32_C;
    static const sc_lv<32> ap_const_lv32_D;
    static const sc_lv<32> ap_const_lv32_E;
    static const sc_lv<6> ap_const_lv6_4;
    static const sc_lv<32> ap_const_lv32_8;
    static const sc_lv<32> ap_const_lv32_F;
    static const sc_lv<6> ap_const_lv6_2C;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<8> ap_const_lv8_FC;
    static const sc_lv<8> ap_const_lv8_FD;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<8> ap_const_lv8_FE;
    static const sc_lv<8> ap_const_lv8_FF;
    static const sc_lv<8> ap_const_lv8_F0;
    static const sc_lv<8> ap_const_lv8_F1;
    static const sc_lv<8> ap_const_lv8_F2;
    static const sc_lv<8> ap_const_lv8_F3;
    static const sc_lv<8> ap_const_lv8_1;
    static const sc_lv<8> ap_const_lv8_2;
    static const sc_lv<8> ap_const_lv8_3;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_Key_address0();
    void thread_Key_address1();
    void thread_Key_ce0();
    void thread_Key_ce1();
    void thread_Rcon_address0();
    void thread_Rcon_ce0();
    void thread_RoundKey_address0();
    void thread_RoundKey_address1();
    void thread_RoundKey_ce0();
    void thread_RoundKey_ce1();
    void thread_RoundKey_d0();
    void thread_RoundKey_d1();
    void thread_RoundKey_we0();
    void thread_RoundKey_we1();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state10();
    void thread_ap_CS_fsm_state11();
    void thread_ap_CS_fsm_state12();
    void thread_ap_CS_fsm_state13();
    void thread_ap_CS_fsm_state14();
    void thread_ap_CS_fsm_state15();
    void thread_ap_CS_fsm_state16();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_CS_fsm_state9();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond1_fu_551_p2();
    void thread_i_fu_607_p2();
    void thread_num_assign_1_fu_683_p1();
    void thread_num_assign_2_fu_748_p1();
    void thread_num_assign_fu_641_p1();
    void thread_num_assign_s_fu_654_p1();
    void thread_sbox_address0();
    void thread_sbox_ce0();
    void thread_sum1_cast_fu_678_p1();
    void thread_sum1_fu_673_p2();
    void thread_sum2_cast_fu_729_p1();
    void thread_sum2_fu_724_p2();
    void thread_sum3_cast_fu_739_p1();
    void thread_sum3_fu_734_p2();
    void thread_sum8_1_cast_fu_586_p1();
    void thread_sum8_1_fu_580_p2();
    void thread_sum8_2_cast_fu_626_p1();
    void thread_sum8_2_fu_621_p2();
    void thread_sum8_3_cast_fu_636_p1();
    void thread_sum8_3_fu_631_p2();
    void thread_sum8_cast_fu_575_p1();
    void thread_sum8_fu_569_p2();
    void thread_sum_cast_fu_668_p1();
    void thread_sum_fu_663_p2();
    void thread_temp_0_2_fu_698_p3();
    void thread_temp_0_3_fu_613_p1();
    void thread_temp_0_fu_687_p2();
    void thread_temp_1_2_fu_692_p3();
    void thread_temp_1_fu_617_p1();
    void thread_temp_2_2_fu_752_p3();
    void thread_temp_2_fu_646_p1();
    void thread_temp_3_2_fu_778_p3();
    void thread_temp_3_fu_650_p1();
    void thread_tmp_15_fu_659_p1();
    void thread_tmp_18_fu_704_p1();
    void thread_tmp_19_fu_708_p2();
    void thread_tmp_20_fu_714_p1();
    void thread_tmp_21_fu_718_p2();
    void thread_tmp_22_cast_fu_763_p1();
    void thread_tmp_22_fu_758_p2();
    void thread_tmp_23_fu_768_p1();
    void thread_tmp_24_fu_772_p2();
    void thread_tmp_25_cast_fu_789_p1();
    void thread_tmp_25_fu_784_p2();
    void thread_tmp_26_fu_794_p1();
    void thread_tmp_27_fu_798_p2();
    void thread_tmp_28_cast_fu_809_p1();
    void thread_tmp_28_fu_804_p2();
    void thread_tmp_2_fu_591_p2();
    void thread_tmp_47_fu_557_p1();
    void thread_tmp_cast_fu_744_p1();
    void thread_tmp_s_fu_561_p3();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
