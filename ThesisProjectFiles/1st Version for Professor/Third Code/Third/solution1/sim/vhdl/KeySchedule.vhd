-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity KeySchedule is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    word_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce0 : OUT STD_LOGIC;
    word_we0 : OUT STD_LOGIC;
    word_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    word_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    word_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
    word_ce1 : OUT STD_LOGIC;
    word_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of KeySchedule is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv6_2C : STD_LOGIC_VECTOR (5 downto 0) := "101100";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv8_78 : STD_LOGIC_VECTOR (7 downto 0) := "01111000";
    constant ap_const_lv9_F0 : STD_LOGIC_VECTOR (8 downto 0) := "011110000";
    constant ap_const_lv9_168 : STD_LOGIC_VECTOR (8 downto 0) := "101101000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_3C : STD_LOGIC_VECTOR (5 downto 0) := "111100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal Sbox_address0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sbox_ce0 : STD_LOGIC;
    signal Sbox_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sbox_address1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Sbox_ce1 : STD_LOGIC;
    signal Sbox_q1 : STD_LOGIC_VECTOR (7 downto 0);
    signal Rcon0_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal Rcon0_ce0 : STD_LOGIC;
    signal Rcon0_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal j_4_fu_361_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_4_reg_986 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_371_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_reg_991 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond3_fu_355_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal word_addr_reg_996 : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_fu_452_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_1004 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond2_fu_446_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_cast2_cast_fu_468_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal j_1_cast2_cast_reg_1014 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_s_fu_482_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1022 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal word_addr_5_reg_1032 : STD_LOGIC_VECTOR (8 downto 0);
    signal word_addr_6_reg_1037 : STD_LOGIC_VECTOR (8 downto 0);
    signal word_addr_7_reg_1043 : STD_LOGIC_VECTOR (8 downto 0);
    signal temp_0_1_reg_1048 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal temp_1_1_reg_1053 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal Sbox_load_reg_1078 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal temp_1_reg_1088 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_52_cast_cast_fu_891_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_52_cast_cast_reg_1103 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal word_addr_9_reg_1113 : STD_LOGIC_VECTOR (8 downto 0);
    signal i_3_fu_947_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_1121 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_13_fu_957_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_13_reg_1126 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_941_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_971_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_reg_209 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_221 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_1_reg_232 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_2_cast_fu_875_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_22_reg_244 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_1_cast_fu_871_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_12_reg_254 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_0_1_cast_fu_866_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_02_reg_264 : STD_LOGIC_VECTOR (31 downto 0);
    signal Sbox_load_3_cast_fu_880_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_3_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_2_reg_284 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_53_fu_437_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_cast_fu_463_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_58_cast_fu_513_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_59_cast_fu_524_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_60_cast_fu_535_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_50_cast_fu_494_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_68_cast_fu_610_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_76_cast_fu_685_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_34_fu_706_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_84_cast_fu_781_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_92_cast_fu_856_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_96_cast_fu_926_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_97_cast_fu_936_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_977_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_303_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_309_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_fu_333_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_339_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_46_fu_367_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_45_fu_379_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_47_fu_391_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl_cast_fu_387_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl5_cast_fu_399_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_48_fu_403_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_49_fu_409_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_51_fu_419_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_fu_413_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_52_fu_429_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal i_cast_fu_442_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_fu_458_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_54_fu_478_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_33_fu_488_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_50_cast_cast_fu_503_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_55_fu_507_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_50_cast_cast1_fu_499_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_56_fu_518_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_57_fu_529_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal tmp_60_fu_544_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_61_fu_548_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_59_fu_540_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_295_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_62_fu_556_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_63_fu_562_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_319_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_65_fu_578_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_66_fu_588_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_67_cast_fu_596_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_64_fu_570_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_67_fu_604_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_70_fu_619_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_71_fu_623_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_69_fu_615_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_325_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_72_fu_631_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_73_fu_637_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_349_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_75_fu_653_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_77_fu_663_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_75_cast_fu_671_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_74_fu_645_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_76_fu_679_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_lshr_f_cast_fu_690_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal addconv_fu_700_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_80_fu_715_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_81_fu_719_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_79_fu_711_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_82_fu_727_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_83_fu_733_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_86_fu_749_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_87_fu_759_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_83_cast_fu_767_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_85_fu_741_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_84_fu_775_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_90_fu_790_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_91_fu_794_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_89_fu_786_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_98_fu_802_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_99_fu_808_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_101_fu_824_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_102_fu_834_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_91_cast_fu_842_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_100_fu_816_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_92_fu_850_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal temp_0_fu_861_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_35_fu_885_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_94_fu_903_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_93_fu_895_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl2_cast_fu_911_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_95_fu_915_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_96_fu_921_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_97_fu_931_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_13_fu_957_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component aes_main_mux_42_3bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        din5_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component KeySchedule_Sbox IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0);
        address1 : IN STD_LOGIC_VECTOR (7 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component KeySchedule_Rcon0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (4 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;



begin
    Sbox_U : component KeySchedule_Sbox
    generic map (
        DataWidth => 8,
        AddressRange => 256,
        AddressWidth => 8)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Sbox_address0,
        ce0 => Sbox_ce0,
        q0 => Sbox_q0,
        address1 => Sbox_address1,
        ce1 => Sbox_ce1,
        q1 => Sbox_q1);

    Rcon0_U : component KeySchedule_Rcon0
    generic map (
        DataWidth => 8,
        AddressRange => 30,
        AddressWidth => 5)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Rcon0_address0,
        ce0 => Rcon0_ce0,
        q0 => Rcon0_q0);

    aes_main_mux_42_3bkb_U0 : component aes_main_mux_42_3bkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 32,
        din5_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din1 => temp_02_reg_264,
        din2 => temp_12_reg_254,
        din3 => temp_22_reg_244,
        din4 => temp_3_reg_274,
        din5 => tmp_13_fu_957_p5,
        dout => tmp_13_fu_957_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_2_reg_284_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_2_reg_284 <= i_3_reg_1121;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_2_reg_284 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_reg_221_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_355_p2 = ap_const_lv1_0))) then 
                i_reg_221 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                i_reg_221 <= i_1_reg_1004;
            end if; 
        end if;
    end process;

    j_1_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_355_p2 = ap_const_lv1_1))) then 
                j_1_reg_232 <= ap_const_lv6_4;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_941_p2 = ap_const_lv1_1))) then 
                j_1_reg_232 <= j_5_fu_971_p2;
            end if; 
        end if;
    end process;

    j_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_446_p2 = ap_const_lv1_1))) then 
                j_reg_209 <= j_4_reg_986;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_reg_209 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    temp_02_reg_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                temp_02_reg_264 <= temp_0_1_reg_1048;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_s_reg_1022 = ap_const_lv1_1))) then 
                temp_02_reg_264 <= temp_0_1_cast_fu_866_p1;
            end if; 
        end if;
    end process;

    temp_12_reg_254_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                temp_12_reg_254 <= temp_1_1_reg_1053;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_s_reg_1022 = ap_const_lv1_1))) then 
                temp_12_reg_254 <= temp_1_cast_fu_871_p1;
            end if; 
        end if;
    end process;

    temp_22_reg_244_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                temp_22_reg_244 <= word_q1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_s_reg_1022 = ap_const_lv1_1))) then 
                temp_22_reg_244 <= temp_2_cast_fu_875_p1;
            end if; 
        end if;
    end process;

    temp_3_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                temp_3_reg_274 <= word_q0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (tmp_s_reg_1022 = ap_const_lv1_1))) then 
                temp_3_reg_274 <= Sbox_load_3_cast_fu_880_p1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                Sbox_load_reg_1078 <= Sbox_q0;
                temp_1_reg_1088 <= Sbox_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_1004 <= i_1_fu_452_p2;
                word_addr_reg_996 <= tmp_53_fu_437_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                i_3_reg_1121 <= i_3_fu_947_p2;
                word_addr_9_reg_1113 <= tmp_97_cast_fu_936_p1(9 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                    j_1_cast2_cast_reg_1014(5 downto 0) <= j_1_cast2_cast_fu_468_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                j_4_reg_986 <= j_4_fu_361_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                temp_0_1_reg_1048 <= word_q0;
                temp_1_1_reg_1053 <= word_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and (ap_const_lv1_0 = exitcond_fu_941_p2))) then
                tmp_13_reg_1126 <= tmp_13_fu_957_p6;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                    tmp_52_cast_cast_reg_1103(5 downto 0) <= tmp_52_cast_cast_fu_891_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_355_p2 = ap_const_lv1_0))) then
                    tmp_reg_991(3 downto 2) <= tmp_fu_371_p3(3 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_472_p2))) then
                tmp_s_reg_1022 <= tmp_s_fu_482_p2;
                word_addr_5_reg_1032 <= tmp_59_cast_fu_524_p1(9 - 1 downto 0);
                word_addr_6_reg_1037 <= tmp_60_cast_fu_535_p1(9 - 1 downto 0);
                    word_addr_7_reg_1043(5 downto 0) <= tmp_50_cast_fu_494_p1(9 - 1 downto 0)(5 downto 0);
            end if;
        end if;
    end process;
    tmp_reg_991(1 downto 0) <= "00";
    j_1_cast2_cast_reg_1014(9 downto 6) <= "0000";
    word_addr_7_reg_1043(8 downto 6) <= "000";
    tmp_52_cast_cast_reg_1103(9 downto 6) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond3_fu_355_p2, ap_CS_fsm_state3, exitcond2_fu_446_p2, ap_CS_fsm_state5, tmp_s_fu_482_p2, exitcond1_fu_472_p2, ap_CS_fsm_state11, exitcond_fu_941_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond3_fu_355_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_446_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_472_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_472_p2) and (tmp_s_fu_482_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (exitcond_fu_941_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
    Rcon0_address0 <= tmp_34_fu_706_p1(5 - 1 downto 0);

    Rcon0_ce0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Rcon0_ce0 <= ap_const_logic_1;
        else 
            Rcon0_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Sbox_address0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, tmp_68_cast_fu_610_p1, tmp_84_cast_fu_781_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Sbox_address0 <= tmp_84_cast_fu_781_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Sbox_address0 <= tmp_68_cast_fu_610_p1(8 - 1 downto 0);
        else 
            Sbox_address0 <= "XXXXXXXX";
        end if; 
    end process;


    Sbox_address1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, tmp_76_cast_fu_685_p1, tmp_92_cast_fu_856_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            Sbox_address1 <= tmp_92_cast_fu_856_p1(8 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            Sbox_address1 <= tmp_76_cast_fu_685_p1(8 - 1 downto 0);
        else 
            Sbox_address1 <= "XXXXXXXX";
        end if; 
    end process;


    Sbox_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            Sbox_ce0 <= ap_const_logic_1;
        else 
            Sbox_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Sbox_ce1_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            Sbox_ce1 <= ap_const_logic_1;
        else 
            Sbox_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    Sbox_load_3_cast_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sbox_q1),32));
    addconv_fu_700_p2 <= std_logic_vector(signed(ap_const_lv4_F) + signed(p_lshr_f_cast_fu_690_p4));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5, exitcond1_fu_472_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_472_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5, exitcond1_fu_472_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond1_fu_472_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_472_p2 <= "1" when (j_1_reg_232 = ap_const_lv6_2C) else "0";
    exitcond2_fu_446_p2 <= "1" when (i_reg_221 = ap_const_lv3_4) else "0";
    exitcond3_fu_355_p2 <= "1" when (j_reg_209 = ap_const_lv3_4) else "0";
    exitcond_fu_941_p2 <= "1" when (i_2_reg_284 = ap_const_lv3_4) else "0";
    grp_fu_295_p3 <= word_q0(31 downto 31);
    grp_fu_303_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(word_q0));
    grp_fu_309_p4 <= grp_fu_303_p2(9 downto 4);
    grp_fu_319_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(grp_fu_309_p4));
    grp_fu_325_p3 <= word_q1(31 downto 31);
    grp_fu_333_p2 <= std_logic_vector(unsigned(ap_const_lv32_0) - unsigned(word_q1));
    grp_fu_339_p4 <= grp_fu_333_p2(9 downto 4);
    grp_fu_349_p2 <= std_logic_vector(unsigned(ap_const_lv6_0) - unsigned(grp_fu_339_p4));
    i_1_fu_452_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_reg_221));
    i_3_fu_947_p2 <= std_logic_vector(unsigned(i_2_reg_284) + unsigned(ap_const_lv3_1));
    i_cast_fu_442_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_221),4));
    j_1_cast2_cast_fu_468_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_232),10));
    j_4_fu_361_p2 <= std_logic_vector(unsigned(j_reg_209) + unsigned(ap_const_lv3_1));
    j_5_fu_971_p2 <= std_logic_vector(unsigned(j_1_reg_232) + unsigned(ap_const_lv6_1));
    key_address0 <= sum_cast_fu_463_p1(5 - 1 downto 0);

    key_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            key_ce0 <= ap_const_logic_1;
        else 
            key_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    p_lshr_f_cast_fu_690_p4 <= j_1_reg_232(5 downto 2);
    p_shl2_cast_fu_911_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_94_fu_903_p3),10));
    p_shl5_cast_fu_399_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_47_fu_391_p3),11));
    p_shl_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_fu_379_p3),11));
    sum_cast_fu_463_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_458_p2),32));
    sum_fu_458_p2 <= std_logic_vector(unsigned(i_cast_fu_442_p1) + unsigned(tmp_reg_991));
    temp_0_1_cast_fu_866_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_0_fu_861_p2),32));
    temp_0_fu_861_p2 <= (Rcon0_q0 xor Sbox_load_reg_1078);
    temp_1_cast_fu_871_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_1_reg_1088),32));
    temp_2_cast_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Sbox_q0),32));
    tmp_100_fu_816_p3 <= 
        tmp_98_fu_802_p2 when (grp_fu_295_p3(0) = '1') else 
        tmp_99_fu_808_p3;
    tmp_101_fu_824_p4 <= word_q0(9 downto 4);
    tmp_102_fu_834_p3 <= 
        grp_fu_319_p2 when (grp_fu_295_p3(0) = '1') else 
        tmp_101_fu_824_p4;
    tmp_13_fu_957_p5 <= i_2_reg_284(2 - 1 downto 0);
    tmp_33_fu_488_p2 <= std_logic_vector(signed(ap_const_lv6_3F) + signed(j_1_reg_232));
    tmp_34_fu_706_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(addconv_fu_700_p2),32));
    tmp_35_fu_885_p2 <= std_logic_vector(unsigned(j_1_reg_232) + unsigned(ap_const_lv6_3C));
    tmp_36_fu_977_p2 <= (word_q1 xor tmp_13_reg_1126);
    tmp_45_fu_379_p3 <= (i_reg_221 & ap_const_lv7_0);
    tmp_46_fu_367_p1 <= j_reg_209(2 - 1 downto 0);
    tmp_47_fu_391_p3 <= (i_reg_221 & ap_const_lv3_0);
    tmp_48_fu_403_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_387_p1) - unsigned(p_shl5_cast_fu_399_p1));
    tmp_49_fu_409_p1 <= tmp_48_fu_403_p2(3 - 1 downto 0);
    tmp_50_cast_cast1_fu_499_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_488_p2),9));
    tmp_50_cast_cast_fu_503_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_488_p2),8));
    tmp_50_cast_fu_494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_488_p2),32));
    tmp_50_fu_413_p2 <= (tmp_49_fu_409_p1 or j_reg_209);
    tmp_51_fu_419_p4 <= tmp_48_fu_403_p2(10 downto 3);
    tmp_52_cast_cast_fu_891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_35_fu_885_p2),10));
    tmp_52_fu_429_p3 <= (tmp_51_fu_419_p4 & tmp_50_fu_413_p2);
        tmp_53_fu_437_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_52_fu_429_p3),32));

    tmp_54_fu_478_p1 <= j_1_reg_232(2 - 1 downto 0);
    tmp_55_fu_507_p2 <= std_logic_vector(unsigned(ap_const_lv8_78) + unsigned(tmp_50_cast_cast_fu_503_p1));
    tmp_56_fu_518_p2 <= std_logic_vector(unsigned(ap_const_lv9_F0) + unsigned(tmp_50_cast_cast1_fu_499_p1));
    tmp_57_fu_529_p2 <= std_logic_vector(signed(ap_const_lv9_168) + signed(tmp_50_cast_cast1_fu_499_p1));
    tmp_58_cast_fu_513_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_55_fu_507_p2),32));
    tmp_59_cast_fu_524_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_56_fu_518_p2),32));
    tmp_59_fu_540_p1 <= word_q0(4 - 1 downto 0);
    tmp_60_cast_fu_535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_57_fu_529_p2),32));
    tmp_60_fu_544_p1 <= grp_fu_303_p2(4 - 1 downto 0);
    tmp_61_fu_548_p3 <= (ap_const_lv6_0 & tmp_60_fu_544_p1);
    tmp_62_fu_556_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(tmp_61_fu_548_p3));
    tmp_63_fu_562_p3 <= (ap_const_lv6_0 & tmp_59_fu_540_p1);
    tmp_64_fu_570_p3 <= 
        tmp_62_fu_556_p2 when (grp_fu_295_p3(0) = '1') else 
        tmp_63_fu_562_p3;
    tmp_65_fu_578_p4 <= word_q0(9 downto 4);
    tmp_66_fu_588_p3 <= 
        grp_fu_319_p2 when (grp_fu_295_p3(0) = '1') else 
        tmp_65_fu_578_p4;
    tmp_67_cast_fu_596_p3 <= (tmp_66_fu_588_p3 & ap_const_lv4_0);
    tmp_67_fu_604_p2 <= std_logic_vector(unsigned(tmp_67_cast_fu_596_p3) + unsigned(tmp_64_fu_570_p3));
    tmp_68_cast_fu_610_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_67_fu_604_p2),32));
    tmp_69_fu_615_p1 <= word_q1(4 - 1 downto 0);
    tmp_70_fu_619_p1 <= grp_fu_333_p2(4 - 1 downto 0);
    tmp_71_fu_623_p3 <= (ap_const_lv6_0 & tmp_70_fu_619_p1);
    tmp_72_fu_631_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(tmp_71_fu_623_p3));
    tmp_73_fu_637_p3 <= (ap_const_lv6_0 & tmp_69_fu_615_p1);
    tmp_74_fu_645_p3 <= 
        tmp_72_fu_631_p2 when (grp_fu_325_p3(0) = '1') else 
        tmp_73_fu_637_p3;
    tmp_75_cast_fu_671_p3 <= (tmp_77_fu_663_p3 & ap_const_lv4_0);
    tmp_75_fu_653_p4 <= word_q1(9 downto 4);
    tmp_76_cast_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_76_fu_679_p2),32));
    tmp_76_fu_679_p2 <= std_logic_vector(unsigned(tmp_75_cast_fu_671_p3) + unsigned(tmp_74_fu_645_p3));
    tmp_77_fu_663_p3 <= 
        grp_fu_349_p2 when (grp_fu_325_p3(0) = '1') else 
        tmp_75_fu_653_p4;
    tmp_79_fu_711_p1 <= word_q1(4 - 1 downto 0);
    tmp_80_fu_715_p1 <= grp_fu_333_p2(4 - 1 downto 0);
    tmp_81_fu_719_p3 <= (ap_const_lv6_0 & tmp_80_fu_715_p1);
    tmp_82_fu_727_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(tmp_81_fu_719_p3));
    tmp_83_cast_fu_767_p3 <= (tmp_87_fu_759_p3 & ap_const_lv4_0);
    tmp_83_fu_733_p3 <= (ap_const_lv6_0 & tmp_79_fu_711_p1);
    tmp_84_cast_fu_781_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_84_fu_775_p2),32));
    tmp_84_fu_775_p2 <= std_logic_vector(unsigned(tmp_83_cast_fu_767_p3) + unsigned(tmp_85_fu_741_p3));
    tmp_85_fu_741_p3 <= 
        tmp_82_fu_727_p2 when (grp_fu_325_p3(0) = '1') else 
        tmp_83_fu_733_p3;
    tmp_86_fu_749_p4 <= word_q1(9 downto 4);
    tmp_87_fu_759_p3 <= 
        grp_fu_349_p2 when (grp_fu_325_p3(0) = '1') else 
        tmp_86_fu_749_p4;
    tmp_89_fu_786_p1 <= word_q0(4 - 1 downto 0);
    tmp_90_fu_790_p1 <= grp_fu_303_p2(4 - 1 downto 0);
    tmp_91_cast_fu_842_p3 <= (tmp_102_fu_834_p3 & ap_const_lv4_0);
    tmp_91_fu_794_p3 <= (ap_const_lv6_0 & tmp_90_fu_790_p1);
    tmp_92_cast_fu_856_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_92_fu_850_p2),32));
    tmp_92_fu_850_p2 <= std_logic_vector(unsigned(tmp_91_cast_fu_842_p3) + unsigned(tmp_100_fu_816_p3));
    tmp_93_fu_895_p3 <= (i_2_reg_284 & ap_const_lv7_0);
    tmp_94_fu_903_p3 <= (i_2_reg_284 & ap_const_lv3_0);
    tmp_95_fu_915_p2 <= std_logic_vector(unsigned(tmp_93_fu_895_p3) - unsigned(p_shl2_cast_fu_911_p1));
        tmp_96_cast_fu_926_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_96_fu_921_p2),32));

    tmp_96_fu_921_p2 <= std_logic_vector(unsigned(tmp_95_fu_915_p2) + unsigned(tmp_52_cast_cast_reg_1103));
        tmp_97_cast_fu_936_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_97_fu_931_p2),32));

    tmp_97_fu_931_p2 <= std_logic_vector(unsigned(tmp_95_fu_915_p2) + unsigned(j_1_cast2_cast_reg_1014));
    tmp_98_fu_802_p2 <= std_logic_vector(unsigned(ap_const_lv10_0) - unsigned(tmp_91_fu_794_p3));
    tmp_99_fu_808_p3 <= (ap_const_lv6_0 & tmp_89_fu_786_p1);
    tmp_fu_371_p3 <= (tmp_46_fu_367_p1 & ap_const_lv2_0);
    tmp_s_fu_482_p2 <= "1" when (tmp_54_fu_478_p1 = ap_const_lv2_0) else "0";

    word_address0_assign_proc : process(word_addr_reg_996, ap_CS_fsm_state5, tmp_s_fu_482_p2, exitcond1_fu_472_p2, word_addr_6_reg_1037, word_addr_7_reg_1043, ap_CS_fsm_state6, ap_CS_fsm_state8, word_addr_9_reg_1113, ap_CS_fsm_state4, ap_CS_fsm_state12, tmp_58_cast_fu_513_p1, tmp_50_cast_fu_494_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_address0 <= word_addr_9_reg_1113;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            word_address0 <= word_addr_7_reg_1043;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            word_address0 <= word_addr_6_reg_1037;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_472_p2) and (tmp_s_fu_482_p2 = ap_const_lv1_1))) then 
            word_address0 <= tmp_58_cast_fu_513_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_472_p2) and (ap_const_lv1_0 = tmp_s_fu_482_p2))) then 
            word_address0 <= tmp_50_cast_fu_494_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            word_address0 <= word_addr_reg_996;
        else 
            word_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    word_address1_assign_proc : process(ap_CS_fsm_state5, tmp_s_fu_482_p2, exitcond1_fu_472_p2, word_addr_5_reg_1032, word_addr_6_reg_1037, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state11, tmp_58_cast_fu_513_p1, tmp_59_cast_fu_524_p1, tmp_96_cast_fu_926_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            word_address1 <= tmp_96_cast_fu_926_p1(9 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            word_address1 <= word_addr_6_reg_1037;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            word_address1 <= word_addr_5_reg_1032;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_472_p2) and (tmp_s_fu_482_p2 = ap_const_lv1_1))) then 
            word_address1 <= tmp_59_cast_fu_524_p1(9 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_472_p2) and (ap_const_lv1_0 = tmp_s_fu_482_p2))) then 
            word_address1 <= tmp_58_cast_fu_513_p1(9 - 1 downto 0);
        else 
            word_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    word_ce0_assign_proc : process(ap_CS_fsm_state5, tmp_s_fu_482_p2, exitcond1_fu_472_p2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state4, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_472_p2) and (ap_const_lv1_0 = tmp_s_fu_482_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_472_p2) and (tmp_s_fu_482_p2 = ap_const_lv1_1)))) then 
            word_ce0 <= ap_const_logic_1;
        else 
            word_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    word_ce1_assign_proc : process(ap_CS_fsm_state5, tmp_s_fu_482_p2, exitcond1_fu_472_p2, ap_CS_fsm_state6, ap_CS_fsm_state8, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state11) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_472_p2) and (ap_const_lv1_0 = tmp_s_fu_482_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond1_fu_472_p2) and (tmp_s_fu_482_p2 = ap_const_lv1_1)))) then 
            word_ce1 <= ap_const_logic_1;
        else 
            word_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    word_d0_assign_proc : process(key_q0, ap_CS_fsm_state4, ap_CS_fsm_state12, tmp_36_fu_977_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            word_d0 <= tmp_36_fu_977_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            word_d0 <= key_q0;
        else 
            word_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    word_we0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            word_we0 <= ap_const_logic_1;
        else 
            word_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
