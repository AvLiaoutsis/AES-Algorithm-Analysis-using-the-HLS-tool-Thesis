-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity aes_main is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    statemt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    statemt_ce0 : OUT STD_LOGIC;
    statemt_we0 : OUT STD_LOGIC;
    statemt_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    statemt_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    statemt_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    statemt_ce1 : OUT STD_LOGIC;
    statemt_we1 : OUT STD_LOGIC;
    statemt_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    statemt_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    key_ce0 : OUT STD_LOGIC;
    key_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    out_r_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of aes_main is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "aes_main,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7eg-ffvf1517-1l-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.512000,HLS_SYN_LAT=1092,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=2137,HLS_SYN_LUT=3550}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv6_A : STD_LOGIC_VECTOR (5 downto 0) := "001010";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal word_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal word_ce0 : STD_LOGIC;
    signal word_we0 : STD_LOGIC;
    signal word_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal word_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal word_ce1 : STD_LOGIC;
    signal word_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_143_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_i_reg_169 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal i_1_i_cast1_fu_149_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_1_i_cast1_reg_174 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal i_fu_160_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_182 : STD_LOGIC_VECTOR (4 downto 0);
    signal exitcond2_i_fu_154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_MixColumn_AddRoundKe_fu_96_ap_start : STD_LOGIC;
    signal grp_MixColumn_AddRoundKe_fu_96_ap_done : STD_LOGIC;
    signal grp_MixColumn_AddRoundKe_fu_96_ap_idle : STD_LOGIC;
    signal grp_MixColumn_AddRoundKe_fu_96_ap_ready : STD_LOGIC;
    signal grp_MixColumn_AddRoundKe_fu_96_statemt_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_MixColumn_AddRoundKe_fu_96_statemt_ce0 : STD_LOGIC;
    signal grp_MixColumn_AddRoundKe_fu_96_statemt_we0 : STD_LOGIC;
    signal grp_MixColumn_AddRoundKe_fu_96_statemt_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MixColumn_AddRoundKe_fu_96_statemt_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_MixColumn_AddRoundKe_fu_96_statemt_ce1 : STD_LOGIC;
    signal grp_MixColumn_AddRoundKe_fu_96_statemt_we1 : STD_LOGIC;
    signal grp_MixColumn_AddRoundKe_fu_96_statemt_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_MixColumn_AddRoundKe_fu_96_word_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MixColumn_AddRoundKe_fu_96_word_ce0 : STD_LOGIC;
    signal grp_MixColumn_AddRoundKe_fu_96_word_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_MixColumn_AddRoundKe_fu_96_word_ce1 : STD_LOGIC;
    signal grp_KeySchedule_fu_106_ap_start : STD_LOGIC;
    signal grp_KeySchedule_fu_106_ap_done : STD_LOGIC;
    signal grp_KeySchedule_fu_106_ap_idle : STD_LOGIC;
    signal grp_KeySchedule_fu_106_ap_ready : STD_LOGIC;
    signal grp_KeySchedule_fu_106_key_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_KeySchedule_fu_106_key_ce0 : STD_LOGIC;
    signal grp_KeySchedule_fu_106_word_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_KeySchedule_fu_106_word_ce0 : STD_LOGIC;
    signal grp_KeySchedule_fu_106_word_we0 : STD_LOGIC;
    signal grp_KeySchedule_fu_106_word_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_KeySchedule_fu_106_word_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_KeySchedule_fu_106_word_ce1 : STD_LOGIC;
    signal grp_ByteSub_ShiftRow_fu_118_ap_start : STD_LOGIC;
    signal grp_ByteSub_ShiftRow_fu_118_ap_done : STD_LOGIC;
    signal grp_ByteSub_ShiftRow_fu_118_ap_idle : STD_LOGIC;
    signal grp_ByteSub_ShiftRow_fu_118_ap_ready : STD_LOGIC;
    signal grp_ByteSub_ShiftRow_fu_118_statemt_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ByteSub_ShiftRow_fu_118_statemt_ce0 : STD_LOGIC;
    signal grp_ByteSub_ShiftRow_fu_118_statemt_we0 : STD_LOGIC;
    signal grp_ByteSub_ShiftRow_fu_118_statemt_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_ByteSub_ShiftRow_fu_118_statemt_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_ByteSub_ShiftRow_fu_118_statemt_ce1 : STD_LOGIC;
    signal grp_ByteSub_ShiftRow_fu_118_statemt_we1 : STD_LOGIC;
    signal grp_ByteSub_ShiftRow_fu_118_statemt_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AddRoundKey_fu_126_ap_start : STD_LOGIC;
    signal grp_AddRoundKey_fu_126_ap_done : STD_LOGIC;
    signal grp_AddRoundKey_fu_126_ap_idle : STD_LOGIC;
    signal grp_AddRoundKey_fu_126_ap_ready : STD_LOGIC;
    signal grp_AddRoundKey_fu_126_statemt_address0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_AddRoundKey_fu_126_statemt_ce0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_126_statemt_we0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_126_statemt_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AddRoundKey_fu_126_statemt_address1 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_AddRoundKey_fu_126_statemt_ce1 : STD_LOGIC;
    signal grp_AddRoundKey_fu_126_statemt_we1 : STD_LOGIC;
    signal grp_AddRoundKey_fu_126_statemt_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_AddRoundKey_fu_126_n : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_AddRoundKey_fu_126_word_address0 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_AddRoundKey_fu_126_word_ce0 : STD_LOGIC;
    signal grp_AddRoundKey_fu_126_word_address1 : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_AddRoundKey_fu_126_word_ce1 : STD_LOGIC;
    signal i_i_reg_73 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_1_i_reg_85 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_reg_grp_MixColumn_AddRoundKe_fu_96_ap_start : STD_LOGIC := '0';
    signal ap_reg_grp_KeySchedule_fu_106_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_reg_grp_ByteSub_ShiftRow_fu_118_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal exitcond3_i_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_reg_grp_AddRoundKey_fu_126_ap_start : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);

    component MixColumn_AddRoundKe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        statemt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        statemt_ce0 : OUT STD_LOGIC;
        statemt_we0 : OUT STD_LOGIC;
        statemt_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        statemt_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        statemt_ce1 : OUT STD_LOGIC;
        statemt_we1 : OUT STD_LOGIC;
        statemt_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        n : IN STD_LOGIC_VECTOR (3 downto 0);
        word_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        word_ce0 : OUT STD_LOGIC;
        word_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        word_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        word_ce1 : OUT STD_LOGIC;
        word_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component KeySchedule IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        key_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        key_ce0 : OUT STD_LOGIC;
        key_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        word_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        word_ce0 : OUT STD_LOGIC;
        word_we0 : OUT STD_LOGIC;
        word_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        word_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        word_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        word_ce1 : OUT STD_LOGIC;
        word_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component ByteSub_ShiftRow IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        statemt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        statemt_ce0 : OUT STD_LOGIC;
        statemt_we0 : OUT STD_LOGIC;
        statemt_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        statemt_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        statemt_ce1 : OUT STD_LOGIC;
        statemt_we1 : OUT STD_LOGIC;
        statemt_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component AddRoundKey IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        statemt_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        statemt_ce0 : OUT STD_LOGIC;
        statemt_we0 : OUT STD_LOGIC;
        statemt_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        statemt_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
        statemt_ce1 : OUT STD_LOGIC;
        statemt_we1 : OUT STD_LOGIC;
        statemt_d1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        statemt_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        n : IN STD_LOGIC_VECTOR (5 downto 0);
        word_address0 : OUT STD_LOGIC_VECTOR (8 downto 0);
        word_ce0 : OUT STD_LOGIC;
        word_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        word_address1 : OUT STD_LOGIC_VECTOR (8 downto 0);
        word_ce1 : OUT STD_LOGIC;
        word_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component aes_main_word IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (8 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    word_U : component aes_main_word
    generic map (
        DataWidth => 32,
        AddressRange => 480,
        AddressWidth => 9)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => word_address0,
        ce0 => word_ce0,
        we0 => word_we0,
        d0 => grp_KeySchedule_fu_106_word_d0,
        q0 => word_q0,
        address1 => word_address1,
        ce1 => word_ce1,
        q1 => word_q1);

    grp_MixColumn_AddRoundKe_fu_96 : component MixColumn_AddRoundKe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_MixColumn_AddRoundKe_fu_96_ap_start,
        ap_done => grp_MixColumn_AddRoundKe_fu_96_ap_done,
        ap_idle => grp_MixColumn_AddRoundKe_fu_96_ap_idle,
        ap_ready => grp_MixColumn_AddRoundKe_fu_96_ap_ready,
        statemt_address0 => grp_MixColumn_AddRoundKe_fu_96_statemt_address0,
        statemt_ce0 => grp_MixColumn_AddRoundKe_fu_96_statemt_ce0,
        statemt_we0 => grp_MixColumn_AddRoundKe_fu_96_statemt_we0,
        statemt_d0 => grp_MixColumn_AddRoundKe_fu_96_statemt_d0,
        statemt_q0 => statemt_q0,
        statemt_address1 => grp_MixColumn_AddRoundKe_fu_96_statemt_address1,
        statemt_ce1 => grp_MixColumn_AddRoundKe_fu_96_statemt_ce1,
        statemt_we1 => grp_MixColumn_AddRoundKe_fu_96_statemt_we1,
        statemt_d1 => grp_MixColumn_AddRoundKe_fu_96_statemt_d1,
        statemt_q1 => statemt_q1,
        n => i_i_reg_73,
        word_address0 => grp_MixColumn_AddRoundKe_fu_96_word_address0,
        word_ce0 => grp_MixColumn_AddRoundKe_fu_96_word_ce0,
        word_q0 => word_q0,
        word_address1 => grp_MixColumn_AddRoundKe_fu_96_word_address1,
        word_ce1 => grp_MixColumn_AddRoundKe_fu_96_word_ce1,
        word_q1 => word_q1);

    grp_KeySchedule_fu_106 : component KeySchedule
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeySchedule_fu_106_ap_start,
        ap_done => grp_KeySchedule_fu_106_ap_done,
        ap_idle => grp_KeySchedule_fu_106_ap_idle,
        ap_ready => grp_KeySchedule_fu_106_ap_ready,
        key_address0 => grp_KeySchedule_fu_106_key_address0,
        key_ce0 => grp_KeySchedule_fu_106_key_ce0,
        key_q0 => key_q0,
        word_address0 => grp_KeySchedule_fu_106_word_address0,
        word_ce0 => grp_KeySchedule_fu_106_word_ce0,
        word_we0 => grp_KeySchedule_fu_106_word_we0,
        word_d0 => grp_KeySchedule_fu_106_word_d0,
        word_q0 => word_q0,
        word_address1 => grp_KeySchedule_fu_106_word_address1,
        word_ce1 => grp_KeySchedule_fu_106_word_ce1,
        word_q1 => word_q1);

    grp_ByteSub_ShiftRow_fu_118 : component ByteSub_ShiftRow
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_ByteSub_ShiftRow_fu_118_ap_start,
        ap_done => grp_ByteSub_ShiftRow_fu_118_ap_done,
        ap_idle => grp_ByteSub_ShiftRow_fu_118_ap_idle,
        ap_ready => grp_ByteSub_ShiftRow_fu_118_ap_ready,
        statemt_address0 => grp_ByteSub_ShiftRow_fu_118_statemt_address0,
        statemt_ce0 => grp_ByteSub_ShiftRow_fu_118_statemt_ce0,
        statemt_we0 => grp_ByteSub_ShiftRow_fu_118_statemt_we0,
        statemt_d0 => grp_ByteSub_ShiftRow_fu_118_statemt_d0,
        statemt_q0 => statemt_q0,
        statemt_address1 => grp_ByteSub_ShiftRow_fu_118_statemt_address1,
        statemt_ce1 => grp_ByteSub_ShiftRow_fu_118_statemt_ce1,
        statemt_we1 => grp_ByteSub_ShiftRow_fu_118_statemt_we1,
        statemt_d1 => grp_ByteSub_ShiftRow_fu_118_statemt_d1,
        statemt_q1 => statemt_q1);

    grp_AddRoundKey_fu_126 : component AddRoundKey
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_AddRoundKey_fu_126_ap_start,
        ap_done => grp_AddRoundKey_fu_126_ap_done,
        ap_idle => grp_AddRoundKey_fu_126_ap_idle,
        ap_ready => grp_AddRoundKey_fu_126_ap_ready,
        statemt_address0 => grp_AddRoundKey_fu_126_statemt_address0,
        statemt_ce0 => grp_AddRoundKey_fu_126_statemt_ce0,
        statemt_we0 => grp_AddRoundKey_fu_126_statemt_we0,
        statemt_d0 => grp_AddRoundKey_fu_126_statemt_d0,
        statemt_q0 => statemt_q0,
        statemt_address1 => grp_AddRoundKey_fu_126_statemt_address1,
        statemt_ce1 => grp_AddRoundKey_fu_126_statemt_ce1,
        statemt_we1 => grp_AddRoundKey_fu_126_statemt_we1,
        statemt_d1 => grp_AddRoundKey_fu_126_statemt_d1,
        statemt_q1 => statemt_q1,
        n => grp_AddRoundKey_fu_126_n,
        word_address0 => grp_AddRoundKey_fu_126_word_address0,
        word_ce0 => grp_AddRoundKey_fu_126_word_ce0,
        word_q0 => word_q0,
        word_address1 => grp_AddRoundKey_fu_126_word_address1,
        word_ce1 => grp_AddRoundKey_fu_126_word_ce1,
        word_q1 => word_q1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_reg_grp_AddRoundKey_fu_126_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_AddRoundKey_fu_126_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_reg_grp_AddRoundKey_fu_126_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_AddRoundKey_fu_126_ap_ready)) then 
                    ap_reg_grp_AddRoundKey_fu_126_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_ByteSub_ShiftRow_fu_118_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_ByteSub_ShiftRow_fu_118_ap_start <= ap_const_logic_0;
            else
                if ((((ap_const_logic_1 = ap_CS_fsm_state5) and (ap_const_lv1_0 = exitcond3_i_fu_137_p2)) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_i_fu_137_p2 = ap_const_lv1_1)))) then 
                    ap_reg_grp_ByteSub_ShiftRow_fu_118_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_ByteSub_ShiftRow_fu_118_ap_ready)) then 
                    ap_reg_grp_ByteSub_ShiftRow_fu_118_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_KeySchedule_fu_106_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_KeySchedule_fu_106_ap_start <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_reg_grp_KeySchedule_fu_106_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_KeySchedule_fu_106_ap_ready)) then 
                    ap_reg_grp_KeySchedule_fu_106_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_reg_grp_MixColumn_AddRoundKe_fu_96_ap_start_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_reg_grp_MixColumn_AddRoundKe_fu_96_ap_start <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_reg_grp_MixColumn_AddRoundKe_fu_96_ap_start <= ap_const_logic_1;
                elsif ((ap_const_logic_1 = grp_MixColumn_AddRoundKe_fu_96_ap_ready)) then 
                    ap_reg_grp_MixColumn_AddRoundKe_fu_96_ap_start <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_i_reg_85_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_1_i_reg_85 <= i_reg_182;
            elsif (((grp_AddRoundKey_fu_126_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then 
                i_1_i_reg_85 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_i_reg_73_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_MixColumn_AddRoundKe_fu_96_ap_done = ap_const_logic_1))) then 
                i_i_reg_73 <= tmp_i_reg_169;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_AddRoundKey_fu_126_ap_done = ap_const_logic_1))) then 
                i_i_reg_73 <= ap_const_lv4_1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                    i_1_i_cast1_reg_174(4 downto 0) <= i_1_i_cast1_fu_149_p1(4 downto 0);
                i_reg_182 <= i_fu_160_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_i_reg_169 <= tmp_i_fu_143_p2;
            end if;
        end if;
    end process;
    i_1_i_cast1_reg_174(31 downto 5) <= "000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state12, exitcond2_i_fu_154_p2, grp_MixColumn_AddRoundKe_fu_96_ap_done, grp_KeySchedule_fu_106_ap_done, grp_ByteSub_ShiftRow_fu_118_ap_done, grp_AddRoundKey_fu_126_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state2, ap_CS_fsm_state5, exitcond3_i_fu_137_p2, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (grp_KeySchedule_fu_106_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_AddRoundKey_fu_126_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (exitcond3_i_fu_137_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_ByteSub_ShiftRow_fu_118_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_MixColumn_AddRoundKe_fu_96_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (grp_ByteSub_ShiftRow_fu_118_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                if (((grp_AddRoundKey_fu_126_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond2_i_fu_154_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state12, exitcond2_i_fu_154_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond2_i_fu_154_p2 = ap_const_lv1_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state12, exitcond2_i_fu_154_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) and (exitcond2_i_fu_154_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond2_i_fu_154_p2 <= "1" when (i_1_i_reg_85 = ap_const_lv5_10) else "0";
    exitcond3_i_fu_137_p2 <= "1" when (i_i_reg_73 = ap_const_lv4_A) else "0";
    grp_AddRoundKey_fu_126_ap_start <= ap_reg_grp_AddRoundKey_fu_126_ap_start;

    grp_AddRoundKey_fu_126_n_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            grp_AddRoundKey_fu_126_n <= ap_const_lv6_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_AddRoundKey_fu_126_n <= ap_const_lv6_0;
        else 
            grp_AddRoundKey_fu_126_n <= "XXXXXX";
        end if; 
    end process;

    grp_ByteSub_ShiftRow_fu_118_ap_start <= ap_reg_grp_ByteSub_ShiftRow_fu_118_ap_start;
    grp_KeySchedule_fu_106_ap_start <= ap_reg_grp_KeySchedule_fu_106_ap_start;
    grp_MixColumn_AddRoundKe_fu_96_ap_start <= ap_reg_grp_MixColumn_AddRoundKe_fu_96_ap_start;
    i_1_i_cast1_fu_149_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_i_reg_85),32));
    i_fu_160_p2 <= std_logic_vector(unsigned(i_1_i_reg_85) + unsigned(ap_const_lv5_1));
    key_address0 <= grp_KeySchedule_fu_106_key_address0;
    key_ce0 <= grp_KeySchedule_fu_106_key_ce0;
    out_r_address0 <= i_1_i_cast1_reg_174(5 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= statemt_q0;

    out_r_we0_assign_proc : process(ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_address0_assign_proc : process(i_1_i_cast1_fu_149_p1, ap_CS_fsm_state12, grp_MixColumn_AddRoundKe_fu_96_statemt_address0, grp_ByteSub_ShiftRow_fu_118_statemt_address0, grp_AddRoundKey_fu_126_statemt_address0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_address0 <= i_1_i_cast1_fu_149_p1(5 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            statemt_address0 <= grp_AddRoundKey_fu_126_statemt_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            statemt_address0 <= grp_ByteSub_ShiftRow_fu_118_statemt_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_address0 <= grp_MixColumn_AddRoundKe_fu_96_statemt_address0;
        else 
            statemt_address0 <= "XXXXX";
        end if; 
    end process;


    statemt_address1_assign_proc : process(grp_MixColumn_AddRoundKe_fu_96_statemt_address1, grp_ByteSub_ShiftRow_fu_118_statemt_address1, grp_AddRoundKey_fu_126_statemt_address1, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            statemt_address1 <= grp_AddRoundKey_fu_126_statemt_address1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            statemt_address1 <= grp_ByteSub_ShiftRow_fu_118_statemt_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_address1 <= grp_MixColumn_AddRoundKe_fu_96_statemt_address1;
        else 
            statemt_address1 <= "XXXXX";
        end if; 
    end process;


    statemt_ce0_assign_proc : process(ap_CS_fsm_state12, grp_MixColumn_AddRoundKe_fu_96_statemt_ce0, grp_ByteSub_ShiftRow_fu_118_statemt_ce0, grp_AddRoundKey_fu_126_statemt_ce0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            statemt_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            statemt_ce0 <= grp_AddRoundKey_fu_126_statemt_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            statemt_ce0 <= grp_ByteSub_ShiftRow_fu_118_statemt_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_ce0 <= grp_MixColumn_AddRoundKe_fu_96_statemt_ce0;
        else 
            statemt_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_ce1_assign_proc : process(grp_MixColumn_AddRoundKe_fu_96_statemt_ce1, grp_ByteSub_ShiftRow_fu_118_statemt_ce1, grp_AddRoundKey_fu_126_statemt_ce1, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            statemt_ce1 <= grp_AddRoundKey_fu_126_statemt_ce1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            statemt_ce1 <= grp_ByteSub_ShiftRow_fu_118_statemt_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_ce1 <= grp_MixColumn_AddRoundKe_fu_96_statemt_ce1;
        else 
            statemt_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_d0_assign_proc : process(grp_MixColumn_AddRoundKe_fu_96_statemt_d0, grp_ByteSub_ShiftRow_fu_118_statemt_d0, grp_AddRoundKey_fu_126_statemt_d0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            statemt_d0 <= grp_AddRoundKey_fu_126_statemt_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            statemt_d0 <= grp_ByteSub_ShiftRow_fu_118_statemt_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_d0 <= grp_MixColumn_AddRoundKe_fu_96_statemt_d0;
        else 
            statemt_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    statemt_d1_assign_proc : process(grp_MixColumn_AddRoundKe_fu_96_statemt_d1, grp_ByteSub_ShiftRow_fu_118_statemt_d1, grp_AddRoundKey_fu_126_statemt_d1, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            statemt_d1 <= grp_AddRoundKey_fu_126_statemt_d1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            statemt_d1 <= grp_ByteSub_ShiftRow_fu_118_statemt_d1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_d1 <= grp_MixColumn_AddRoundKe_fu_96_statemt_d1;
        else 
            statemt_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    statemt_we0_assign_proc : process(grp_MixColumn_AddRoundKe_fu_96_statemt_we0, grp_ByteSub_ShiftRow_fu_118_statemt_we0, grp_AddRoundKey_fu_126_statemt_we0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            statemt_we0 <= grp_AddRoundKey_fu_126_statemt_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            statemt_we0 <= grp_ByteSub_ShiftRow_fu_118_statemt_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_we0 <= grp_MixColumn_AddRoundKe_fu_96_statemt_we0;
        else 
            statemt_we0 <= ap_const_logic_0;
        end if; 
    end process;


    statemt_we1_assign_proc : process(grp_MixColumn_AddRoundKe_fu_96_statemt_we1, grp_ByteSub_ShiftRow_fu_118_statemt_we1, grp_AddRoundKey_fu_126_statemt_we1, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state6, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            statemt_we1 <= grp_AddRoundKey_fu_126_statemt_we1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            statemt_we1 <= grp_ByteSub_ShiftRow_fu_118_statemt_we1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            statemt_we1 <= grp_MixColumn_AddRoundKe_fu_96_statemt_we1;
        else 
            statemt_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_i_fu_143_p2 <= std_logic_vector(unsigned(i_i_reg_73) + unsigned(ap_const_lv4_1));

    word_address0_assign_proc : process(grp_MixColumn_AddRoundKe_fu_96_word_address0, grp_KeySchedule_fu_106_word_address0, grp_AddRoundKey_fu_126_word_address0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            word_address0 <= grp_AddRoundKey_fu_126_word_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_address0 <= grp_KeySchedule_fu_106_word_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            word_address0 <= grp_MixColumn_AddRoundKe_fu_96_word_address0;
        else 
            word_address0 <= "XXXXXXXXX";
        end if; 
    end process;


    word_address1_assign_proc : process(grp_MixColumn_AddRoundKe_fu_96_word_address1, grp_KeySchedule_fu_106_word_address1, grp_AddRoundKey_fu_126_word_address1, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            word_address1 <= grp_AddRoundKey_fu_126_word_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_address1 <= grp_KeySchedule_fu_106_word_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            word_address1 <= grp_MixColumn_AddRoundKe_fu_96_word_address1;
        else 
            word_address1 <= "XXXXXXXXX";
        end if; 
    end process;


    word_ce0_assign_proc : process(grp_MixColumn_AddRoundKe_fu_96_word_ce0, grp_KeySchedule_fu_106_word_ce0, grp_AddRoundKey_fu_126_word_ce0, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            word_ce0 <= grp_AddRoundKey_fu_126_word_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_ce0 <= grp_KeySchedule_fu_106_word_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            word_ce0 <= grp_MixColumn_AddRoundKe_fu_96_word_ce0;
        else 
            word_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    word_ce1_assign_proc : process(grp_MixColumn_AddRoundKe_fu_96_word_ce1, grp_KeySchedule_fu_106_word_ce1, grp_AddRoundKey_fu_126_word_ce1, ap_CS_fsm_state4, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11))) then 
            word_ce1 <= grp_AddRoundKey_fu_126_word_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_ce1 <= grp_KeySchedule_fu_106_word_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            word_ce1 <= grp_MixColumn_AddRoundKe_fu_96_word_ce1;
        else 
            word_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    word_we0_assign_proc : process(grp_KeySchedule_fu_106_word_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            word_we0 <= grp_KeySchedule_fu_106_word_we0;
        else 
            word_we0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
