// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module MixColumn_AddRoundKe (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        statemt_address0,
        statemt_ce0,
        statemt_we0,
        statemt_d0,
        statemt_q0,
        statemt_address1,
        statemt_ce1,
        statemt_we1,
        statemt_d1,
        statemt_q1,
        n,
        word_address0,
        word_ce0,
        word_q0,
        word_address1,
        word_ce1,
        word_q1
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] statemt_address0;
output   statemt_ce0;
output   statemt_we0;
output  [31:0] statemt_d0;
input  [31:0] statemt_q0;
output  [4:0] statemt_address1;
output   statemt_ce1;
output   statemt_we1;
output  [31:0] statemt_d1;
input  [31:0] statemt_q1;
input  [3:0] n;
output  [8:0] word_address0;
output   word_ce0;
input  [31:0] word_q0;
output  [8:0] word_address1;
output   word_ce1;
input  [31:0] word_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] statemt_address0;
reg statemt_ce0;
reg statemt_we0;
reg[4:0] statemt_address1;
reg statemt_ce1;
reg statemt_we1;
reg[8:0] word_address0;
reg word_ce0;
reg[8:0] word_address1;
reg word_ce1;

(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] tmp_fu_285_p3;
reg   [5:0] tmp_reg_865;
wire   [2:0] j_3_fu_303_p2;
reg   [2:0] j_3_reg_873;
wire    ap_CS_fsm_state2;
wire   [3:0] tmp_5_fu_313_p3;
reg   [3:0] tmp_5_reg_878;
wire   [0:0] exitcond1_fu_297_p2;
wire   [31:0] tmp_5_cast_fu_321_p1;
reg   [31:0] tmp_5_cast_reg_884;
wire   [31:0] tmp_9_cast_fu_332_p1;
reg   [31:0] tmp_9_cast_reg_894;
wire   [5:0] tmp_14_fu_337_p2;
reg   [5:0] tmp_14_reg_904;
reg   [31:0] x_6_reg_919;
wire    ap_CS_fsm_state3;
wire   [0:0] tmp_7_fu_370_p2;
reg   [0:0] tmp_7_reg_927;
reg   [31:0] x_reg_932;
wire   [31:0] tmp_14_cast_fu_381_p1;
reg   [31:0] tmp_14_cast_reg_940;
wire   [31:0] tmp_15_cast_fu_391_p1;
reg   [31:0] tmp_15_cast_reg_950;
reg   [31:0] word_load_reg_970;
wire   [0:0] tmp_16_fu_429_p2;
reg   [0:0] tmp_16_reg_975;
reg   [31:0] word_load_1_reg_980;
wire   [31:0] tmp_27_fu_705_p2;
reg   [31:0] tmp_27_reg_985;
wire    ap_CS_fsm_state4;
wire   [31:0] tmp_32_fu_799_p2;
reg   [31:0] tmp_32_reg_990;
wire   [2:0] j_2_fu_811_p2;
reg   [2:0] j_2_reg_998;
wire    ap_CS_fsm_state6;
wire   [3:0] tmp_2_fu_821_p3;
reg   [3:0] tmp_2_reg_1003;
wire   [0:0] exitcond_fu_805_p2;
wire   [31:0] tmp_2_cast_fu_829_p1;
reg   [31:0] tmp_2_cast_reg_1009;
wire   [31:0] tmp_4_cast_fu_840_p1;
reg   [31:0] tmp_4_cast_reg_1019;
wire   [31:0] tmp_12_cast_fu_850_p1;
reg   [31:0] tmp_12_cast_reg_1029;
wire    ap_CS_fsm_state7;
wire   [31:0] tmp_13_cast_fu_860_p1;
reg   [31:0] tmp_13_cast_reg_1039;
reg   [4:0] ret_address0;
reg    ret_ce0;
reg    ret_we0;
reg   [31:0] ret_d0;
wire   [31:0] ret_q0;
reg   [4:0] ret_address1;
reg    ret_ce1;
reg    ret_we1;
reg   [31:0] ret_d1;
wire   [31:0] ret_q1;
reg   [2:0] j_reg_243;
wire    ap_CS_fsm_state5;
reg   [2:0] j_1_reg_254;
wire    ap_CS_fsm_state8;
wire   [31:0] tmp_16_cast_fu_342_p1;
wire   [31:0] tmp_38_cast_fu_357_p1;
wire   [31:0] tmp_39_cast_fu_405_p1;
wire   [31:0] tmp_40_cast_fu_416_p1;
wire   [31:0] tmp_15_fu_518_p2;
wire   [31:0] tmp_21_fu_604_p2;
wire   [1:0] tmp_6_fu_309_p1;
wire   [3:0] tmp_9_fu_326_p2;
wire   [5:0] j_cast1_fu_293_p1;
wire   [7:0] tmp_16_cast_cast_fu_347_p1;
wire   [7:0] tmp_34_fu_351_p2;
wire   [23:0] grp_fu_265_p4;
wire   [31:0] p_mask_fu_362_p3;
wire   [3:0] tmp_10_fu_376_p2;
wire   [3:0] tmp_11_fu_386_p2;
wire   [8:0] tmp_16_cast_cast1_fu_396_p1;
wire   [8:0] tmp_35_fu_399_p2;
wire   [8:0] tmp_36_fu_410_p2;
wire   [23:0] grp_fu_275_p4;
wire   [31:0] p_mask2_fu_421_p3;
wire   [31:0] tmp_18_fu_435_p2;
wire   [31:0] tmp_8_fu_440_p2;
wire   [31:0] tmp_24_fu_453_p2;
wire   [31:0] x_1_fu_458_p2;
wire   [23:0] tmp_33_fu_463_p4;
wire   [31:0] p_mask1_fu_473_p3;
wire   [0:0] tmp_1_fu_481_p2;
wire   [31:0] tmp_3_fu_487_p2;
wire   [31:0] ret_load_1_fu_446_p3;
wire   [31:0] storemerge_v_fu_493_p3;
wire   [31:0] tmp3_fu_507_p2;
wire   [31:0] tmp2_fu_513_p2;
wire   [31:0] tmp1_fu_501_p2;
wire   [31:0] tmp_17_fu_525_p2;
wire   [31:0] tmp_38_fu_538_p2;
wire   [31:0] x_3_fu_544_p2;
wire   [23:0] tmp_39_fu_550_p4;
wire   [31:0] p_mask3_fu_560_p3;
wire   [0:0] tmp_19_fu_568_p2;
wire   [31:0] tmp_20_fu_574_p2;
wire   [31:0] storemerge8_v_fu_580_p3;
wire   [31:0] tmp_23_tmp_s_fu_531_p3;
wire   [31:0] tmp6_fu_593_p2;
wire   [31:0] tmp5_fu_599_p2;
wire   [31:0] tmp4_fu_588_p2;
wire   [31:0] p_mask4_fu_611_p3;
wire   [0:0] tmp_22_fu_619_p2;
wire   [31:0] tmp_23_fu_625_p2;
wire   [31:0] tmp_41_fu_639_p2;
wire   [31:0] x_5_fu_645_p2;
wire   [23:0] tmp_42_fu_651_p4;
wire   [31:0] p_mask5_fu_661_p3;
wire   [0:0] tmp_25_fu_669_p2;
wire   [31:0] tmp_26_fu_675_p2;
wire   [31:0] storemerge9_v_fu_681_p3;
wire   [31:0] tmp_33_tmp_s_fu_631_p3;
wire   [31:0] tmp9_fu_693_p2;
wire   [31:0] tmp8_fu_699_p2;
wire   [31:0] tmp7_fu_689_p2;
wire   [31:0] p_mask6_fu_711_p3;
wire   [0:0] tmp_28_fu_719_p2;
wire   [31:0] tmp_29_fu_725_p2;
wire   [31:0] x_7_fu_739_p2;
wire   [23:0] tmp_44_fu_744_p4;
wire   [31:0] p_mask7_fu_754_p3;
wire   [0:0] tmp_30_fu_762_p2;
wire   [31:0] tmp_31_fu_768_p2;
wire   [31:0] storemerge1_v_fu_774_p3;
wire   [31:0] tmp_43_tmp_s_fu_731_p3;
wire   [31:0] tmp12_fu_787_p2;
wire   [31:0] tmp11_fu_793_p2;
wire   [31:0] tmp10_fu_782_p2;
wire   [1:0] tmp_45_fu_817_p1;
wire   [3:0] tmp_4_fu_834_p2;
wire   [3:0] tmp_12_fu_845_p2;
wire   [3:0] tmp_13_fu_855_p2;
reg   [7:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

MixColumn_AddRoundEe #(
    .DataWidth( 32 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
ret_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(ret_address0),
    .ce0(ret_ce0),
    .we0(ret_we0),
    .d0(ret_d0),
    .q0(ret_q0),
    .address1(ret_address1),
    .ce1(ret_ce1),
    .we1(ret_we1),
    .d1(ret_d1),
    .q1(ret_q1)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_297_p2 == 1'd1))) begin
        j_1_reg_254 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        j_1_reg_254 <= j_2_reg_998;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_reg_243 <= j_3_reg_873;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        j_reg_243 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_2_reg_998 <= j_2_fu_811_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        j_3_reg_873 <= j_3_fu_303_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_12_cast_reg_1029[3 : 2] <= tmp_12_cast_fu_850_p1[3 : 2];
        tmp_13_cast_reg_1039[3 : 2] <= tmp_13_cast_fu_860_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp_14_cast_reg_940[3 : 2] <= tmp_14_cast_fu_381_p1[3 : 2];
        tmp_15_cast_reg_950[3 : 2] <= tmp_15_cast_fu_391_p1[3 : 2];
        tmp_16_reg_975 <= tmp_16_fu_429_p2;
        tmp_7_reg_927 <= tmp_7_fu_370_p2;
        word_load_1_reg_980 <= word_q1;
        word_load_reg_970 <= word_q0;
        x_6_reg_919 <= statemt_q0;
        x_reg_932 <= statemt_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_297_p2 == 1'd0))) begin
        tmp_14_reg_904 <= tmp_14_fu_337_p2;
        tmp_5_cast_reg_884[3 : 2] <= tmp_5_cast_fu_321_p1[3 : 2];
        tmp_5_reg_878[3 : 2] <= tmp_5_fu_313_p3[3 : 2];
        tmp_9_cast_reg_894[3 : 2] <= tmp_9_cast_fu_332_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_27_reg_985 <= tmp_27_fu_705_p2;
        tmp_32_reg_990 <= tmp_32_fu_799_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond_fu_805_p2))) begin
        tmp_2_cast_reg_1009[3 : 2] <= tmp_2_cast_fu_829_p1[3 : 2];
        tmp_2_reg_1003[3 : 2] <= tmp_2_fu_821_p3[3 : 2];
        tmp_4_cast_reg_1019[3 : 2] <= tmp_4_cast_fu_840_p1[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_reg_865[5 : 2] <= tmp_fu_285_p3[5 : 2];
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_805_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_805_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ret_address0 = tmp_12_cast_fu_850_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ret_address0 = tmp_2_cast_fu_829_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ret_address0 = tmp_14_cast_reg_940;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ret_address0 = tmp_5_cast_reg_884;
    end else begin
        ret_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ret_address1 = tmp_13_cast_fu_860_p1;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        ret_address1 = tmp_4_cast_fu_840_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        ret_address1 = tmp_15_cast_reg_950;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ret_address1 = tmp_9_cast_reg_894;
    end else begin
        ret_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        ret_ce0 = 1'b1;
    end else begin
        ret_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state5))) begin
        ret_ce1 = 1'b1;
    end else begin
        ret_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ret_d0 = tmp_27_reg_985;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ret_d0 = tmp_15_fu_518_p2;
    end else begin
        ret_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ret_d1 = tmp_32_reg_990;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        ret_d1 = tmp_21_fu_604_p2;
    end else begin
        ret_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        ret_we0 = 1'b1;
    end else begin
        ret_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5))) begin
        ret_we1 = 1'b1;
    end else begin
        ret_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        statemt_address0 = tmp_12_cast_reg_1029;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_address0 = tmp_2_cast_reg_1009;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address0 = tmp_14_cast_fu_381_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_address0 = tmp_5_cast_fu_321_p1;
    end else begin
        statemt_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        statemt_address1 = tmp_13_cast_reg_1039;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        statemt_address1 = tmp_4_cast_reg_1019;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        statemt_address1 = tmp_15_cast_fu_391_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        statemt_address1 = tmp_9_cast_fu_332_p1;
    end else begin
        statemt_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        statemt_ce0 = 1'b1;
    end else begin
        statemt_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        statemt_ce1 = 1'b1;
    end else begin
        statemt_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        statemt_we0 = 1'b1;
    end else begin
        statemt_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8))) begin
        statemt_we1 = 1'b1;
    end else begin
        statemt_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        word_address0 = tmp_39_cast_fu_405_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        word_address0 = tmp_16_cast_fu_342_p1;
    end else begin
        word_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        word_address1 = tmp_40_cast_fu_416_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        word_address1 = tmp_38_cast_fu_357_p1;
    end else begin
        word_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        word_ce0 = 1'b1;
    end else begin
        word_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3))) begin
        word_ce1 = 1'b1;
    end else begin
        word_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (exitcond1_fu_297_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (exitcond_fu_805_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign exitcond1_fu_297_p2 = ((j_reg_243 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_805_p2 = ((j_1_reg_254 == 3'd4) ? 1'b1 : 1'b0);

assign grp_fu_265_p4 = {{statemt_q0[30:7]}};

assign grp_fu_275_p4 = {{statemt_q1[30:7]}};

assign j_2_fu_811_p2 = (j_1_reg_254 + 3'd1);

assign j_3_fu_303_p2 = (j_reg_243 + 3'd1);

assign j_cast1_fu_293_p1 = j_reg_243;

assign p_mask1_fu_473_p3 = {{tmp_33_fu_463_p4}, {8'd0}};

assign p_mask2_fu_421_p3 = {{grp_fu_275_p4}, {8'd0}};

assign p_mask3_fu_560_p3 = {{tmp_39_fu_550_p4}, {8'd0}};

assign p_mask4_fu_611_p3 = {{grp_fu_265_p4}, {8'd0}};

assign p_mask5_fu_661_p3 = {{tmp_42_fu_651_p4}, {8'd0}};

assign p_mask6_fu_711_p3 = {{grp_fu_275_p4}, {8'd0}};

assign p_mask7_fu_754_p3 = {{tmp_44_fu_744_p4}, {8'd0}};

assign p_mask_fu_362_p3 = {{grp_fu_265_p4}, {8'd0}};

assign ret_load_1_fu_446_p3 = ((tmp_7_reg_927[0:0] === 1'b1) ? tmp_8_fu_440_p2 : tmp_18_fu_435_p2);

assign statemt_d0 = ret_q0;

assign statemt_d1 = ret_q1;

assign storemerge1_v_fu_774_p3 = ((tmp_30_fu_762_p2[0:0] === 1'b1) ? tmp_31_fu_768_p2 : x_7_fu_739_p2);

assign storemerge8_v_fu_580_p3 = ((tmp_19_fu_568_p2[0:0] === 1'b1) ? tmp_20_fu_574_p2 : x_3_fu_544_p2);

assign storemerge9_v_fu_681_p3 = ((tmp_25_fu_669_p2[0:0] === 1'b1) ? tmp_26_fu_675_p2 : x_5_fu_645_p2);

assign storemerge_v_fu_493_p3 = ((tmp_1_fu_481_p2[0:0] === 1'b1) ? tmp_3_fu_487_p2 : x_1_fu_458_p2);

assign tmp10_fu_782_p2 = (statemt_q0 ^ x_reg_932);

assign tmp11_fu_793_p2 = (tmp12_fu_787_p2 ^ word_q1);

assign tmp12_fu_787_p2 = (storemerge1_v_fu_774_p3 ^ tmp_43_tmp_s_fu_731_p3);

assign tmp1_fu_501_p2 = (statemt_q0 ^ statemt_q1);

assign tmp2_fu_513_p2 = (tmp3_fu_507_p2 ^ word_load_reg_970);

assign tmp3_fu_507_p2 = (ret_load_1_fu_446_p3 ^ storemerge_v_fu_493_p3);

assign tmp4_fu_588_p2 = (statemt_q1 ^ x_6_reg_919);

assign tmp5_fu_599_p2 = (tmp6_fu_593_p2 ^ word_load_1_reg_980);

assign tmp6_fu_593_p2 = (storemerge8_v_fu_580_p3 ^ tmp_23_tmp_s_fu_531_p3);

assign tmp7_fu_689_p2 = (x_reg_932 ^ x_6_reg_919);

assign tmp8_fu_699_p2 = (tmp9_fu_693_p2 ^ word_q0);

assign tmp9_fu_693_p2 = (storemerge9_v_fu_681_p3 ^ tmp_33_tmp_s_fu_631_p3);

assign tmp_10_fu_376_p2 = (tmp_5_reg_878 | 4'd2);

assign tmp_11_fu_386_p2 = (tmp_5_reg_878 | 4'd3);

assign tmp_12_cast_fu_850_p1 = tmp_12_fu_845_p2;

assign tmp_12_fu_845_p2 = (tmp_2_reg_1003 | 4'd2);

assign tmp_13_cast_fu_860_p1 = tmp_13_fu_855_p2;

assign tmp_13_fu_855_p2 = (tmp_2_reg_1003 | 4'd3);

assign tmp_14_cast_fu_381_p1 = tmp_10_fu_376_p2;

assign tmp_14_fu_337_p2 = (tmp_reg_865 + j_cast1_fu_293_p1);

assign tmp_15_cast_fu_391_p1 = tmp_11_fu_386_p2;

assign tmp_15_fu_518_p2 = (tmp2_fu_513_p2 ^ tmp1_fu_501_p2);

assign tmp_16_cast_cast1_fu_396_p1 = tmp_14_reg_904;

assign tmp_16_cast_cast_fu_347_p1 = tmp_14_fu_337_p2;

assign tmp_16_cast_fu_342_p1 = tmp_14_fu_337_p2;

assign tmp_16_fu_429_p2 = ((p_mask2_fu_421_p3 == 32'd256) ? 1'b1 : 1'b0);

assign tmp_17_fu_525_p2 = (tmp_24_fu_453_p2 ^ 32'd283);

assign tmp_18_fu_435_p2 = x_6_reg_919 << 32'd1;

assign tmp_19_fu_568_p2 = ((p_mask3_fu_560_p3 == 32'd256) ? 1'b1 : 1'b0);

assign tmp_1_fu_481_p2 = ((p_mask1_fu_473_p3 == 32'd256) ? 1'b1 : 1'b0);

assign tmp_20_fu_574_p2 = (x_3_fu_544_p2 ^ 32'd283);

assign tmp_21_fu_604_p2 = (tmp5_fu_599_p2 ^ tmp4_fu_588_p2);

assign tmp_22_fu_619_p2 = ((p_mask4_fu_611_p3 == 32'd256) ? 1'b1 : 1'b0);

assign tmp_23_fu_625_p2 = (tmp_38_fu_538_p2 ^ 32'd283);

assign tmp_23_tmp_s_fu_531_p3 = ((tmp_16_reg_975[0:0] === 1'b1) ? tmp_17_fu_525_p2 : tmp_24_fu_453_p2);

assign tmp_24_fu_453_p2 = x_reg_932 << 32'd1;

assign tmp_25_fu_669_p2 = ((p_mask5_fu_661_p3 == 32'd256) ? 1'b1 : 1'b0);

assign tmp_26_fu_675_p2 = (x_5_fu_645_p2 ^ 32'd283);

assign tmp_27_fu_705_p2 = (tmp8_fu_699_p2 ^ tmp7_fu_689_p2);

assign tmp_28_fu_719_p2 = ((p_mask6_fu_711_p3 == 32'd256) ? 1'b1 : 1'b0);

assign tmp_29_fu_725_p2 = (tmp_41_fu_639_p2 ^ 32'd283);

assign tmp_2_cast_fu_829_p1 = tmp_2_fu_821_p3;

assign tmp_2_fu_821_p3 = {{tmp_45_fu_817_p1}, {2'd0}};

assign tmp_30_fu_762_p2 = ((p_mask7_fu_754_p3 == 32'd256) ? 1'b1 : 1'b0);

assign tmp_31_fu_768_p2 = (x_7_fu_739_p2 ^ 32'd283);

assign tmp_32_fu_799_p2 = (tmp11_fu_793_p2 ^ tmp10_fu_782_p2);

assign tmp_33_fu_463_p4 = {{x_1_fu_458_p2[31:8]}};

assign tmp_33_tmp_s_fu_631_p3 = ((tmp_22_fu_619_p2[0:0] === 1'b1) ? tmp_23_fu_625_p2 : tmp_38_fu_538_p2);

assign tmp_34_fu_351_p2 = (8'd120 + tmp_16_cast_cast_fu_347_p1);

assign tmp_35_fu_399_p2 = (9'd240 + tmp_16_cast_cast1_fu_396_p1);

assign tmp_36_fu_410_p2 = ($signed(9'd360) + $signed(tmp_16_cast_cast1_fu_396_p1));

assign tmp_38_cast_fu_357_p1 = tmp_34_fu_351_p2;

assign tmp_38_fu_538_p2 = statemt_q0 << 32'd1;

assign tmp_39_cast_fu_405_p1 = tmp_35_fu_399_p2;

assign tmp_39_fu_550_p4 = {{x_3_fu_544_p2[31:8]}};

assign tmp_3_fu_487_p2 = (x_1_fu_458_p2 ^ 32'd283);

assign tmp_40_cast_fu_416_p1 = tmp_36_fu_410_p2;

assign tmp_41_fu_639_p2 = statemt_q1 << 32'd1;

assign tmp_42_fu_651_p4 = {{x_5_fu_645_p2[31:8]}};

assign tmp_43_tmp_s_fu_731_p3 = ((tmp_28_fu_719_p2[0:0] === 1'b1) ? tmp_29_fu_725_p2 : tmp_41_fu_639_p2);

assign tmp_44_fu_744_p4 = {{x_7_fu_739_p2[31:8]}};

assign tmp_45_fu_817_p1 = j_1_reg_254[1:0];

assign tmp_4_cast_fu_840_p1 = tmp_4_fu_834_p2;

assign tmp_4_fu_834_p2 = (tmp_2_fu_821_p3 | 4'd1);

assign tmp_5_cast_fu_321_p1 = tmp_5_fu_313_p3;

assign tmp_5_fu_313_p3 = {{tmp_6_fu_309_p1}, {2'd0}};

assign tmp_6_fu_309_p1 = j_reg_243[1:0];

assign tmp_7_fu_370_p2 = ((p_mask_fu_362_p3 == 32'd256) ? 1'b1 : 1'b0);

assign tmp_8_fu_440_p2 = (tmp_18_fu_435_p2 ^ 32'd283);

assign tmp_9_cast_fu_332_p1 = tmp_9_fu_326_p2;

assign tmp_9_fu_326_p2 = (tmp_5_fu_313_p3 | 4'd1);

assign tmp_fu_285_p3 = {{n}, {2'd0}};

assign x_1_fu_458_p2 = (x_reg_932 ^ tmp_24_fu_453_p2);

assign x_3_fu_544_p2 = (statemt_q0 ^ tmp_38_fu_538_p2);

assign x_5_fu_645_p2 = (statemt_q1 ^ tmp_41_fu_639_p2);

assign x_7_fu_739_p2 = (x_6_reg_919 ^ tmp_18_fu_435_p2);

always @ (posedge ap_clk) begin
    tmp_reg_865[1:0] <= 2'b00;
    tmp_5_reg_878[1:0] <= 2'b00;
    tmp_5_cast_reg_884[1:0] <= 2'b00;
    tmp_5_cast_reg_884[31:4] <= 28'b0000000000000000000000000000;
    tmp_9_cast_reg_894[1:0] <= 2'b01;
    tmp_9_cast_reg_894[31:4] <= 28'b0000000000000000000000000000;
    tmp_14_cast_reg_940[1:0] <= 2'b10;
    tmp_14_cast_reg_940[31:4] <= 28'b0000000000000000000000000000;
    tmp_15_cast_reg_950[1:0] <= 2'b11;
    tmp_15_cast_reg_950[31:4] <= 28'b0000000000000000000000000000;
    tmp_2_reg_1003[1:0] <= 2'b00;
    tmp_2_cast_reg_1009[1:0] <= 2'b00;
    tmp_2_cast_reg_1009[31:4] <= 28'b0000000000000000000000000000;
    tmp_4_cast_reg_1019[1:0] <= 2'b01;
    tmp_4_cast_reg_1019[31:4] <= 28'b0000000000000000000000000000;
    tmp_12_cast_reg_1029[1:0] <= 2'b10;
    tmp_12_cast_reg_1029[31:4] <= 28'b0000000000000000000000000000;
    tmp_13_cast_reg_1039[1:0] <= 2'b11;
    tmp_13_cast_reg_1039[31:4] <= 28'b0000000000000000000000000000;
end

endmodule //MixColumn_AddRoundKe
