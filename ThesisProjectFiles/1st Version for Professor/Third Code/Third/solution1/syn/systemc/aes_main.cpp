// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "aes_main.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic aes_main::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic aes_main::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<13> aes_main::ap_ST_fsm_state1 = "1";
const sc_lv<13> aes_main::ap_ST_fsm_state2 = "10";
const sc_lv<13> aes_main::ap_ST_fsm_state3 = "100";
const sc_lv<13> aes_main::ap_ST_fsm_state4 = "1000";
const sc_lv<13> aes_main::ap_ST_fsm_state5 = "10000";
const sc_lv<13> aes_main::ap_ST_fsm_state6 = "100000";
const sc_lv<13> aes_main::ap_ST_fsm_state7 = "1000000";
const sc_lv<13> aes_main::ap_ST_fsm_state8 = "10000000";
const sc_lv<13> aes_main::ap_ST_fsm_state9 = "100000000";
const sc_lv<13> aes_main::ap_ST_fsm_state10 = "1000000000";
const sc_lv<13> aes_main::ap_ST_fsm_state11 = "10000000000";
const sc_lv<13> aes_main::ap_ST_fsm_state12 = "100000000000";
const sc_lv<13> aes_main::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<32> aes_main::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> aes_main::ap_const_lv32_6 = "110";
const sc_lv<32> aes_main::ap_const_lv32_B = "1011";
const sc_lv<1> aes_main::ap_const_lv1_0 = "0";
const sc_lv<4> aes_main::ap_const_lv4_1 = "1";
const sc_lv<32> aes_main::ap_const_lv32_3 = "11";
const sc_lv<32> aes_main::ap_const_lv32_7 = "111";
const sc_lv<5> aes_main::ap_const_lv5_0 = "00000";
const sc_lv<32> aes_main::ap_const_lv32_A = "1010";
const sc_lv<32> aes_main::ap_const_lv32_C = "1100";
const sc_lv<32> aes_main::ap_const_lv32_1 = "1";
const sc_lv<32> aes_main::ap_const_lv32_4 = "100";
const sc_lv<1> aes_main::ap_const_lv1_1 = "1";
const sc_lv<32> aes_main::ap_const_lv32_5 = "101";
const sc_lv<32> aes_main::ap_const_lv32_8 = "1000";
const sc_lv<32> aes_main::ap_const_lv32_2 = "10";
const sc_lv<32> aes_main::ap_const_lv32_9 = "1001";
const sc_lv<6> aes_main::ap_const_lv6_0 = "000000";
const sc_lv<6> aes_main::ap_const_lv6_A = "1010";
const sc_lv<4> aes_main::ap_const_lv4_A = "1010";
const sc_lv<5> aes_main::ap_const_lv5_10 = "10000";
const sc_lv<5> aes_main::ap_const_lv5_1 = "1";
const bool aes_main::ap_const_boolean_1 = true;

aes_main::aes_main(sc_module_name name) : sc_module(name), mVcdFile(0) {
    word_U = new aes_main_word("word_U");
    word_U->clk(ap_clk);
    word_U->reset(ap_rst);
    word_U->address0(word_address0);
    word_U->ce0(word_ce0);
    word_U->we0(word_we0);
    word_U->d0(grp_KeySchedule_fu_106_word_d0);
    word_U->q0(word_q0);
    word_U->address1(word_address1);
    word_U->ce1(word_ce1);
    word_U->q1(word_q1);
    grp_MixColumn_AddRoundKe_fu_96 = new MixColumn_AddRoundKe("grp_MixColumn_AddRoundKe_fu_96");
    grp_MixColumn_AddRoundKe_fu_96->ap_clk(ap_clk);
    grp_MixColumn_AddRoundKe_fu_96->ap_rst(ap_rst);
    grp_MixColumn_AddRoundKe_fu_96->ap_start(grp_MixColumn_AddRoundKe_fu_96_ap_start);
    grp_MixColumn_AddRoundKe_fu_96->ap_done(grp_MixColumn_AddRoundKe_fu_96_ap_done);
    grp_MixColumn_AddRoundKe_fu_96->ap_idle(grp_MixColumn_AddRoundKe_fu_96_ap_idle);
    grp_MixColumn_AddRoundKe_fu_96->ap_ready(grp_MixColumn_AddRoundKe_fu_96_ap_ready);
    grp_MixColumn_AddRoundKe_fu_96->statemt_address0(grp_MixColumn_AddRoundKe_fu_96_statemt_address0);
    grp_MixColumn_AddRoundKe_fu_96->statemt_ce0(grp_MixColumn_AddRoundKe_fu_96_statemt_ce0);
    grp_MixColumn_AddRoundKe_fu_96->statemt_we0(grp_MixColumn_AddRoundKe_fu_96_statemt_we0);
    grp_MixColumn_AddRoundKe_fu_96->statemt_d0(grp_MixColumn_AddRoundKe_fu_96_statemt_d0);
    grp_MixColumn_AddRoundKe_fu_96->statemt_q0(statemt_q0);
    grp_MixColumn_AddRoundKe_fu_96->statemt_address1(grp_MixColumn_AddRoundKe_fu_96_statemt_address1);
    grp_MixColumn_AddRoundKe_fu_96->statemt_ce1(grp_MixColumn_AddRoundKe_fu_96_statemt_ce1);
    grp_MixColumn_AddRoundKe_fu_96->statemt_we1(grp_MixColumn_AddRoundKe_fu_96_statemt_we1);
    grp_MixColumn_AddRoundKe_fu_96->statemt_d1(grp_MixColumn_AddRoundKe_fu_96_statemt_d1);
    grp_MixColumn_AddRoundKe_fu_96->statemt_q1(statemt_q1);
    grp_MixColumn_AddRoundKe_fu_96->n(i_i_reg_73);
    grp_MixColumn_AddRoundKe_fu_96->word_address0(grp_MixColumn_AddRoundKe_fu_96_word_address0);
    grp_MixColumn_AddRoundKe_fu_96->word_ce0(grp_MixColumn_AddRoundKe_fu_96_word_ce0);
    grp_MixColumn_AddRoundKe_fu_96->word_q0(word_q0);
    grp_MixColumn_AddRoundKe_fu_96->word_address1(grp_MixColumn_AddRoundKe_fu_96_word_address1);
    grp_MixColumn_AddRoundKe_fu_96->word_ce1(grp_MixColumn_AddRoundKe_fu_96_word_ce1);
    grp_MixColumn_AddRoundKe_fu_96->word_q1(word_q1);
    grp_KeySchedule_fu_106 = new KeySchedule("grp_KeySchedule_fu_106");
    grp_KeySchedule_fu_106->ap_clk(ap_clk);
    grp_KeySchedule_fu_106->ap_rst(ap_rst);
    grp_KeySchedule_fu_106->ap_start(grp_KeySchedule_fu_106_ap_start);
    grp_KeySchedule_fu_106->ap_done(grp_KeySchedule_fu_106_ap_done);
    grp_KeySchedule_fu_106->ap_idle(grp_KeySchedule_fu_106_ap_idle);
    grp_KeySchedule_fu_106->ap_ready(grp_KeySchedule_fu_106_ap_ready);
    grp_KeySchedule_fu_106->key_address0(grp_KeySchedule_fu_106_key_address0);
    grp_KeySchedule_fu_106->key_ce0(grp_KeySchedule_fu_106_key_ce0);
    grp_KeySchedule_fu_106->key_q0(key_q0);
    grp_KeySchedule_fu_106->word_address0(grp_KeySchedule_fu_106_word_address0);
    grp_KeySchedule_fu_106->word_ce0(grp_KeySchedule_fu_106_word_ce0);
    grp_KeySchedule_fu_106->word_we0(grp_KeySchedule_fu_106_word_we0);
    grp_KeySchedule_fu_106->word_d0(grp_KeySchedule_fu_106_word_d0);
    grp_KeySchedule_fu_106->word_q0(word_q0);
    grp_KeySchedule_fu_106->word_address1(grp_KeySchedule_fu_106_word_address1);
    grp_KeySchedule_fu_106->word_ce1(grp_KeySchedule_fu_106_word_ce1);
    grp_KeySchedule_fu_106->word_q1(word_q1);
    grp_ByteSub_ShiftRow_fu_118 = new ByteSub_ShiftRow("grp_ByteSub_ShiftRow_fu_118");
    grp_ByteSub_ShiftRow_fu_118->ap_clk(ap_clk);
    grp_ByteSub_ShiftRow_fu_118->ap_rst(ap_rst);
    grp_ByteSub_ShiftRow_fu_118->ap_start(grp_ByteSub_ShiftRow_fu_118_ap_start);
    grp_ByteSub_ShiftRow_fu_118->ap_done(grp_ByteSub_ShiftRow_fu_118_ap_done);
    grp_ByteSub_ShiftRow_fu_118->ap_idle(grp_ByteSub_ShiftRow_fu_118_ap_idle);
    grp_ByteSub_ShiftRow_fu_118->ap_ready(grp_ByteSub_ShiftRow_fu_118_ap_ready);
    grp_ByteSub_ShiftRow_fu_118->statemt_address0(grp_ByteSub_ShiftRow_fu_118_statemt_address0);
    grp_ByteSub_ShiftRow_fu_118->statemt_ce0(grp_ByteSub_ShiftRow_fu_118_statemt_ce0);
    grp_ByteSub_ShiftRow_fu_118->statemt_we0(grp_ByteSub_ShiftRow_fu_118_statemt_we0);
    grp_ByteSub_ShiftRow_fu_118->statemt_d0(grp_ByteSub_ShiftRow_fu_118_statemt_d0);
    grp_ByteSub_ShiftRow_fu_118->statemt_q0(statemt_q0);
    grp_ByteSub_ShiftRow_fu_118->statemt_address1(grp_ByteSub_ShiftRow_fu_118_statemt_address1);
    grp_ByteSub_ShiftRow_fu_118->statemt_ce1(grp_ByteSub_ShiftRow_fu_118_statemt_ce1);
    grp_ByteSub_ShiftRow_fu_118->statemt_we1(grp_ByteSub_ShiftRow_fu_118_statemt_we1);
    grp_ByteSub_ShiftRow_fu_118->statemt_d1(grp_ByteSub_ShiftRow_fu_118_statemt_d1);
    grp_ByteSub_ShiftRow_fu_118->statemt_q1(statemt_q1);
    grp_AddRoundKey_fu_126 = new AddRoundKey("grp_AddRoundKey_fu_126");
    grp_AddRoundKey_fu_126->ap_clk(ap_clk);
    grp_AddRoundKey_fu_126->ap_rst(ap_rst);
    grp_AddRoundKey_fu_126->ap_start(grp_AddRoundKey_fu_126_ap_start);
    grp_AddRoundKey_fu_126->ap_done(grp_AddRoundKey_fu_126_ap_done);
    grp_AddRoundKey_fu_126->ap_idle(grp_AddRoundKey_fu_126_ap_idle);
    grp_AddRoundKey_fu_126->ap_ready(grp_AddRoundKey_fu_126_ap_ready);
    grp_AddRoundKey_fu_126->statemt_address0(grp_AddRoundKey_fu_126_statemt_address0);
    grp_AddRoundKey_fu_126->statemt_ce0(grp_AddRoundKey_fu_126_statemt_ce0);
    grp_AddRoundKey_fu_126->statemt_we0(grp_AddRoundKey_fu_126_statemt_we0);
    grp_AddRoundKey_fu_126->statemt_d0(grp_AddRoundKey_fu_126_statemt_d0);
    grp_AddRoundKey_fu_126->statemt_q0(statemt_q0);
    grp_AddRoundKey_fu_126->statemt_address1(grp_AddRoundKey_fu_126_statemt_address1);
    grp_AddRoundKey_fu_126->statemt_ce1(grp_AddRoundKey_fu_126_statemt_ce1);
    grp_AddRoundKey_fu_126->statemt_we1(grp_AddRoundKey_fu_126_statemt_we1);
    grp_AddRoundKey_fu_126->statemt_d1(grp_AddRoundKey_fu_126_statemt_d1);
    grp_AddRoundKey_fu_126->statemt_q1(statemt_q1);
    grp_AddRoundKey_fu_126->n(grp_AddRoundKey_fu_126_n);
    grp_AddRoundKey_fu_126->word_address0(grp_AddRoundKey_fu_126_word_address0);
    grp_AddRoundKey_fu_126->word_ce0(grp_AddRoundKey_fu_126_word_ce0);
    grp_AddRoundKey_fu_126->word_q0(word_q0);
    grp_AddRoundKey_fu_126->word_address1(grp_AddRoundKey_fu_126_word_address1);
    grp_AddRoundKey_fu_126->word_ce1(grp_AddRoundKey_fu_126_word_ce1);
    grp_AddRoundKey_fu_126->word_q1(word_q1);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( exitcond2_i_fu_154_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( exitcond2_i_fu_154_p2 );

    SC_METHOD(thread_exitcond2_i_fu_154_p2);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( i_1_i_reg_85 );

    SC_METHOD(thread_exitcond3_i_fu_137_p2);
    sensitive << ( i_i_reg_73 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_grp_AddRoundKey_fu_126_ap_start);
    sensitive << ( ap_reg_grp_AddRoundKey_fu_126_ap_start );

    SC_METHOD(thread_grp_AddRoundKey_fu_126_n);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_grp_ByteSub_ShiftRow_fu_118_ap_start);
    sensitive << ( ap_reg_grp_ByteSub_ShiftRow_fu_118_ap_start );

    SC_METHOD(thread_grp_KeySchedule_fu_106_ap_start);
    sensitive << ( ap_reg_grp_KeySchedule_fu_106_ap_start );

    SC_METHOD(thread_grp_MixColumn_AddRoundKe_fu_96_ap_start);
    sensitive << ( ap_reg_grp_MixColumn_AddRoundKe_fu_96_ap_start );

    SC_METHOD(thread_i_1_i_cast1_fu_149_p1);
    sensitive << ( i_1_i_reg_85 );

    SC_METHOD(thread_i_fu_160_p2);
    sensitive << ( i_1_i_reg_85 );

    SC_METHOD(thread_key_address0);
    sensitive << ( grp_KeySchedule_fu_106_key_address0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_key_ce0);
    sensitive << ( grp_KeySchedule_fu_106_key_ce0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_out_r_address0);
    sensitive << ( i_1_i_cast1_reg_174 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_out_r_ce0);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_out_r_d0);
    sensitive << ( statemt_q0 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_out_r_we0);
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_statemt_address0);
    sensitive << ( i_1_i_cast1_fu_149_p1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( grp_MixColumn_AddRoundKe_fu_96_statemt_address0 );
    sensitive << ( grp_ByteSub_ShiftRow_fu_118_statemt_address0 );
    sensitive << ( grp_AddRoundKey_fu_126_statemt_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_statemt_address1);
    sensitive << ( grp_MixColumn_AddRoundKe_fu_96_statemt_address1 );
    sensitive << ( grp_ByteSub_ShiftRow_fu_118_statemt_address1 );
    sensitive << ( grp_AddRoundKey_fu_126_statemt_address1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_statemt_ce0);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( grp_MixColumn_AddRoundKe_fu_96_statemt_ce0 );
    sensitive << ( grp_ByteSub_ShiftRow_fu_118_statemt_ce0 );
    sensitive << ( grp_AddRoundKey_fu_126_statemt_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_statemt_ce1);
    sensitive << ( grp_MixColumn_AddRoundKe_fu_96_statemt_ce1 );
    sensitive << ( grp_ByteSub_ShiftRow_fu_118_statemt_ce1 );
    sensitive << ( grp_AddRoundKey_fu_126_statemt_ce1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_statemt_d0);
    sensitive << ( grp_MixColumn_AddRoundKe_fu_96_statemt_d0 );
    sensitive << ( grp_ByteSub_ShiftRow_fu_118_statemt_d0 );
    sensitive << ( grp_AddRoundKey_fu_126_statemt_d0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_statemt_d1);
    sensitive << ( grp_MixColumn_AddRoundKe_fu_96_statemt_d1 );
    sensitive << ( grp_ByteSub_ShiftRow_fu_118_statemt_d1 );
    sensitive << ( grp_AddRoundKey_fu_126_statemt_d1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_statemt_we0);
    sensitive << ( grp_MixColumn_AddRoundKe_fu_96_statemt_we0 );
    sensitive << ( grp_ByteSub_ShiftRow_fu_118_statemt_we0 );
    sensitive << ( grp_AddRoundKey_fu_126_statemt_we0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_statemt_we1);
    sensitive << ( grp_MixColumn_AddRoundKe_fu_96_statemt_we1 );
    sensitive << ( grp_ByteSub_ShiftRow_fu_118_statemt_we1 );
    sensitive << ( grp_AddRoundKey_fu_126_statemt_we1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_METHOD(thread_tmp_i_fu_143_p2);
    sensitive << ( i_i_reg_73 );

    SC_METHOD(thread_word_address0);
    sensitive << ( grp_MixColumn_AddRoundKe_fu_96_word_address0 );
    sensitive << ( grp_KeySchedule_fu_106_word_address0 );
    sensitive << ( grp_AddRoundKey_fu_126_word_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_word_address1);
    sensitive << ( grp_MixColumn_AddRoundKe_fu_96_word_address1 );
    sensitive << ( grp_KeySchedule_fu_106_word_address1 );
    sensitive << ( grp_AddRoundKey_fu_126_word_address1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_word_ce0);
    sensitive << ( grp_MixColumn_AddRoundKe_fu_96_word_ce0 );
    sensitive << ( grp_KeySchedule_fu_106_word_ce0 );
    sensitive << ( grp_AddRoundKey_fu_126_word_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_word_ce1);
    sensitive << ( grp_MixColumn_AddRoundKe_fu_96_word_ce1 );
    sensitive << ( grp_KeySchedule_fu_106_word_ce1 );
    sensitive << ( grp_AddRoundKey_fu_126_word_ce1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_word_we0);
    sensitive << ( grp_KeySchedule_fu_106_word_we0 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( exitcond2_i_fu_154_p2 );
    sensitive << ( grp_MixColumn_AddRoundKe_fu_96_ap_done );
    sensitive << ( grp_KeySchedule_fu_106_ap_done );
    sensitive << ( grp_ByteSub_ShiftRow_fu_118_ap_done );
    sensitive << ( grp_AddRoundKey_fu_126_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( exitcond3_i_fu_137_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000000000001";
    ap_reg_grp_MixColumn_AddRoundKe_fu_96_ap_start = SC_LOGIC_0;
    ap_reg_grp_KeySchedule_fu_106_ap_start = SC_LOGIC_0;
    ap_reg_grp_ByteSub_ShiftRow_fu_118_ap_start = SC_LOGIC_0;
    ap_reg_grp_AddRoundKey_fu_126_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "aes_main_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, statemt_address0, "(port)statemt_address0");
    sc_trace(mVcdFile, statemt_ce0, "(port)statemt_ce0");
    sc_trace(mVcdFile, statemt_we0, "(port)statemt_we0");
    sc_trace(mVcdFile, statemt_d0, "(port)statemt_d0");
    sc_trace(mVcdFile, statemt_q0, "(port)statemt_q0");
    sc_trace(mVcdFile, statemt_address1, "(port)statemt_address1");
    sc_trace(mVcdFile, statemt_ce1, "(port)statemt_ce1");
    sc_trace(mVcdFile, statemt_we1, "(port)statemt_we1");
    sc_trace(mVcdFile, statemt_d1, "(port)statemt_d1");
    sc_trace(mVcdFile, statemt_q1, "(port)statemt_q1");
    sc_trace(mVcdFile, key_address0, "(port)key_address0");
    sc_trace(mVcdFile, key_ce0, "(port)key_ce0");
    sc_trace(mVcdFile, key_q0, "(port)key_q0");
    sc_trace(mVcdFile, out_r_address0, "(port)out_r_address0");
    sc_trace(mVcdFile, out_r_ce0, "(port)out_r_ce0");
    sc_trace(mVcdFile, out_r_we0, "(port)out_r_we0");
    sc_trace(mVcdFile, out_r_d0, "(port)out_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, word_address0, "word_address0");
    sc_trace(mVcdFile, word_ce0, "word_ce0");
    sc_trace(mVcdFile, word_we0, "word_we0");
    sc_trace(mVcdFile, word_q0, "word_q0");
    sc_trace(mVcdFile, word_address1, "word_address1");
    sc_trace(mVcdFile, word_ce1, "word_ce1");
    sc_trace(mVcdFile, word_q1, "word_q1");
    sc_trace(mVcdFile, tmp_i_fu_143_p2, "tmp_i_fu_143_p2");
    sc_trace(mVcdFile, tmp_i_reg_169, "tmp_i_reg_169");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, i_1_i_cast1_fu_149_p1, "i_1_i_cast1_fu_149_p1");
    sc_trace(mVcdFile, i_1_i_cast1_reg_174, "i_1_i_cast1_reg_174");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, i_fu_160_p2, "i_fu_160_p2");
    sc_trace(mVcdFile, i_reg_182, "i_reg_182");
    sc_trace(mVcdFile, exitcond2_i_fu_154_p2, "exitcond2_i_fu_154_p2");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_96_ap_start, "grp_MixColumn_AddRoundKe_fu_96_ap_start");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_96_ap_done, "grp_MixColumn_AddRoundKe_fu_96_ap_done");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_96_ap_idle, "grp_MixColumn_AddRoundKe_fu_96_ap_idle");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_96_ap_ready, "grp_MixColumn_AddRoundKe_fu_96_ap_ready");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_96_statemt_address0, "grp_MixColumn_AddRoundKe_fu_96_statemt_address0");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_96_statemt_ce0, "grp_MixColumn_AddRoundKe_fu_96_statemt_ce0");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_96_statemt_we0, "grp_MixColumn_AddRoundKe_fu_96_statemt_we0");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_96_statemt_d0, "grp_MixColumn_AddRoundKe_fu_96_statemt_d0");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_96_statemt_address1, "grp_MixColumn_AddRoundKe_fu_96_statemt_address1");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_96_statemt_ce1, "grp_MixColumn_AddRoundKe_fu_96_statemt_ce1");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_96_statemt_we1, "grp_MixColumn_AddRoundKe_fu_96_statemt_we1");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_96_statemt_d1, "grp_MixColumn_AddRoundKe_fu_96_statemt_d1");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_96_word_address0, "grp_MixColumn_AddRoundKe_fu_96_word_address0");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_96_word_ce0, "grp_MixColumn_AddRoundKe_fu_96_word_ce0");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_96_word_address1, "grp_MixColumn_AddRoundKe_fu_96_word_address1");
    sc_trace(mVcdFile, grp_MixColumn_AddRoundKe_fu_96_word_ce1, "grp_MixColumn_AddRoundKe_fu_96_word_ce1");
    sc_trace(mVcdFile, grp_KeySchedule_fu_106_ap_start, "grp_KeySchedule_fu_106_ap_start");
    sc_trace(mVcdFile, grp_KeySchedule_fu_106_ap_done, "grp_KeySchedule_fu_106_ap_done");
    sc_trace(mVcdFile, grp_KeySchedule_fu_106_ap_idle, "grp_KeySchedule_fu_106_ap_idle");
    sc_trace(mVcdFile, grp_KeySchedule_fu_106_ap_ready, "grp_KeySchedule_fu_106_ap_ready");
    sc_trace(mVcdFile, grp_KeySchedule_fu_106_key_address0, "grp_KeySchedule_fu_106_key_address0");
    sc_trace(mVcdFile, grp_KeySchedule_fu_106_key_ce0, "grp_KeySchedule_fu_106_key_ce0");
    sc_trace(mVcdFile, grp_KeySchedule_fu_106_word_address0, "grp_KeySchedule_fu_106_word_address0");
    sc_trace(mVcdFile, grp_KeySchedule_fu_106_word_ce0, "grp_KeySchedule_fu_106_word_ce0");
    sc_trace(mVcdFile, grp_KeySchedule_fu_106_word_we0, "grp_KeySchedule_fu_106_word_we0");
    sc_trace(mVcdFile, grp_KeySchedule_fu_106_word_d0, "grp_KeySchedule_fu_106_word_d0");
    sc_trace(mVcdFile, grp_KeySchedule_fu_106_word_address1, "grp_KeySchedule_fu_106_word_address1");
    sc_trace(mVcdFile, grp_KeySchedule_fu_106_word_ce1, "grp_KeySchedule_fu_106_word_ce1");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_118_ap_start, "grp_ByteSub_ShiftRow_fu_118_ap_start");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_118_ap_done, "grp_ByteSub_ShiftRow_fu_118_ap_done");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_118_ap_idle, "grp_ByteSub_ShiftRow_fu_118_ap_idle");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_118_ap_ready, "grp_ByteSub_ShiftRow_fu_118_ap_ready");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_118_statemt_address0, "grp_ByteSub_ShiftRow_fu_118_statemt_address0");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_118_statemt_ce0, "grp_ByteSub_ShiftRow_fu_118_statemt_ce0");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_118_statemt_we0, "grp_ByteSub_ShiftRow_fu_118_statemt_we0");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_118_statemt_d0, "grp_ByteSub_ShiftRow_fu_118_statemt_d0");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_118_statemt_address1, "grp_ByteSub_ShiftRow_fu_118_statemt_address1");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_118_statemt_ce1, "grp_ByteSub_ShiftRow_fu_118_statemt_ce1");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_118_statemt_we1, "grp_ByteSub_ShiftRow_fu_118_statemt_we1");
    sc_trace(mVcdFile, grp_ByteSub_ShiftRow_fu_118_statemt_d1, "grp_ByteSub_ShiftRow_fu_118_statemt_d1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_ap_start, "grp_AddRoundKey_fu_126_ap_start");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_ap_done, "grp_AddRoundKey_fu_126_ap_done");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_ap_idle, "grp_AddRoundKey_fu_126_ap_idle");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_ap_ready, "grp_AddRoundKey_fu_126_ap_ready");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_statemt_address0, "grp_AddRoundKey_fu_126_statemt_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_statemt_ce0, "grp_AddRoundKey_fu_126_statemt_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_statemt_we0, "grp_AddRoundKey_fu_126_statemt_we0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_statemt_d0, "grp_AddRoundKey_fu_126_statemt_d0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_statemt_address1, "grp_AddRoundKey_fu_126_statemt_address1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_statemt_ce1, "grp_AddRoundKey_fu_126_statemt_ce1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_statemt_we1, "grp_AddRoundKey_fu_126_statemt_we1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_statemt_d1, "grp_AddRoundKey_fu_126_statemt_d1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_n, "grp_AddRoundKey_fu_126_n");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_word_address0, "grp_AddRoundKey_fu_126_word_address0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_word_ce0, "grp_AddRoundKey_fu_126_word_ce0");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_word_address1, "grp_AddRoundKey_fu_126_word_address1");
    sc_trace(mVcdFile, grp_AddRoundKey_fu_126_word_ce1, "grp_AddRoundKey_fu_126_word_ce1");
    sc_trace(mVcdFile, i_i_reg_73, "i_i_reg_73");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, i_1_i_reg_85, "i_1_i_reg_85");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, ap_reg_grp_MixColumn_AddRoundKe_fu_96_ap_start, "ap_reg_grp_MixColumn_AddRoundKe_fu_96_ap_start");
    sc_trace(mVcdFile, ap_reg_grp_KeySchedule_fu_106_ap_start, "ap_reg_grp_KeySchedule_fu_106_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_reg_grp_ByteSub_ShiftRow_fu_118_ap_start, "ap_reg_grp_ByteSub_ShiftRow_fu_118_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, exitcond3_i_fu_137_p2, "exitcond3_i_fu_137_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_reg_grp_AddRoundKey_fu_126_ap_start, "ap_reg_grp_AddRoundKey_fu_126_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("aes_main.hdltvin.dat");
    mHdltvoutHandle.open("aes_main.hdltvout.dat");
}

aes_main::~aes_main() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete word_U;
    delete grp_MixColumn_AddRoundKe_fu_96;
    delete grp_KeySchedule_fu_106;
    delete grp_ByteSub_ShiftRow_fu_118;
    delete grp_AddRoundKey_fu_126;
}

void aes_main::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_AddRoundKey_fu_126_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
             esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()))) {
            ap_reg_grp_AddRoundKey_fu_126_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_AddRoundKey_fu_126_ap_ready.read())) {
            ap_reg_grp_AddRoundKey_fu_126_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_ByteSub_ShiftRow_fu_118_ap_start = ap_const_logic_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
              esl_seteq<1,1,1>(ap_const_lv1_0, exitcond3_i_fu_137_p2.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
              esl_seteq<1,1,1>(exitcond3_i_fu_137_p2.read(), ap_const_lv1_1)))) {
            ap_reg_grp_ByteSub_ShiftRow_fu_118_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_ByteSub_ShiftRow_fu_118_ap_ready.read())) {
            ap_reg_grp_ByteSub_ShiftRow_fu_118_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_KeySchedule_fu_106_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            ap_reg_grp_KeySchedule_fu_106_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_KeySchedule_fu_106_ap_ready.read())) {
            ap_reg_grp_KeySchedule_fu_106_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_MixColumn_AddRoundKe_fu_96_ap_start = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
            ap_reg_grp_MixColumn_AddRoundKe_fu_96_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_MixColumn_AddRoundKe_fu_96_ap_ready.read())) {
            ap_reg_grp_MixColumn_AddRoundKe_fu_96_ap_start = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        i_1_i_reg_85 = i_reg_182.read();
    } else if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_126_ap_done.read(), ap_const_logic_1) && 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        i_1_i_reg_85 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(grp_MixColumn_AddRoundKe_fu_96_ap_done.read(), ap_const_logic_1))) {
        i_i_reg_73 = tmp_i_reg_169.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(grp_AddRoundKey_fu_126_ap_done.read(), ap_const_logic_1))) {
        i_i_reg_73 = ap_const_lv4_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        i_1_i_cast1_reg_174 = i_1_i_cast1_fu_149_p1.read();
        i_reg_182 = i_fu_160_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        tmp_i_reg_169 = tmp_i_fu_143_p2.read();
    }
}

void aes_main::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void aes_main::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void aes_main::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void aes_main::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void aes_main::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void aes_main::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void aes_main::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void aes_main::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void aes_main::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void aes_main::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void aes_main::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void aes_main::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void aes_main::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void aes_main::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(exitcond2_i_fu_154_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void aes_main::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void aes_main::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && 
         esl_seteq<1,1,1>(exitcond2_i_fu_154_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void aes_main::thread_exitcond2_i_fu_154_p2() {
    exitcond2_i_fu_154_p2 = (!i_1_i_reg_85.read().is_01() || !ap_const_lv5_10.is_01())? sc_lv<1>(): sc_lv<1>(i_1_i_reg_85.read() == ap_const_lv5_10);
}

void aes_main::thread_exitcond3_i_fu_137_p2() {
    exitcond3_i_fu_137_p2 = (!i_i_reg_73.read().is_01() || !ap_const_lv4_A.is_01())? sc_lv<1>(): sc_lv<1>(i_i_reg_73.read() == ap_const_lv4_A);
}

void aes_main::thread_grp_AddRoundKey_fu_126_ap_start() {
    grp_AddRoundKey_fu_126_ap_start = ap_reg_grp_AddRoundKey_fu_126_ap_start.read();
}

void aes_main::thread_grp_AddRoundKey_fu_126_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        grp_AddRoundKey_fu_126_n = ap_const_lv6_A;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        grp_AddRoundKey_fu_126_n = ap_const_lv6_0;
    } else {
        grp_AddRoundKey_fu_126_n =  (sc_lv<6>) ("XXXXXX");
    }
}

void aes_main::thread_grp_ByteSub_ShiftRow_fu_118_ap_start() {
    grp_ByteSub_ShiftRow_fu_118_ap_start = ap_reg_grp_ByteSub_ShiftRow_fu_118_ap_start.read();
}

void aes_main::thread_grp_KeySchedule_fu_106_ap_start() {
    grp_KeySchedule_fu_106_ap_start = ap_reg_grp_KeySchedule_fu_106_ap_start.read();
}

void aes_main::thread_grp_MixColumn_AddRoundKe_fu_96_ap_start() {
    grp_MixColumn_AddRoundKe_fu_96_ap_start = ap_reg_grp_MixColumn_AddRoundKe_fu_96_ap_start.read();
}

void aes_main::thread_i_1_i_cast1_fu_149_p1() {
    i_1_i_cast1_fu_149_p1 = esl_zext<32,5>(i_1_i_reg_85.read());
}

void aes_main::thread_i_fu_160_p2() {
    i_fu_160_p2 = (!i_1_i_reg_85.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_1_i_reg_85.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void aes_main::thread_key_address0() {
    key_address0 = grp_KeySchedule_fu_106_key_address0.read();
}

void aes_main::thread_key_ce0() {
    key_ce0 = grp_KeySchedule_fu_106_key_ce0.read();
}

void aes_main::thread_out_r_address0() {
    out_r_address0 =  (sc_lv<5>) (i_1_i_cast1_reg_174.read());
}

void aes_main::thread_out_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        out_r_ce0 = ap_const_logic_1;
    } else {
        out_r_ce0 = ap_const_logic_0;
    }
}

void aes_main::thread_out_r_d0() {
    out_r_d0 = statemt_q0.read();
}

void aes_main::thread_out_r_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        out_r_we0 = ap_const_logic_1;
    } else {
        out_r_we0 = ap_const_logic_0;
    }
}

void aes_main::thread_statemt_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_address0 =  (sc_lv<5>) (i_1_i_cast1_fu_149_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        statemt_address0 = grp_AddRoundKey_fu_126_statemt_address0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        statemt_address0 = grp_ByteSub_ShiftRow_fu_118_statemt_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_address0 = grp_MixColumn_AddRoundKe_fu_96_statemt_address0.read();
    } else {
        statemt_address0 =  (sc_lv<5>) ("XXXXX");
    }
}

void aes_main::thread_statemt_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        statemt_address1 = grp_AddRoundKey_fu_126_statemt_address1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        statemt_address1 = grp_ByteSub_ShiftRow_fu_118_statemt_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_address1 = grp_MixColumn_AddRoundKe_fu_96_statemt_address1.read();
    } else {
        statemt_address1 =  (sc_lv<5>) ("XXXXX");
    }
}

void aes_main::thread_statemt_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        statemt_ce0 = ap_const_logic_1;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        statemt_ce0 = grp_AddRoundKey_fu_126_statemt_ce0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        statemt_ce0 = grp_ByteSub_ShiftRow_fu_118_statemt_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_ce0 = grp_MixColumn_AddRoundKe_fu_96_statemt_ce0.read();
    } else {
        statemt_ce0 = ap_const_logic_0;
    }
}

void aes_main::thread_statemt_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        statemt_ce1 = grp_AddRoundKey_fu_126_statemt_ce1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        statemt_ce1 = grp_ByteSub_ShiftRow_fu_118_statemt_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_ce1 = grp_MixColumn_AddRoundKe_fu_96_statemt_ce1.read();
    } else {
        statemt_ce1 = ap_const_logic_0;
    }
}

void aes_main::thread_statemt_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        statemt_d0 = grp_AddRoundKey_fu_126_statemt_d0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        statemt_d0 = grp_ByteSub_ShiftRow_fu_118_statemt_d0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_d0 = grp_MixColumn_AddRoundKe_fu_96_statemt_d0.read();
    } else {
        statemt_d0 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_statemt_d1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        statemt_d1 = grp_AddRoundKey_fu_126_statemt_d1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        statemt_d1 = grp_ByteSub_ShiftRow_fu_118_statemt_d1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_d1 = grp_MixColumn_AddRoundKe_fu_96_statemt_d1.read();
    } else {
        statemt_d1 =  (sc_lv<32>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
    }
}

void aes_main::thread_statemt_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        statemt_we0 = grp_AddRoundKey_fu_126_statemt_we0.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        statemt_we0 = grp_ByteSub_ShiftRow_fu_118_statemt_we0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_we0 = grp_MixColumn_AddRoundKe_fu_96_statemt_we0.read();
    } else {
        statemt_we0 = ap_const_logic_0;
    }
}

void aes_main::thread_statemt_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        statemt_we1 = grp_AddRoundKey_fu_126_statemt_we1.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()))) {
        statemt_we1 = grp_ByteSub_ShiftRow_fu_118_statemt_we1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        statemt_we1 = grp_MixColumn_AddRoundKe_fu_96_statemt_we1.read();
    } else {
        statemt_we1 = ap_const_logic_0;
    }
}

void aes_main::thread_tmp_i_fu_143_p2() {
    tmp_i_fu_143_p2 = (!i_i_reg_73.read().is_01() || !ap_const_lv4_1.is_01())? sc_lv<4>(): (sc_biguint<4>(i_i_reg_73.read()) + sc_biguint<4>(ap_const_lv4_1));
}

void aes_main::thread_word_address0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        word_address0 = grp_AddRoundKey_fu_126_word_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        word_address0 = grp_KeySchedule_fu_106_word_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        word_address0 = grp_MixColumn_AddRoundKe_fu_96_word_address0.read();
    } else {
        word_address0 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void aes_main::thread_word_address1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        word_address1 = grp_AddRoundKey_fu_126_word_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        word_address1 = grp_KeySchedule_fu_106_word_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        word_address1 = grp_MixColumn_AddRoundKe_fu_96_word_address1.read();
    } else {
        word_address1 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void aes_main::thread_word_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        word_ce0 = grp_AddRoundKey_fu_126_word_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        word_ce0 = grp_KeySchedule_fu_106_word_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        word_ce0 = grp_MixColumn_AddRoundKe_fu_96_word_ce0.read();
    } else {
        word_ce0 = ap_const_logic_0;
    }
}

void aes_main::thread_word_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
        word_ce1 = grp_AddRoundKey_fu_126_word_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        word_ce1 = grp_KeySchedule_fu_106_word_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        word_ce1 = grp_MixColumn_AddRoundKe_fu_96_word_ce1.read();
    } else {
        word_ce1 = ap_const_logic_0;
    }
}

void aes_main::thread_word_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        word_we0 = grp_KeySchedule_fu_106_word_we0.read();
    } else {
        word_we0 = ap_const_logic_0;
    }
}

void aes_main::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(grp_KeySchedule_fu_106_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(grp_AddRoundKey_fu_126_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(exitcond3_i_fu_137_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_ByteSub_ShiftRow_fu_118_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(grp_MixColumn_AddRoundKe_fu_96_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(grp_ByteSub_ShiftRow_fu_118_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state10;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(grp_AddRoundKey_fu_126_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(exitcond2_i_fu_154_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<13>) ("XXXXXXXXXXXXX");
            break;
    }
}

void aes_main::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"statemt_address0\" :  \"" << statemt_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"statemt_ce0\" :  \"" << statemt_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"statemt_we0\" :  \"" << statemt_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"statemt_d0\" :  \"" << statemt_d0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"statemt_q0\" :  \"" << statemt_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"statemt_address1\" :  \"" << statemt_address1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"statemt_ce1\" :  \"" << statemt_ce1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"statemt_we1\" :  \"" << statemt_we1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"statemt_d1\" :  \"" << statemt_d1.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"statemt_q1\" :  \"" << statemt_q1.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_address0\" :  \"" << key_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"key_ce0\" :  \"" << key_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"key_q0\" :  \"" << key_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_address0\" :  \"" << out_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_ce0\" :  \"" << out_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_we0\" :  \"" << out_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_d0\" :  \"" << out_r_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

