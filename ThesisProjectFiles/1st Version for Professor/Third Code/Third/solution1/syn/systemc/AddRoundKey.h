// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _AddRoundKey_HH_
#define _AddRoundKey_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct AddRoundKey : public sc_module {
    // Port declarations 23
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<5> > statemt_address0;
    sc_out< sc_logic > statemt_ce0;
    sc_out< sc_logic > statemt_we0;
    sc_out< sc_lv<32> > statemt_d0;
    sc_in< sc_lv<32> > statemt_q0;
    sc_out< sc_lv<5> > statemt_address1;
    sc_out< sc_logic > statemt_ce1;
    sc_out< sc_logic > statemt_we1;
    sc_out< sc_lv<32> > statemt_d1;
    sc_in< sc_lv<32> > statemt_q1;
    sc_in< sc_lv<6> > n;
    sc_out< sc_lv<9> > word_address0;
    sc_out< sc_logic > word_ce0;
    sc_in< sc_lv<32> > word_q0;
    sc_out< sc_lv<9> > word_address1;
    sc_out< sc_logic > word_ce1;
    sc_in< sc_lv<32> > word_q1;


    // Module declarations
    AddRoundKey(sc_module_name name);
    SC_HAS_PROCESS(AddRoundKey);

    ~AddRoundKey();

    sc_trace_file* mVcdFile;

    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > grp_fu_133_p2;
    sc_signal< sc_lv<32> > reg_145;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<32> > grp_fu_139_p2;
    sc_signal< sc_lv<32> > reg_150;
    sc_signal< sc_lv<6> > tmp_fu_155_p2;
    sc_signal< sc_lv<6> > tmp_reg_275;
    sc_signal< sc_lv<3> > j_6_fu_171_p2;
    sc_signal< sc_lv<3> > j_6_reg_283;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > tmp_s_fu_177_p2;
    sc_signal< sc_lv<6> > tmp_s_reg_288;
    sc_signal< sc_lv<1> > exitcond_fu_165_p2;
    sc_signal< sc_lv<4> > tmp_37_fu_206_p3;
    sc_signal< sc_lv<4> > tmp_37_reg_303;
    sc_signal< sc_lv<5> > statemt_addr_reg_309;
    sc_signal< sc_lv<5> > statemt_addr_23_reg_314;
    sc_signal< sc_lv<5> > statemt_addr_24_reg_329;
    sc_signal< sc_lv<5> > statemt_addr_25_reg_334;
    sc_signal< sc_lv<3> > j_reg_122;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<32> > tmp_cast_fu_182_p1;
    sc_signal< sc_lv<32> > tmp_99_cast_fu_197_p1;
    sc_signal< sc_lv<32> > tmp_84_cast_fu_214_p1;
    sc_signal< sc_lv<32> > tmp_86_cast_fu_225_p1;
    sc_signal< sc_lv<32> > tmp_100_cast_fu_239_p1;
    sc_signal< sc_lv<32> > tmp_101_cast_fu_250_p1;
    sc_signal< sc_lv<32> > tmp_88_cast_fu_260_p1;
    sc_signal< sc_lv<32> > tmp_90_cast_fu_270_p1;
    sc_signal< sc_lv<6> > j_cast1_fu_161_p1;
    sc_signal< sc_lv<8> > tmp_cast_cast_fu_187_p1;
    sc_signal< sc_lv<8> > tmp_98_fu_191_p2;
    sc_signal< sc_lv<2> > tmp_104_fu_202_p1;
    sc_signal< sc_lv<4> > tmp_39_fu_219_p2;
    sc_signal< sc_lv<9> > tmp_cast_cast1_fu_230_p1;
    sc_signal< sc_lv<9> > tmp_99_fu_233_p2;
    sc_signal< sc_lv<9> > tmp_100_fu_244_p2;
    sc_signal< sc_lv<4> > tmp_41_fu_255_p2;
    sc_signal< sc_lv<4> > tmp_43_fu_265_p2;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<6> ap_const_lv6_2;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<8> ap_const_lv8_78;
    static const sc_lv<2> ap_const_lv2_0;
    static const sc_lv<4> ap_const_lv4_1;
    static const sc_lv<9> ap_const_lv9_F0;
    static const sc_lv<9> ap_const_lv9_168;
    static const sc_lv<4> ap_const_lv4_2;
    static const sc_lv<4> ap_const_lv4_3;
    static const sc_lv<1> ap_const_lv1_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_exitcond_fu_165_p2();
    void thread_grp_fu_133_p2();
    void thread_grp_fu_139_p2();
    void thread_j_6_fu_171_p2();
    void thread_j_cast1_fu_161_p1();
    void thread_statemt_address0();
    void thread_statemt_address1();
    void thread_statemt_ce0();
    void thread_statemt_ce1();
    void thread_statemt_d0();
    void thread_statemt_d1();
    void thread_statemt_we0();
    void thread_statemt_we1();
    void thread_tmp_100_cast_fu_239_p1();
    void thread_tmp_100_fu_244_p2();
    void thread_tmp_101_cast_fu_250_p1();
    void thread_tmp_104_fu_202_p1();
    void thread_tmp_37_fu_206_p3();
    void thread_tmp_39_fu_219_p2();
    void thread_tmp_41_fu_255_p2();
    void thread_tmp_43_fu_265_p2();
    void thread_tmp_84_cast_fu_214_p1();
    void thread_tmp_86_cast_fu_225_p1();
    void thread_tmp_88_cast_fu_260_p1();
    void thread_tmp_90_cast_fu_270_p1();
    void thread_tmp_98_fu_191_p2();
    void thread_tmp_99_cast_fu_197_p1();
    void thread_tmp_99_fu_233_p2();
    void thread_tmp_cast_cast1_fu_230_p1();
    void thread_tmp_cast_cast_fu_187_p1();
    void thread_tmp_cast_fu_182_p1();
    void thread_tmp_fu_155_p2();
    void thread_tmp_s_fu_177_p2();
    void thread_word_address0();
    void thread_word_address1();
    void thread_word_ce0();
    void thread_word_ce1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
