// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "AddRoundKey.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic AddRoundKey::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic AddRoundKey::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<5> AddRoundKey::ap_ST_fsm_state1 = "1";
const sc_lv<5> AddRoundKey::ap_ST_fsm_state2 = "10";
const sc_lv<5> AddRoundKey::ap_ST_fsm_state3 = "100";
const sc_lv<5> AddRoundKey::ap_ST_fsm_state4 = "1000";
const sc_lv<5> AddRoundKey::ap_ST_fsm_state5 = "10000";
const sc_lv<32> AddRoundKey::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> AddRoundKey::ap_const_lv32_2 = "10";
const sc_lv<32> AddRoundKey::ap_const_lv32_3 = "11";
const sc_lv<32> AddRoundKey::ap_const_lv32_1 = "1";
const sc_lv<1> AddRoundKey::ap_const_lv1_0 = "0";
const sc_lv<3> AddRoundKey::ap_const_lv3_0 = "000";
const sc_lv<32> AddRoundKey::ap_const_lv32_4 = "100";
const sc_lv<6> AddRoundKey::ap_const_lv6_2 = "10";
const sc_lv<3> AddRoundKey::ap_const_lv3_4 = "100";
const sc_lv<3> AddRoundKey::ap_const_lv3_1 = "1";
const sc_lv<8> AddRoundKey::ap_const_lv8_78 = "1111000";
const sc_lv<2> AddRoundKey::ap_const_lv2_0 = "00";
const sc_lv<4> AddRoundKey::ap_const_lv4_1 = "1";
const sc_lv<9> AddRoundKey::ap_const_lv9_F0 = "11110000";
const sc_lv<9> AddRoundKey::ap_const_lv9_168 = "101101000";
const sc_lv<4> AddRoundKey::ap_const_lv4_2 = "10";
const sc_lv<4> AddRoundKey::ap_const_lv4_3 = "11";
const sc_lv<1> AddRoundKey::ap_const_lv1_1 = "1";
const bool AddRoundKey::ap_const_boolean_1 = true;

AddRoundKey::AddRoundKey(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_165_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_165_p2 );

    SC_METHOD(thread_exitcond_fu_165_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( j_reg_122 );

    SC_METHOD(thread_grp_fu_133_p2);
    sensitive << ( statemt_q0 );
    sensitive << ( word_q0 );

    SC_METHOD(thread_grp_fu_139_p2);
    sensitive << ( statemt_q1 );
    sensitive << ( word_q1 );

    SC_METHOD(thread_j_6_fu_171_p2);
    sensitive << ( j_reg_122 );

    SC_METHOD(thread_j_cast1_fu_161_p1);
    sensitive << ( j_reg_122 );

    SC_METHOD(thread_statemt_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( statemt_addr_reg_309 );
    sensitive << ( statemt_addr_24_reg_329 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_84_cast_fu_214_p1 );
    sensitive << ( tmp_88_cast_fu_260_p1 );

    SC_METHOD(thread_statemt_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( statemt_addr_23_reg_314 );
    sensitive << ( statemt_addr_25_reg_334 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( tmp_86_cast_fu_225_p1 );
    sensitive << ( tmp_90_cast_fu_270_p1 );

    SC_METHOD(thread_statemt_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_statemt_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_statemt_d0);
    sensitive << ( reg_145 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_statemt_d1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( reg_150 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_statemt_we0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_statemt_we1);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_tmp_100_cast_fu_239_p1);
    sensitive << ( tmp_99_fu_233_p2 );

    SC_METHOD(thread_tmp_100_fu_244_p2);
    sensitive << ( tmp_cast_cast1_fu_230_p1 );

    SC_METHOD(thread_tmp_101_cast_fu_250_p1);
    sensitive << ( tmp_100_fu_244_p2 );

    SC_METHOD(thread_tmp_104_fu_202_p1);
    sensitive << ( j_reg_122 );

    SC_METHOD(thread_tmp_37_fu_206_p3);
    sensitive << ( tmp_104_fu_202_p1 );

    SC_METHOD(thread_tmp_39_fu_219_p2);
    sensitive << ( tmp_37_fu_206_p3 );

    SC_METHOD(thread_tmp_41_fu_255_p2);
    sensitive << ( tmp_37_reg_303 );

    SC_METHOD(thread_tmp_43_fu_265_p2);
    sensitive << ( tmp_37_reg_303 );

    SC_METHOD(thread_tmp_84_cast_fu_214_p1);
    sensitive << ( tmp_37_fu_206_p3 );

    SC_METHOD(thread_tmp_86_cast_fu_225_p1);
    sensitive << ( tmp_39_fu_219_p2 );

    SC_METHOD(thread_tmp_88_cast_fu_260_p1);
    sensitive << ( tmp_41_fu_255_p2 );

    SC_METHOD(thread_tmp_90_cast_fu_270_p1);
    sensitive << ( tmp_43_fu_265_p2 );

    SC_METHOD(thread_tmp_98_fu_191_p2);
    sensitive << ( tmp_cast_cast_fu_187_p1 );

    SC_METHOD(thread_tmp_99_cast_fu_197_p1);
    sensitive << ( tmp_98_fu_191_p2 );

    SC_METHOD(thread_tmp_99_fu_233_p2);
    sensitive << ( tmp_cast_cast1_fu_230_p1 );

    SC_METHOD(thread_tmp_cast_cast1_fu_230_p1);
    sensitive << ( tmp_s_reg_288 );

    SC_METHOD(thread_tmp_cast_cast_fu_187_p1);
    sensitive << ( tmp_s_fu_177_p2 );

    SC_METHOD(thread_tmp_cast_fu_182_p1);
    sensitive << ( tmp_s_fu_177_p2 );

    SC_METHOD(thread_tmp_fu_155_p2);
    sensitive << ( n );

    SC_METHOD(thread_tmp_s_fu_177_p2);
    sensitive << ( tmp_reg_275 );
    sensitive << ( j_cast1_fu_161_p1 );

    SC_METHOD(thread_word_address0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_cast_fu_182_p1 );
    sensitive << ( tmp_100_cast_fu_239_p1 );

    SC_METHOD(thread_word_address1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_99_cast_fu_197_p1 );
    sensitive << ( tmp_101_cast_fu_250_p1 );

    SC_METHOD(thread_word_ce0);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_word_ce1);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state2 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond_fu_165_p2 );

    ap_CS_fsm = "00001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "AddRoundKey_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, statemt_address0, "(port)statemt_address0");
    sc_trace(mVcdFile, statemt_ce0, "(port)statemt_ce0");
    sc_trace(mVcdFile, statemt_we0, "(port)statemt_we0");
    sc_trace(mVcdFile, statemt_d0, "(port)statemt_d0");
    sc_trace(mVcdFile, statemt_q0, "(port)statemt_q0");
    sc_trace(mVcdFile, statemt_address1, "(port)statemt_address1");
    sc_trace(mVcdFile, statemt_ce1, "(port)statemt_ce1");
    sc_trace(mVcdFile, statemt_we1, "(port)statemt_we1");
    sc_trace(mVcdFile, statemt_d1, "(port)statemt_d1");
    sc_trace(mVcdFile, statemt_q1, "(port)statemt_q1");
    sc_trace(mVcdFile, n, "(port)n");
    sc_trace(mVcdFile, word_address0, "(port)word_address0");
    sc_trace(mVcdFile, word_ce0, "(port)word_ce0");
    sc_trace(mVcdFile, word_q0, "(port)word_q0");
    sc_trace(mVcdFile, word_address1, "(port)word_address1");
    sc_trace(mVcdFile, word_ce1, "(port)word_ce1");
    sc_trace(mVcdFile, word_q1, "(port)word_q1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_fu_133_p2, "grp_fu_133_p2");
    sc_trace(mVcdFile, reg_145, "reg_145");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_fu_139_p2, "grp_fu_139_p2");
    sc_trace(mVcdFile, reg_150, "reg_150");
    sc_trace(mVcdFile, tmp_fu_155_p2, "tmp_fu_155_p2");
    sc_trace(mVcdFile, tmp_reg_275, "tmp_reg_275");
    sc_trace(mVcdFile, j_6_fu_171_p2, "j_6_fu_171_p2");
    sc_trace(mVcdFile, j_6_reg_283, "j_6_reg_283");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_s_fu_177_p2, "tmp_s_fu_177_p2");
    sc_trace(mVcdFile, tmp_s_reg_288, "tmp_s_reg_288");
    sc_trace(mVcdFile, exitcond_fu_165_p2, "exitcond_fu_165_p2");
    sc_trace(mVcdFile, tmp_37_fu_206_p3, "tmp_37_fu_206_p3");
    sc_trace(mVcdFile, tmp_37_reg_303, "tmp_37_reg_303");
    sc_trace(mVcdFile, statemt_addr_reg_309, "statemt_addr_reg_309");
    sc_trace(mVcdFile, statemt_addr_23_reg_314, "statemt_addr_23_reg_314");
    sc_trace(mVcdFile, statemt_addr_24_reg_329, "statemt_addr_24_reg_329");
    sc_trace(mVcdFile, statemt_addr_25_reg_334, "statemt_addr_25_reg_334");
    sc_trace(mVcdFile, j_reg_122, "j_reg_122");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, tmp_cast_fu_182_p1, "tmp_cast_fu_182_p1");
    sc_trace(mVcdFile, tmp_99_cast_fu_197_p1, "tmp_99_cast_fu_197_p1");
    sc_trace(mVcdFile, tmp_84_cast_fu_214_p1, "tmp_84_cast_fu_214_p1");
    sc_trace(mVcdFile, tmp_86_cast_fu_225_p1, "tmp_86_cast_fu_225_p1");
    sc_trace(mVcdFile, tmp_100_cast_fu_239_p1, "tmp_100_cast_fu_239_p1");
    sc_trace(mVcdFile, tmp_101_cast_fu_250_p1, "tmp_101_cast_fu_250_p1");
    sc_trace(mVcdFile, tmp_88_cast_fu_260_p1, "tmp_88_cast_fu_260_p1");
    sc_trace(mVcdFile, tmp_90_cast_fu_270_p1, "tmp_90_cast_fu_270_p1");
    sc_trace(mVcdFile, j_cast1_fu_161_p1, "j_cast1_fu_161_p1");
    sc_trace(mVcdFile, tmp_cast_cast_fu_187_p1, "tmp_cast_cast_fu_187_p1");
    sc_trace(mVcdFile, tmp_98_fu_191_p2, "tmp_98_fu_191_p2");
    sc_trace(mVcdFile, tmp_104_fu_202_p1, "tmp_104_fu_202_p1");
    sc_trace(mVcdFile, tmp_39_fu_219_p2, "tmp_39_fu_219_p2");
    sc_trace(mVcdFile, tmp_cast_cast1_fu_230_p1, "tmp_cast_cast1_fu_230_p1");
    sc_trace(mVcdFile, tmp_99_fu_233_p2, "tmp_99_fu_233_p2");
    sc_trace(mVcdFile, tmp_100_fu_244_p2, "tmp_100_fu_244_p2");
    sc_trace(mVcdFile, tmp_41_fu_255_p2, "tmp_41_fu_255_p2");
    sc_trace(mVcdFile, tmp_43_fu_265_p2, "tmp_43_fu_265_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

AddRoundKey::~AddRoundKey() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

}

void AddRoundKey::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        j_reg_122 = j_6_reg_283.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        j_reg_122 = ap_const_lv3_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        j_6_reg_283 = j_6_fu_171_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
        reg_145 = grp_fu_133_p2.read();
        reg_150 = grp_fu_139_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_165_p2.read(), ap_const_lv1_0))) {
        statemt_addr_23_reg_314 =  (sc_lv<5>) (tmp_86_cast_fu_225_p1.read());
        statemt_addr_reg_309 =  (sc_lv<5>) (tmp_84_cast_fu_214_p1.read());
        tmp_37_reg_303 = tmp_37_fu_206_p3.read();
        tmp_s_reg_288 = tmp_s_fu_177_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        statemt_addr_24_reg_329 =  (sc_lv<5>) (tmp_88_cast_fu_260_p1.read());
        statemt_addr_25_reg_334 =  (sc_lv<5>) (tmp_90_cast_fu_270_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        tmp_reg_275 = tmp_fu_155_p2.read();
    }
}

void AddRoundKey::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void AddRoundKey::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void AddRoundKey::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void AddRoundKey::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void AddRoundKey::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void AddRoundKey::thread_ap_done() {
    if (((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
          esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
          esl_seteq<1,1,1>(exitcond_fu_165_p2.read(), ap_const_lv1_1)))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(exitcond_fu_165_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void AddRoundKey::thread_exitcond_fu_165_p2() {
    exitcond_fu_165_p2 = (!j_reg_122.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(j_reg_122.read() == ap_const_lv3_4);
}

void AddRoundKey::thread_grp_fu_133_p2() {
    grp_fu_133_p2 = (statemt_q0.read() ^ word_q0.read());
}

void AddRoundKey::thread_grp_fu_139_p2() {
    grp_fu_139_p2 = (statemt_q1.read() ^ word_q1.read());
}

void AddRoundKey::thread_j_6_fu_171_p2() {
    j_6_fu_171_p2 = (!j_reg_122.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(j_reg_122.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void AddRoundKey::thread_j_cast1_fu_161_p1() {
    j_cast1_fu_161_p1 = esl_zext<6,3>(j_reg_122.read());
}

void AddRoundKey::thread_statemt_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        statemt_address0 = statemt_addr_24_reg_329.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        statemt_address0 = statemt_addr_reg_309.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        statemt_address0 =  (sc_lv<5>) (tmp_88_cast_fu_260_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        statemt_address0 =  (sc_lv<5>) (tmp_84_cast_fu_214_p1.read());
    } else {
        statemt_address0 = "XXXXX";
    }
}

void AddRoundKey::thread_statemt_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        statemt_address1 = statemt_addr_25_reg_334.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        statemt_address1 = statemt_addr_23_reg_314.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        statemt_address1 =  (sc_lv<5>) (tmp_90_cast_fu_270_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        statemt_address1 =  (sc_lv<5>) (tmp_86_cast_fu_225_p1.read());
    } else {
        statemt_address1 = "XXXXX";
    }
}

void AddRoundKey::thread_statemt_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        statemt_ce0 = ap_const_logic_1;
    } else {
        statemt_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_statemt_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        statemt_ce1 = ap_const_logic_1;
    } else {
        statemt_ce1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_statemt_d0() {
    statemt_d0 = reg_145.read();
}

void AddRoundKey::thread_statemt_d1() {
    statemt_d1 = reg_150.read();
}

void AddRoundKey::thread_statemt_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        statemt_we0 = ap_const_logic_1;
    } else {
        statemt_we0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_statemt_we1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()))) {
        statemt_we1 = ap_const_logic_1;
    } else {
        statemt_we1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_tmp_100_cast_fu_239_p1() {
    tmp_100_cast_fu_239_p1 = esl_zext<32,9>(tmp_99_fu_233_p2.read());
}

void AddRoundKey::thread_tmp_100_fu_244_p2() {
    tmp_100_fu_244_p2 = (!ap_const_lv9_168.is_01() || !tmp_cast_cast1_fu_230_p1.read().is_01())? sc_lv<9>(): (sc_bigint<9>(ap_const_lv9_168) + sc_biguint<9>(tmp_cast_cast1_fu_230_p1.read()));
}

void AddRoundKey::thread_tmp_101_cast_fu_250_p1() {
    tmp_101_cast_fu_250_p1 = esl_zext<32,9>(tmp_100_fu_244_p2.read());
}

void AddRoundKey::thread_tmp_104_fu_202_p1() {
    tmp_104_fu_202_p1 = j_reg_122.read().range(2-1, 0);
}

void AddRoundKey::thread_tmp_37_fu_206_p3() {
    tmp_37_fu_206_p3 = esl_concat<2,2>(tmp_104_fu_202_p1.read(), ap_const_lv2_0);
}

void AddRoundKey::thread_tmp_39_fu_219_p2() {
    tmp_39_fu_219_p2 = (tmp_37_fu_206_p3.read() | ap_const_lv4_1);
}

void AddRoundKey::thread_tmp_41_fu_255_p2() {
    tmp_41_fu_255_p2 = (tmp_37_reg_303.read() | ap_const_lv4_2);
}

void AddRoundKey::thread_tmp_43_fu_265_p2() {
    tmp_43_fu_265_p2 = (tmp_37_reg_303.read() | ap_const_lv4_3);
}

void AddRoundKey::thread_tmp_84_cast_fu_214_p1() {
    tmp_84_cast_fu_214_p1 = esl_zext<32,4>(tmp_37_fu_206_p3.read());
}

void AddRoundKey::thread_tmp_86_cast_fu_225_p1() {
    tmp_86_cast_fu_225_p1 = esl_zext<32,4>(tmp_39_fu_219_p2.read());
}

void AddRoundKey::thread_tmp_88_cast_fu_260_p1() {
    tmp_88_cast_fu_260_p1 = esl_zext<32,4>(tmp_41_fu_255_p2.read());
}

void AddRoundKey::thread_tmp_90_cast_fu_270_p1() {
    tmp_90_cast_fu_270_p1 = esl_zext<32,4>(tmp_43_fu_265_p2.read());
}

void AddRoundKey::thread_tmp_98_fu_191_p2() {
    tmp_98_fu_191_p2 = (!ap_const_lv8_78.is_01() || !tmp_cast_cast_fu_187_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(ap_const_lv8_78) + sc_biguint<8>(tmp_cast_cast_fu_187_p1.read()));
}

void AddRoundKey::thread_tmp_99_cast_fu_197_p1() {
    tmp_99_cast_fu_197_p1 = esl_zext<32,8>(tmp_98_fu_191_p2.read());
}

void AddRoundKey::thread_tmp_99_fu_233_p2() {
    tmp_99_fu_233_p2 = (!ap_const_lv9_F0.is_01() || !tmp_cast_cast1_fu_230_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(ap_const_lv9_F0) + sc_biguint<9>(tmp_cast_cast1_fu_230_p1.read()));
}

void AddRoundKey::thread_tmp_cast_cast1_fu_230_p1() {
    tmp_cast_cast1_fu_230_p1 = esl_zext<9,6>(tmp_s_reg_288.read());
}

void AddRoundKey::thread_tmp_cast_cast_fu_187_p1() {
    tmp_cast_cast_fu_187_p1 = esl_zext<8,6>(tmp_s_fu_177_p2.read());
}

void AddRoundKey::thread_tmp_cast_fu_182_p1() {
    tmp_cast_fu_182_p1 = esl_zext<32,6>(tmp_s_fu_177_p2.read());
}

void AddRoundKey::thread_tmp_fu_155_p2() {
    tmp_fu_155_p2 = (!ap_const_lv6_2.is_01())? sc_lv<6>(): n.read() << (unsigned short)ap_const_lv6_2.to_uint();
}

void AddRoundKey::thread_tmp_s_fu_177_p2() {
    tmp_s_fu_177_p2 = (!j_cast1_fu_161_p1.read().is_01() || !tmp_reg_275.read().is_01())? sc_lv<6>(): (sc_biguint<6>(j_cast1_fu_161_p1.read()) + sc_biguint<6>(tmp_reg_275.read()));
}

void AddRoundKey::thread_word_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        word_address0 =  (sc_lv<9>) (tmp_100_cast_fu_239_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        word_address0 =  (sc_lv<9>) (tmp_cast_fu_182_p1.read());
    } else {
        word_address0 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void AddRoundKey::thread_word_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        word_address1 =  (sc_lv<9>) (tmp_101_cast_fu_250_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        word_address1 =  (sc_lv<9>) (tmp_99_cast_fu_197_p1.read());
    } else {
        word_address1 =  (sc_lv<9>) ("XXXXXXXXX");
    }
}

void AddRoundKey::thread_word_ce0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        word_ce0 = ap_const_logic_1;
    } else {
        word_ce0 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_word_ce1() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
        word_ce1 = ap_const_logic_1;
    } else {
        word_ce1 = ap_const_logic_0;
    }
}

void AddRoundKey::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(exitcond_fu_165_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXX";
            break;
    }
}

}

