// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="Cipher,hls_ip_2017_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7eg-ffvf1517-1l-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.046750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=2728,HLS_SYN_LUT=3055}" *)

module Cipher (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        Nr,
        Nk,
        out_r_address0,
        out_r_ce0,
        out_r_we0,
        out_r_d0
);

parameter    ap_ST_fsm_state1 = 45'd1;
parameter    ap_ST_fsm_state2 = 45'd2;
parameter    ap_ST_fsm_state3 = 45'd4;
parameter    ap_ST_fsm_state4 = 45'd8;
parameter    ap_ST_fsm_state5 = 45'd16;
parameter    ap_ST_fsm_state6 = 45'd32;
parameter    ap_ST_fsm_state7 = 45'd64;
parameter    ap_ST_fsm_state8 = 45'd128;
parameter    ap_ST_fsm_state9 = 45'd256;
parameter    ap_ST_fsm_state10 = 45'd512;
parameter    ap_ST_fsm_state11 = 45'd1024;
parameter    ap_ST_fsm_state12 = 45'd2048;
parameter    ap_ST_fsm_state13 = 45'd4096;
parameter    ap_ST_fsm_state14 = 45'd8192;
parameter    ap_ST_fsm_state15 = 45'd16384;
parameter    ap_ST_fsm_state16 = 45'd32768;
parameter    ap_ST_fsm_state17 = 45'd65536;
parameter    ap_ST_fsm_state18 = 45'd131072;
parameter    ap_ST_fsm_state19 = 45'd262144;
parameter    ap_ST_fsm_state20 = 45'd524288;
parameter    ap_ST_fsm_state21 = 45'd1048576;
parameter    ap_ST_fsm_state22 = 45'd2097152;
parameter    ap_ST_fsm_state23 = 45'd4194304;
parameter    ap_ST_fsm_state24 = 45'd8388608;
parameter    ap_ST_fsm_state25 = 45'd16777216;
parameter    ap_ST_fsm_state26 = 45'd33554432;
parameter    ap_ST_fsm_state27 = 45'd67108864;
parameter    ap_ST_fsm_state28 = 45'd134217728;
parameter    ap_ST_fsm_state29 = 45'd268435456;
parameter    ap_ST_fsm_state30 = 45'd536870912;
parameter    ap_ST_fsm_state31 = 45'd1073741824;
parameter    ap_ST_fsm_state32 = 45'd2147483648;
parameter    ap_ST_fsm_state33 = 45'd4294967296;
parameter    ap_ST_fsm_state34 = 45'd8589934592;
parameter    ap_ST_fsm_state35 = 45'd17179869184;
parameter    ap_ST_fsm_state36 = 45'd34359738368;
parameter    ap_ST_fsm_state37 = 45'd68719476736;
parameter    ap_ST_fsm_state38 = 45'd137438953472;
parameter    ap_ST_fsm_state39 = 45'd274877906944;
parameter    ap_ST_fsm_state40 = 45'd549755813888;
parameter    ap_ST_fsm_state41 = 45'd1099511627776;
parameter    ap_ST_fsm_state42 = 45'd2199023255552;
parameter    ap_ST_fsm_state43 = 45'd4398046511104;
parameter    ap_ST_fsm_state44 = 45'd8796093022208;
parameter    ap_ST_fsm_state45 = 45'd17592186044416;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] Nr;
input  [31:0] Nk;
output  [3:0] out_r_address0;
output   out_r_ce0;
output   out_r_we0;
output  [7:0] out_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg out_r_ce0;
reg out_r_we0;

(* fsm_encoding = "none" *) reg   [44:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [3:0] temp1_address0;
reg    temp1_ce0;
wire   [3:0] temp1_q0;
wire   [3:0] temp22_address0;
reg    temp22_ce0;
wire   [7:0] temp22_q0;
wire   [7:0] state_q0;
reg   [7:0] reg_442;
wire    ap_CS_fsm_state12;
wire   [7:0] state_q1;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state30;
reg   [7:0] reg_448;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state35;
reg   [7:0] reg_455;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state31;
reg   [7:0] reg_462;
reg   [7:0] reg_467;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state32;
reg   [7:0] reg_472;
reg   [7:0] reg_477;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state33;
reg   [7:0] reg_482;
reg   [7:0] reg_487;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state34;
reg   [7:0] reg_492;
wire   [31:0] tmp_fu_497_p2;
reg   [31:0] tmp_reg_1008;
wire   [31:0] i_cast_fu_503_p1;
reg   [31:0] i_cast_reg_1013;
wire    ap_CS_fsm_state2;
wire   [30:0] i_3_fu_514_p2;
reg   [30:0] i_3_reg_1022;
wire   [0:0] tmp_s_fu_509_p2;
wire   [5:0] i_1_cast1_cast_fu_520_p1;
reg   [5:0] i_1_cast1_cast_reg_1037;
wire    ap_CS_fsm_state5;
wire   [2:0] i_4_fu_530_p2;
reg   [2:0] i_4_reg_1045;
wire   [3:0] tmp_27_fu_540_p3;
reg   [3:0] tmp_27_reg_1050;
wire   [0:0] exitcond3_fu_524_p2;
reg   [3:0] state_addr_12_reg_1055;
wire    ap_CS_fsm_state6;
wire   [2:0] j_3_fu_580_p2;
reg   [2:0] j_3_reg_1063;
wire   [0:0] exitcond2_fu_574_p2;
wire   [31:0] round_cast_fu_596_p1;
reg   [31:0] round_cast_reg_1073;
wire    ap_CS_fsm_state9;
reg   [3:0] state_addr_13_reg_1081;
wire    ap_CS_fsm_state23;
reg   [3:0] state_addr_14_reg_1086;
reg   [3:0] state_addr_15_reg_1091;
reg   [3:0] state_addr_16_reg_1096;
wire   [2:0] i_5_fu_655_p2;
reg   [2:0] i_5_reg_1104;
wire   [30:0] round_1_fu_661_p2;
reg   [30:0] round_1_reg_1109;
wire   [0:0] exitcond_i_fu_649_p2;
wire   [7:0] tmp_13_i_fu_813_p2;
reg   [7:0] tmp_13_i_reg_1114;
wire    ap_CS_fsm_state25;
wire   [7:0] tmp_18_i_fu_853_p2;
reg   [7:0] tmp_18_i_reg_1119;
wire   [5:0] i_2_cast9_cast_fu_859_p1;
reg   [5:0] i_2_cast9_cast_reg_1124;
wire    ap_CS_fsm_state43;
wire   [2:0] i_6_fu_869_p2;
reg   [2:0] i_6_reg_1132;
wire   [3:0] tmp_30_fu_879_p3;
reg   [3:0] tmp_30_reg_1137;
wire   [0:0] exitcond1_fu_863_p2;
wire    ap_CS_fsm_state44;
wire   [2:0] j_4_fu_919_p2;
reg   [2:0] j_4_reg_1150;
wire   [3:0] sum_fu_925_p2;
reg   [3:0] sum_reg_1155;
wire   [0:0] exitcond_fu_913_p2;
reg   [3:0] state_address0;
reg    state_ce0;
reg    state_we0;
reg   [7:0] state_d0;
reg   [3:0] state_address1;
reg    state_ce1;
reg    state_we1;
reg   [7:0] state_d1;
reg   [7:0] RoundKey_address0;
reg    RoundKey_ce0;
reg    RoundKey_we0;
wire   [7:0] RoundKey_q0;
reg    RoundKey_ce1;
reg    RoundKey_we1;
wire   [7:0] RoundKey_q1;
reg   [4:0] Key_address0;
reg    Key_ce0;
reg    Key_we0;
wire   [3:0] Key_q0;
reg    Key_ce1;
wire   [3:0] Key_q1;
reg   [3:0] in_address0;
reg    in_ce0;
reg    in_we0;
wire   [7:0] in_q0;
wire    grp_KeyExpansion_fu_415_ap_start;
wire    grp_KeyExpansion_fu_415_ap_done;
wire    grp_KeyExpansion_fu_415_ap_idle;
wire    grp_KeyExpansion_fu_415_ap_ready;
wire   [7:0] grp_KeyExpansion_fu_415_RoundKey_address0;
wire    grp_KeyExpansion_fu_415_RoundKey_ce0;
wire    grp_KeyExpansion_fu_415_RoundKey_we0;
wire   [7:0] grp_KeyExpansion_fu_415_RoundKey_d0;
wire   [7:0] grp_KeyExpansion_fu_415_RoundKey_address1;
wire    grp_KeyExpansion_fu_415_RoundKey_ce1;
wire    grp_KeyExpansion_fu_415_RoundKey_we1;
wire   [7:0] grp_KeyExpansion_fu_415_RoundKey_d1;
wire   [4:0] grp_KeyExpansion_fu_415_Key_address0;
wire    grp_KeyExpansion_fu_415_Key_ce0;
wire   [4:0] grp_KeyExpansion_fu_415_Key_address1;
wire    grp_KeyExpansion_fu_415_Key_ce1;
wire    grp_AddRoundKey_fu_427_ap_start;
wire    grp_AddRoundKey_fu_427_ap_done;
wire    grp_AddRoundKey_fu_427_ap_idle;
wire    grp_AddRoundKey_fu_427_ap_ready;
reg   [31:0] grp_AddRoundKey_fu_427_round;
wire   [3:0] grp_AddRoundKey_fu_427_state_address0;
wire    grp_AddRoundKey_fu_427_state_ce0;
wire    grp_AddRoundKey_fu_427_state_we0;
wire   [7:0] grp_AddRoundKey_fu_427_state_d0;
wire   [7:0] grp_AddRoundKey_fu_427_RoundKey_address0;
wire    grp_AddRoundKey_fu_427_RoundKey_ce0;
wire    grp_SubBytes_fu_435_ap_start;
wire    grp_SubBytes_fu_435_ap_done;
wire    grp_SubBytes_fu_435_ap_idle;
wire    grp_SubBytes_fu_435_ap_ready;
wire   [3:0] grp_SubBytes_fu_435_state_address0;
wire    grp_SubBytes_fu_435_state_ce0;
wire    grp_SubBytes_fu_435_state_we0;
wire   [7:0] grp_SubBytes_fu_435_state_d0;
reg   [30:0] i_reg_337;
wire    ap_CS_fsm_state3;
reg   [2:0] i_1_reg_348;
wire    ap_CS_fsm_state4;
reg   [2:0] j_reg_359;
wire    ap_CS_fsm_state7;
reg   [30:0] round_reg_370;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state27;
reg   [2:0] i_i_reg_382;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state26;
reg   [2:0] i_2_reg_393;
wire    ap_CS_fsm_state42;
reg   [2:0] j_1_reg_404;
wire    ap_CS_fsm_state45;
reg    ap_reg_grp_KeyExpansion_fu_415_ap_start;
reg    ap_reg_grp_AddRoundKey_fu_427_ap_start;
wire    ap_CS_fsm_state41;
reg    ap_reg_grp_SubBytes_fu_435_ap_start;
wire   [0:0] tmp_28_fu_600_p2;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state28;
wire   [31:0] tmp_36_cast_fu_565_p1;
wire   [31:0] tmp_42_cast_fu_591_p1;
wire   [31:0] i_i_cast_fu_605_p1;
wire   [31:0] tmp_37_cast_fu_624_p1;
wire   [31:0] tmp_35_fu_629_p3;
wire   [31:0] tmp_39_cast_fu_644_p1;
wire   [31:0] tmp_47_cast_fu_904_p1;
wire   [31:0] sum_cast_fu_930_p1;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire   [7:0] tmp_9_i_fu_719_p2;
wire   [7:0] tmp_4_i_fu_766_p2;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire   [1:0] tmp_33_fu_536_p1;
wire   [4:0] tmp_31_fu_548_p3;
wire   [5:0] tmp_35_cast_fu_556_p1;
wire   [5:0] tmp_32_fu_560_p2;
wire   [3:0] j_cast_fu_570_p1;
wire   [3:0] tmp_29_fu_586_p2;
wire   [3:0] i_i_cast_cast_fu_614_p1;
wire   [3:0] tmp_34_fu_618_p2;
wire   [4:0] i_i_cast_cast1_fu_610_p1;
wire   [4:0] tmp_36_fu_638_p2;
wire   [7:0] Tm_fu_667_p2;
wire   [7:0] Tm_4_fu_673_p2;
wire   [0:0] tmp_38_fu_691_p3;
wire   [7:0] tmp_37_fu_685_p2;
wire   [7:0] tmp_7_i_cast_cast_fu_699_p3;
wire   [7:0] Tmp_fu_679_p2;
wire   [7:0] tmp2_fu_713_p2;
wire   [7:0] tmp1_fu_707_p2;
wire   [7:0] Tm_1_fu_726_p2;
wire   [0:0] tmp_40_fu_738_p3;
wire   [7:0] tmp_39_fu_732_p2;
wire   [7:0] tmp_2_i_cast_cast_fu_746_p3;
wire   [7:0] tmp4_fu_760_p2;
wire   [7:0] tmp3_fu_754_p2;
wire   [7:0] Tm_2_fu_773_p2;
wire   [0:0] tmp_42_fu_785_p3;
wire   [7:0] tmp_41_fu_779_p2;
wire   [7:0] tmp_11_i_cast_cast_fu_793_p3;
wire   [7:0] tmp6_fu_807_p2;
wire   [7:0] tmp5_fu_801_p2;
wire   [7:0] Tm_3_fu_819_p2;
wire   [0:0] tmp_44_fu_831_p3;
wire   [7:0] tmp_16_i_cast_cast_fu_839_p3;
wire   [7:0] tmp7_fu_847_p2;
wire   [7:0] tmp_43_fu_825_p2;
wire   [1:0] tmp_46_fu_875_p1;
wire   [4:0] tmp_45_fu_887_p3;
wire   [5:0] tmp_46_cast_fu_895_p1;
wire   [5:0] tmp_47_fu_899_p2;
wire   [3:0] j_1_cast_fu_909_p1;
reg   [44:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 45'd1;
#0 ap_reg_grp_KeyExpansion_fu_415_ap_start = 1'b0;
#0 ap_reg_grp_AddRoundKey_fu_427_ap_start = 1'b0;
#0 ap_reg_grp_SubBytes_fu_435_ap_start = 1'b0;
end

Cipher_temp1 #(
    .DataWidth( 4 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
temp1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp1_address0),
    .ce0(temp1_ce0),
    .q0(temp1_q0)
);

Cipher_temp22 #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
temp22_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(temp22_address0),
    .ce0(temp22_ce0),
    .q0(temp22_q0)
);

Cipher_state #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
state_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(state_address0),
    .ce0(state_ce0),
    .we0(state_we0),
    .d0(state_d0),
    .q0(state_q0),
    .address1(state_address1),
    .ce1(state_ce1),
    .we1(state_we1),
    .d1(state_d1),
    .q1(state_q1)
);

Cipher_RoundKey #(
    .DataWidth( 8 ),
    .AddressRange( 240 ),
    .AddressWidth( 8 ))
RoundKey_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(RoundKey_address0),
    .ce0(RoundKey_ce0),
    .we0(RoundKey_we0),
    .d0(grp_KeyExpansion_fu_415_RoundKey_d0),
    .q0(RoundKey_q0),
    .address1(grp_KeyExpansion_fu_415_RoundKey_address1),
    .ce1(RoundKey_ce1),
    .we1(RoundKey_we1),
    .d1(grp_KeyExpansion_fu_415_RoundKey_d1),
    .q1(RoundKey_q1)
);

Cipher_Key #(
    .DataWidth( 4 ),
    .AddressRange( 32 ),
    .AddressWidth( 5 ))
Key_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(Key_address0),
    .ce0(Key_ce0),
    .we0(Key_we0),
    .d0(temp1_q0),
    .q0(Key_q0),
    .address1(grp_KeyExpansion_fu_415_Key_address1),
    .ce1(Key_ce1),
    .q1(Key_q1)
);

Cipher_in #(
    .DataWidth( 8 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
in_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(in_address0),
    .ce0(in_ce0),
    .we0(in_we0),
    .d0(temp22_q0),
    .q0(in_q0)
);

KeyExpansion grp_KeyExpansion_fu_415(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_KeyExpansion_fu_415_ap_start),
    .ap_done(grp_KeyExpansion_fu_415_ap_done),
    .ap_idle(grp_KeyExpansion_fu_415_ap_idle),
    .ap_ready(grp_KeyExpansion_fu_415_ap_ready),
    .RoundKey_address0(grp_KeyExpansion_fu_415_RoundKey_address0),
    .RoundKey_ce0(grp_KeyExpansion_fu_415_RoundKey_ce0),
    .RoundKey_we0(grp_KeyExpansion_fu_415_RoundKey_we0),
    .RoundKey_d0(grp_KeyExpansion_fu_415_RoundKey_d0),
    .RoundKey_q0(RoundKey_q0),
    .RoundKey_address1(grp_KeyExpansion_fu_415_RoundKey_address1),
    .RoundKey_ce1(grp_KeyExpansion_fu_415_RoundKey_ce1),
    .RoundKey_we1(grp_KeyExpansion_fu_415_RoundKey_we1),
    .RoundKey_d1(grp_KeyExpansion_fu_415_RoundKey_d1),
    .RoundKey_q1(RoundKey_q1),
    .Key_address0(grp_KeyExpansion_fu_415_Key_address0),
    .Key_ce0(grp_KeyExpansion_fu_415_Key_ce0),
    .Key_q0(Key_q0),
    .Key_address1(grp_KeyExpansion_fu_415_Key_address1),
    .Key_ce1(grp_KeyExpansion_fu_415_Key_ce1),
    .Key_q1(Key_q1),
    .Nk(Nk),
    .Nr(Nr)
);

AddRoundKey grp_AddRoundKey_fu_427(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_AddRoundKey_fu_427_ap_start),
    .ap_done(grp_AddRoundKey_fu_427_ap_done),
    .ap_idle(grp_AddRoundKey_fu_427_ap_idle),
    .ap_ready(grp_AddRoundKey_fu_427_ap_ready),
    .round(grp_AddRoundKey_fu_427_round),
    .state_address0(grp_AddRoundKey_fu_427_state_address0),
    .state_ce0(grp_AddRoundKey_fu_427_state_ce0),
    .state_we0(grp_AddRoundKey_fu_427_state_we0),
    .state_d0(grp_AddRoundKey_fu_427_state_d0),
    .state_q0(state_q0),
    .RoundKey_address0(grp_AddRoundKey_fu_427_RoundKey_address0),
    .RoundKey_ce0(grp_AddRoundKey_fu_427_RoundKey_ce0),
    .RoundKey_q0(RoundKey_q0)
);

SubBytes grp_SubBytes_fu_435(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_SubBytes_fu_435_ap_start),
    .ap_done(grp_SubBytes_fu_435_ap_done),
    .ap_idle(grp_SubBytes_fu_435_ap_idle),
    .ap_ready(grp_SubBytes_fu_435_ap_ready),
    .state_address0(grp_SubBytes_fu_435_state_address0),
    .state_ce0(grp_SubBytes_fu_435_state_ce0),
    .state_we0(grp_SubBytes_fu_435_state_we0),
    .state_d0(grp_SubBytes_fu_435_state_d0),
    .state_q0(state_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_AddRoundKey_fu_427_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state23) & (1'd1 == exitcond_i_fu_649_p2)) | ((1'b1 == ap_CS_fsm_state5) & (1'd1 == exitcond3_fu_524_p2)) | (1'b1 == ap_CS_fsm_state41))) begin
            ap_reg_grp_AddRoundKey_fu_427_ap_start <= 1'b1;
        end else if ((1'b1 == grp_AddRoundKey_fu_427_ap_ready)) begin
            ap_reg_grp_AddRoundKey_fu_427_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_KeyExpansion_fu_415_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_509_p2 == 1'd0))) begin
            ap_reg_grp_KeyExpansion_fu_415_ap_start <= 1'b1;
        end else if ((1'b1 == grp_KeyExpansion_fu_415_ap_ready)) begin
            ap_reg_grp_KeyExpansion_fu_415_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_grp_SubBytes_fu_435_ap_start <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state9) & (1'd1 == tmp_28_fu_600_p2)) | ((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_28_fu_600_p2)))) begin
            ap_reg_grp_SubBytes_fu_435_ap_start <= 1'b1;
        end else if ((1'b1 == grp_SubBytes_fu_435_ap_ready)) begin
            ap_reg_grp_SubBytes_fu_435_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond2_fu_574_p2))) begin
        i_1_reg_348 <= i_4_reg_1045;
    end else if (((1'b1 == ap_CS_fsm_state4) & (grp_KeyExpansion_fu_415_ap_done == 1'b1))) begin
        i_1_reg_348 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (1'd1 == exitcond_fu_913_p2))) begin
        i_2_reg_393 <= i_6_reg_1132;
    end else if (((grp_AddRoundKey_fu_427_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
        i_2_reg_393 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        i_i_reg_382 <= i_5_reg_1104;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        i_i_reg_382 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_337 <= i_3_reg_1022;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_337 <= 31'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (1'd0 == exitcond1_fu_863_p2))) begin
        j_1_reg_404 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        j_1_reg_404 <= j_4_reg_1150;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond3_fu_524_p2 == 1'd0))) begin
        j_reg_359 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        j_reg_359 <= j_3_reg_1063;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_442 <= state_q1;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        reg_442 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state30))) begin
        reg_448 <= state_q0;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35))) begin
        reg_448 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35))) begin
        reg_455 <= state_q0;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_455 <= state_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((grp_AddRoundKey_fu_427_ap_done == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state27)) begin
            round_reg_370 <= round_1_reg_1109;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            round_reg_370 <= 31'd1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_1_cast1_cast_reg_1037[2 : 0] <= i_1_cast1_cast_fu_520_p1[2 : 0];
        i_4_reg_1045 <= i_4_fu_530_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state43)) begin
        i_2_cast9_cast_reg_1124[2 : 0] <= i_2_cast9_cast_fu_859_p1[2 : 0];
        i_6_reg_1132 <= i_6_fu_869_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_3_reg_1022 <= i_3_fu_514_p2;
        i_cast_reg_1013[30 : 0] <= i_cast_fu_503_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        i_5_reg_1104 <= i_5_fu_655_p2;
        state_addr_13_reg_1081[2 : 0] <= i_i_cast_fu_605_p1[2 : 0];
        state_addr_14_reg_1086 <= tmp_37_cast_fu_624_p1;
        state_addr_15_reg_1091[2 : 0] <= tmp_35_fu_629_p3[2 : 0];
        state_addr_16_reg_1096 <= tmp_39_cast_fu_644_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        j_3_reg_1063 <= j_3_fu_580_p2;
        state_addr_12_reg_1055 <= tmp_36_cast_fu_565_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        j_4_reg_1150 <= j_4_fu_919_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31))) begin
        reg_462 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state32))) begin
        reg_467 <= state_q1;
        reg_472 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state33))) begin
        reg_477 <= state_q1;
        reg_482 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34))) begin
        reg_487 <= state_q1;
        reg_492 <= state_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & (1'd1 == exitcond_i_fu_649_p2))) begin
        round_1_reg_1109 <= round_1_fu_661_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        round_cast_reg_1073[30 : 0] <= round_cast_fu_596_p1[30 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state44) & (1'd0 == exitcond_fu_913_p2))) begin
        sum_reg_1155 <= sum_fu_925_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        tmp_13_i_reg_1114 <= tmp_13_i_fu_813_p2;
        tmp_18_i_reg_1119 <= tmp_18_i_fu_853_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & (exitcond3_fu_524_p2 == 1'd0))) begin
        tmp_27_reg_1050[3 : 2] <= tmp_27_fu_540_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state43) & (1'd0 == exitcond1_fu_863_p2))) begin
        tmp_30_reg_1137[3 : 2] <= tmp_30_fu_879_p3[3 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        tmp_reg_1008[31 : 2] <= tmp_fu_497_p2[31 : 2];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Key_address0 = i_cast_reg_1013;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Key_address0 = grp_KeyExpansion_fu_415_Key_address0;
    end else begin
        Key_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Key_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        Key_ce0 = grp_KeyExpansion_fu_415_Key_ce0;
    end else begin
        Key_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        Key_ce1 = grp_KeyExpansion_fu_415_Key_ce1;
    end else begin
        Key_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        Key_we0 = 1'b1;
    end else begin
        Key_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state42))) begin
        RoundKey_address0 = grp_AddRoundKey_fu_427_RoundKey_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_address0 = grp_KeyExpansion_fu_415_RoundKey_address0;
    end else begin
        RoundKey_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state42))) begin
        RoundKey_ce0 = grp_AddRoundKey_fu_427_RoundKey_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_ce0 = grp_KeyExpansion_fu_415_RoundKey_ce0;
    end else begin
        RoundKey_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_ce1 = grp_KeyExpansion_fu_415_RoundKey_ce1;
    end else begin
        RoundKey_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_we0 = grp_KeyExpansion_fu_415_RoundKey_we0;
    end else begin
        RoundKey_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        RoundKey_we1 = grp_KeyExpansion_fu_415_RoundKey_we1;
    end else begin
        RoundKey_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) & (1'd1 == exitcond1_fu_863_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state43) & (1'd1 == exitcond1_fu_863_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state42)) begin
        grp_AddRoundKey_fu_427_round = Nr;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        grp_AddRoundKey_fu_427_round = round_cast_reg_1073;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_AddRoundKey_fu_427_round = 32'd0;
    end else begin
        grp_AddRoundKey_fu_427_round = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        in_address0 = tmp_42_cast_fu_591_p1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        in_address0 = i_cast_reg_1013;
    end else begin
        in_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state3))) begin
        in_ce0 = 1'b1;
    end else begin
        in_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        in_we0 = 1'b1;
    end else begin
        in_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        out_r_ce0 = 1'b1;
    end else begin
        out_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        out_r_we0 = 1'b1;
    end else begin
        out_r_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state25)) begin
        state_address0 = state_addr_14_reg_1086;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state26))) begin
        state_address0 = state_addr_16_reg_1096;
    end else if (((1'b1 == ap_CS_fsm_state23) & (1'd0 == exitcond_i_fu_649_p2))) begin
        state_address0 = tmp_37_cast_fu_624_p1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state29))) begin
        state_address0 = 32'd5;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state40))) begin
        state_address0 = 32'd13;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state39))) begin
        state_address0 = 32'd15;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state38))) begin
        state_address0 = 32'd11;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state37))) begin
        state_address0 = 32'd10;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state36))) begin
        state_address0 = 32'd7;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address0 = 32'd4;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_address0 = state_addr_12_reg_1055;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state28))) begin
        state_address0 = grp_SubBytes_fu_435_state_address0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state42))) begin
        state_address0 = grp_AddRoundKey_fu_427_state_address0;
    end else begin
        state_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state44)) begin
        state_address1 = tmp_47_cast_fu_904_p1;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        state_address1 = state_addr_13_reg_1081;
    end else if (((1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state26))) begin
        state_address1 = state_addr_15_reg_1091;
    end else if (((1'b1 == ap_CS_fsm_state23) & (1'd0 == exitcond_i_fu_649_p2))) begin
        state_address1 = i_i_cast_fu_605_p1;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state29))) begin
        state_address1 = 32'd4;
    end else if (((1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state40))) begin
        state_address1 = 32'd14;
    end else if (((1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state39))) begin
        state_address1 = 32'd12;
    end else if (((1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state38))) begin
        state_address1 = 32'd9;
    end else if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state37))) begin
        state_address1 = 32'd8;
    end else if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state36))) begin
        state_address1 = 32'd6;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        state_address1 = 32'd5;
    end else begin
        state_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | ((1'b1 == ap_CS_fsm_state23) & (1'd0 == exitcond_i_fu_649_p2)) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40))) begin
        state_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state28))) begin
        state_ce0 = grp_SubBytes_fu_435_state_ce0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state42))) begin
        state_ce0 = grp_AddRoundKey_fu_427_state_ce0;
    end else begin
        state_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | ((1'b1 == ap_CS_fsm_state23) & (1'd0 == exitcond_i_fu_649_p2)) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40))) begin
        state_ce1 = 1'b1;
    end else begin
        state_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        state_d0 = tmp_18_i_reg_1119;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        state_d0 = tmp_4_i_fu_766_p2;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state40))) begin
        state_d0 = reg_487;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state39))) begin
        state_d0 = reg_448;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state38))) begin
        state_d0 = reg_477;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state37))) begin
        state_d0 = reg_467;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state36))) begin
        state_d0 = reg_442;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35))) begin
        state_d0 = reg_455;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        state_d0 = in_q0;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state28))) begin
        state_d0 = grp_SubBytes_fu_435_state_d0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state42))) begin
        state_d0 = grp_AddRoundKey_fu_427_state_d0;
    end else begin
        state_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state26)) begin
        state_d1 = tmp_13_i_reg_1114;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        state_d1 = tmp_9_i_fu_719_p2;
    end else if (((1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state40))) begin
        state_d1 = reg_455;
    end else if (((1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state39))) begin
        state_d1 = reg_492;
    end else if (((1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state38))) begin
        state_d1 = reg_482;
    end else if (((1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state37))) begin
        state_d1 = reg_472;
    end else if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state36))) begin
        state_d1 = reg_462;
    end else if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35))) begin
        state_d1 = reg_448;
    end else begin
        state_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40))) begin
        state_we0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state28))) begin
        state_we0 = grp_SubBytes_fu_435_state_we0;
    end else if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state42))) begin
        state_we0 = grp_AddRoundKey_fu_427_state_we0;
    end else begin
        state_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state40))) begin
        state_we1 = 1'b1;
    end else begin
        state_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        temp1_ce0 = 1'b1;
    end else begin
        temp1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        temp22_ce0 = 1'b1;
    end else begin
        temp22_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (tmp_s_fu_509_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (grp_KeyExpansion_fu_415_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (exitcond3_fu_524_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond2_fu_574_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (grp_AddRoundKey_fu_427_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == tmp_28_fu_600_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (grp_SubBytes_fu_435_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            if (((1'b1 == ap_CS_fsm_state23) & (1'd1 == exitcond_i_fu_649_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state27 : begin
            if (((grp_AddRoundKey_fu_427_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state27))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (((1'b1 == ap_CS_fsm_state28) & (grp_SubBytes_fu_435_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            if (((grp_AddRoundKey_fu_427_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state42))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state42;
            end
        end
        ap_ST_fsm_state43 : begin
            if (((1'b1 == ap_CS_fsm_state43) & (1'd1 == exitcond1_fu_863_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state44;
            end
        end
        ap_ST_fsm_state44 : begin
            if (((1'b1 == ap_CS_fsm_state44) & (1'd1 == exitcond_fu_913_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state43;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state45;
            end
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Tm_1_fu_726_p2 = (state_q1 ^ reg_448);

assign Tm_2_fu_773_p2 = (state_q0 ^ state_q1);

assign Tm_3_fu_819_p2 = (state_q0 ^ reg_442);

assign Tm_4_fu_673_p2 = (state_q1 ^ Tm_fu_667_p2);

assign Tm_fu_667_p2 = (reg_448 ^ reg_442);

assign Tmp_fu_679_p2 = (state_q0 ^ Tm_4_fu_673_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign exitcond1_fu_863_p2 = ((i_2_reg_393 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_fu_574_p2 = ((j_reg_359 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond3_fu_524_p2 = ((i_1_reg_348 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_913_p2 = ((j_1_reg_404 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_i_fu_649_p2 = ((i_i_reg_382 == 3'd4) ? 1'b1 : 1'b0);

assign grp_AddRoundKey_fu_427_ap_start = ap_reg_grp_AddRoundKey_fu_427_ap_start;

assign grp_KeyExpansion_fu_415_ap_start = ap_reg_grp_KeyExpansion_fu_415_ap_start;

assign grp_SubBytes_fu_435_ap_start = ap_reg_grp_SubBytes_fu_435_ap_start;

assign i_1_cast1_cast_fu_520_p1 = i_1_reg_348;

assign i_2_cast9_cast_fu_859_p1 = i_2_reg_393;

assign i_3_fu_514_p2 = (i_reg_337 + 31'd1);

assign i_4_fu_530_p2 = (i_1_reg_348 + 3'd1);

assign i_5_fu_655_p2 = (i_i_reg_382 + 3'd1);

assign i_6_fu_869_p2 = (i_2_reg_393 + 3'd1);

assign i_cast_fu_503_p1 = i_reg_337;

assign i_i_cast_cast1_fu_610_p1 = i_i_reg_382;

assign i_i_cast_cast_fu_614_p1 = i_i_reg_382;

assign i_i_cast_fu_605_p1 = i_i_reg_382;

assign j_1_cast_fu_909_p1 = j_1_reg_404;

assign j_3_fu_580_p2 = (j_reg_359 + 3'd1);

assign j_4_fu_919_p2 = (j_1_reg_404 + 3'd1);

assign j_cast_fu_570_p1 = j_reg_359;

assign out_r_address0 = sum_cast_fu_930_p1;

assign out_r_d0 = state_q1;

assign round_1_fu_661_p2 = (round_reg_370 + 31'd1);

assign round_cast_fu_596_p1 = round_reg_370;

assign sum_cast_fu_930_p1 = sum_reg_1155;

assign sum_fu_925_p2 = (j_1_cast_fu_909_p1 + tmp_30_reg_1137);

assign temp1_address0 = i_cast_fu_503_p1;

assign temp22_address0 = i_cast_fu_503_p1;

assign tmp1_fu_707_p2 = (reg_442 ^ tmp_37_fu_685_p2);

assign tmp2_fu_713_p2 = (tmp_7_i_cast_cast_fu_699_p3 ^ Tmp_fu_679_p2);

assign tmp3_fu_754_p2 = (reg_448 ^ tmp_39_fu_732_p2);

assign tmp4_fu_760_p2 = (tmp_2_i_cast_cast_fu_746_p3 ^ Tmp_fu_679_p2);

assign tmp5_fu_801_p2 = (state_q0 ^ Tm_fu_667_p2);

assign tmp6_fu_807_p2 = (tmp_41_fu_779_p2 ^ tmp_11_i_cast_cast_fu_793_p3);

assign tmp7_fu_847_p2 = (Tm_4_fu_673_p2 ^ tmp_16_i_cast_cast_fu_839_p3);

assign tmp_11_i_cast_cast_fu_793_p3 = ((tmp_42_fu_785_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_13_i_fu_813_p2 = (tmp6_fu_807_p2 ^ tmp5_fu_801_p2);

assign tmp_16_i_cast_cast_fu_839_p3 = ((tmp_44_fu_831_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_18_i_fu_853_p2 = (tmp7_fu_847_p2 ^ tmp_43_fu_825_p2);

assign tmp_27_fu_540_p3 = {{tmp_33_fu_536_p1}, {2'd0}};

assign tmp_28_fu_600_p2 = (($signed(round_cast_fu_596_p1) < $signed(Nr)) ? 1'b1 : 1'b0);

assign tmp_29_fu_586_p2 = (j_cast_fu_570_p1 + tmp_27_reg_1050);

assign tmp_2_i_cast_cast_fu_746_p3 = ((tmp_40_fu_738_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_30_fu_879_p3 = {{tmp_46_fu_875_p1}, {2'd0}};

assign tmp_31_fu_548_p3 = {{j_reg_359}, {2'd0}};

assign tmp_32_fu_560_p2 = (i_1_cast1_cast_reg_1037 + tmp_35_cast_fu_556_p1);

assign tmp_33_fu_536_p1 = i_1_reg_348[1:0];

assign tmp_34_fu_618_p2 = (i_i_cast_cast_fu_614_p1 + 4'd4);

assign tmp_35_cast_fu_556_p1 = tmp_31_fu_548_p3;

assign tmp_35_fu_629_p3 = {{29'd1}, {i_i_reg_382}};

assign tmp_36_cast_fu_565_p1 = tmp_32_fu_560_p2;

assign tmp_36_fu_638_p2 = (i_i_cast_cast1_fu_610_p1 + 5'd12);

assign tmp_37_cast_fu_624_p1 = tmp_34_fu_618_p2;

assign tmp_37_fu_685_p2 = Tm_fu_667_p2 << 8'd1;

assign tmp_38_fu_691_p3 = Tm_fu_667_p2[32'd7];

assign tmp_39_cast_fu_644_p1 = tmp_36_fu_638_p2;

assign tmp_39_fu_732_p2 = Tm_1_fu_726_p2 << 8'd1;

assign tmp_40_fu_738_p3 = Tm_1_fu_726_p2[32'd7];

assign tmp_41_fu_779_p2 = Tm_2_fu_773_p2 << 8'd1;

assign tmp_42_cast_fu_591_p1 = tmp_29_fu_586_p2;

assign tmp_42_fu_785_p3 = Tm_2_fu_773_p2[32'd7];

assign tmp_43_fu_825_p2 = Tm_3_fu_819_p2 << 8'd1;

assign tmp_44_fu_831_p3 = Tm_3_fu_819_p2[32'd7];

assign tmp_45_fu_887_p3 = {{j_1_reg_404}, {2'd0}};

assign tmp_46_cast_fu_895_p1 = tmp_45_fu_887_p3;

assign tmp_46_fu_875_p1 = i_2_reg_393[1:0];

assign tmp_47_cast_fu_904_p1 = tmp_47_fu_899_p2;

assign tmp_47_fu_899_p2 = (i_2_cast9_cast_reg_1124 + tmp_46_cast_fu_895_p1);

assign tmp_4_i_fu_766_p2 = (tmp4_fu_760_p2 ^ tmp3_fu_754_p2);

assign tmp_7_i_cast_cast_fu_699_p3 = ((tmp_38_fu_691_p3[0:0] === 1'b1) ? 8'd27 : 8'd0);

assign tmp_9_i_fu_719_p2 = (tmp2_fu_713_p2 ^ tmp1_fu_707_p2);

assign tmp_fu_497_p2 = Nk << 32'd2;

assign tmp_s_fu_509_p2 = (($signed(i_cast_fu_503_p1) < $signed(tmp_reg_1008)) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_reg_1008[1:0] <= 2'b00;
    i_cast_reg_1013[31] <= 1'b0;
    i_1_cast1_cast_reg_1037[5:3] <= 3'b000;
    tmp_27_reg_1050[1:0] <= 2'b00;
    round_cast_reg_1073[31] <= 1'b0;
    state_addr_13_reg_1081[3] <= 1'b0;
    state_addr_15_reg_1091[3] <= 1'b1;
    i_2_cast9_cast_reg_1124[5:3] <= 3'b000;
    tmp_30_reg_1137[1:0] <= 2'b00;
end

endmodule //Cipher
