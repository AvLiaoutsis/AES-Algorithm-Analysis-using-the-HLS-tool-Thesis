-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.2
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity AddRoundKey is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    round : IN STD_LOGIC_VECTOR (5 downto 0);
    state_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    state_ce0 : OUT STD_LOGIC;
    state_we0 : OUT STD_LOGIC;
    state_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    state_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    RoundKey_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    RoundKey_ce0 : OUT STD_LOGIC;
    RoundKey_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of AddRoundKey is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_cast4_cast_fu_82_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_cast4_cast_reg_183 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_3_fu_92_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_3_reg_191 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_cast_fu_110_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_cast_reg_196 : STD_LOGIC_VECTOR (7 downto 0);
    signal exitcond1_fu_86_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal state_addr_reg_201 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_3_fu_142_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_3_reg_209 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_fu_136_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_reg_60 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_71 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_25_cast_fu_131_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum3_cast_fu_166_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_98_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_s_fu_102_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_16_fu_114_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_24_cast_fu_122_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_17_fu_126_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_38_fu_148_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp1_fu_151_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal sum3_fu_161_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_reg_60_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_136_p2 = ap_const_lv1_1))) then 
                i_reg_60 <= i_3_reg_191;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_60 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_71_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_86_p2 = ap_const_lv1_0))) then 
                j_reg_71 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                j_reg_71 <= j_3_reg_209;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_3_reg_191 <= i_3_fu_92_p2;
                    i_cast4_cast_reg_183(2 downto 0) <= i_cast4_cast_fu_82_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_3_reg_209 <= j_3_fu_142_p2;
                state_addr_reg_201 <= tmp_25_cast_fu_131_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_86_p2 = ap_const_lv1_0))) then
                    tmp_cast_reg_196(3 downto 2) <= tmp_cast_fu_110_p1(3 downto 2);
            end if;
        end if;
    end process;
    i_cast4_cast_reg_183(5 downto 3) <= "000";
    tmp_cast_reg_196(1 downto 0) <= "00";
    tmp_cast_reg_196(7 downto 4) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_86_p2, ap_CS_fsm_state3, exitcond_fu_136_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_86_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_fu_136_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    RoundKey_address0 <= sum3_cast_fu_166_p1(8 - 1 downto 0);

    RoundKey_ce0_assign_proc : process(ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            RoundKey_ce0 <= ap_const_logic_1;
        else 
            RoundKey_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond1_fu_86_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_86_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond1_fu_86_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (exitcond1_fu_86_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_86_p2 <= "1" when (i_reg_60 = ap_const_lv3_4) else "0";
    exitcond_fu_136_p2 <= "1" when (j_reg_71 = ap_const_lv3_4) else "0";
    i_3_fu_92_p2 <= std_logic_vector(unsigned(i_reg_60) + unsigned(ap_const_lv3_1));
    i_cast4_cast_fu_82_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_60),6));
    j_3_fu_142_p2 <= std_logic_vector(unsigned(j_reg_71) + unsigned(ap_const_lv3_1));

    state_address0_assign_proc : process(state_addr_reg_201, ap_CS_fsm_state3, ap_CS_fsm_state4, tmp_25_cast_fu_131_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_address0 <= state_addr_reg_201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            state_address0 <= tmp_25_cast_fu_131_p1(4 - 1 downto 0);
        else 
            state_address0 <= "XXXX";
        end if; 
    end process;


    state_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            state_ce0 <= ap_const_logic_1;
        else 
            state_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    state_d0 <= (state_q0 xor RoundKey_q0);

    state_we0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            state_we0 <= ap_const_logic_1;
        else 
            state_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum3_cast_fu_166_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum3_fu_161_p2),32));
    sum3_fu_161_p2 <= std_logic_vector(unsigned(tmp1_fu_151_p4) + unsigned(tmp_cast_reg_196));
    tmp1_fu_151_p4 <= ((tmp_38_fu_148_p1 & ap_const_lv1_0) & j_reg_71);
    tmp_16_fu_114_p3 <= (j_reg_71 & ap_const_lv2_0);
    tmp_17_fu_126_p2 <= std_logic_vector(unsigned(i_cast4_cast_reg_183) + unsigned(tmp_24_cast_fu_122_p1));
    tmp_24_cast_fu_122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_114_p3),6));
    tmp_25_cast_fu_131_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_126_p2),32));
    tmp_38_fu_148_p1 <= round(4 - 1 downto 0);
    tmp_cast_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_102_p3),8));
    tmp_fu_98_p1 <= i_reg_60(2 - 1 downto 0);
    tmp_s_fu_102_p3 <= (tmp_fu_98_p1 & ap_const_lv2_0);
end behav;
